
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002704  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f8  080028f8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080028f8  080028f8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028f8  080028f8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000006c  0800296c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  0800296c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002bcd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dc6  00000000  00000000  00022cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  00023a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e8  00000000  00000000  00023eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000313c  00000000  00000000  00024198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003766  00000000  00000000  000272d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084956  00000000  00000000  0002aa3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015f0  00000000  00000000  000af390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  000b0980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800288c 	.word	0x0800288c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	0800288c 	.word	0x0800288c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <ADC_Init>:
#include "ADC_PRIV.h"
#include "ADC_CONFG.h"
#include "ADC.h"
#include "LCD.h"

void ADC_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

    // Enable the ADC peripheral clock
	Enable_peripheral(RCC_APB2ENR_ADC1 ,RCC_APB2 );
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	2008      	movs	r0, #8
 8000ac4:	f000 fda2 	bl	800160c <Enable_peripheral>
	//	//A port clock enable
	MGPIO_vSetPinMode(GPIO_PORTA, 0, GPIO_MODE_ANALOG);
 8000ac8:	220b      	movs	r2, #11
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f847 	bl	8000b60 <MGPIO_vSetPinMode>
    // Configure the ADC for single conversion mode
    ADC1->ADC_CR1 = 0; // Reset CR1 register
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <ADC_Init+0x54>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
    ADC1->ADC_CR2 = 0; // Reset CR2 register
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <ADC_Init+0x54>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
	// Configure ADC for single conversion mode

    ADC1->ADC_CR2 &= ~(1U << 11); // Set CONT = 0 for single conversion
 8000ade:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <ADC_Init+0x54>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4a0b      	ldr	r2, [pc, #44]	; (8000b10 <ADC_Init+0x54>)
 8000ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ae8:	6093      	str	r3, [r2, #8]
    ADC1->ADC_CR1 &= ~(0x3U << 24); // Clear RES bits
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <ADC_Init+0x54>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <ADC_Init+0x54>)
 8000af0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000af4:	6053      	str	r3, [r2, #4]
	ADC1->ADC_CR1 |= (RES << 24);
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <ADC_Init+0x54>)
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <ADC_Init+0x54>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	6053      	str	r3, [r2, #4]
//	ADC1->ADC_SMPR2 |= (SAMPLE_CYC << (channel_num*3));
//	#else
//	ADC1->ADC_SMPR1 &=~ (0x7U <<  ((channel_num-10)*3));
//	ADC1->ADC_SMPR1 |= (SAMPLE_CYC <<  ((channel_num-10)*3));
//	#endif
	ADC1->ADC_CR2 |= 1U;
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <ADC_Init+0x54>)
 8000b00:	689b      	ldr	r3, [r3, #8]
 8000b02:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <ADC_Init+0x54>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6093      	str	r3, [r2, #8]
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40012000 	.word	0x40012000

08000b14 <ADC_ReadChannel>:

float32 ADC_ReadChannel(uint32 channel) {
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    // Configure the channel
    ADC1->ADC_SQR1= (channel & 0x1F);
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <ADC_ReadChannel+0x48>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f003 031f 	and.w	r3, r3, #31
 8000b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Start a conversion
    ADC1-> ADC_CR2 |= (1 << 30); // Set the SWSTART bit
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <ADC_ReadChannel+0x48>)
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <ADC_ReadChannel+0x48>)
 8000b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b30:	6093      	str	r3, [r2, #8]
    // Wait for the conversion to complete
    while (!(ADC1->ADC_SR & (1 << 1))); // Check EOC bit in ADC_SR
 8000b32:	bf00      	nop
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <ADC_ReadChannel+0x48>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0f9      	beq.n	8000b34 <ADC_ReadChannel+0x20>


    // Read and return the ADC conversion result
    return ADC1->ADC_DR;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <ADC_ReadChannel+0x48>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	ee07 3a90 	vmov	s15, r3
 8000b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40012000 	.word	0x40012000

08000b60 <MGPIO_vSetPinMode>:
#include"GPIO_CONFG.h"
#include "STD_Types.h"
#include "BIT_Math.h"


tenuErrorStatus MGPIO_vSetPinMode(uint8 u8_PortId, uint8 u8_PinNo , uint8 u8_PinMode){
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	71bb      	strb	r3, [r7, #6]
 8000b6e:	4613      	mov	r3, r2
 8000b70:	717b      	strb	r3, [r7, #5]
if (u8_PinMode==GPIO_MODE_INPUT ||u8_PinMode==GPIO_MODE_OUTPUT ||u8_PinMode==GPIO_MODE_ALTFUN
 8000b72:	797b      	ldrb	r3, [r7, #5]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d008      	beq.n	8000b8a <MGPIO_vSetPinMode+0x2a>
 8000b78:	797b      	ldrb	r3, [r7, #5]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d005      	beq.n	8000b8a <MGPIO_vSetPinMode+0x2a>
 8000b7e:	797b      	ldrb	r3, [r7, #5]
 8000b80:	2b0a      	cmp	r3, #10
 8000b82:	d002      	beq.n	8000b8a <MGPIO_vSetPinMode+0x2a>
|| u8_PinMode==GPIO_MODE_ANALOG )
 8000b84:	797b      	ldrb	r3, [r7, #5]
 8000b86:	2b0b      	cmp	r3, #11
 8000b88:	d154      	bne.n	8000c34 <MGPIO_vSetPinMode+0xd4>
{
   switch(u8_PortId){
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d038      	beq.n	8000c02 <MGPIO_vSetPinMode+0xa2>
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	dc4f      	bgt.n	8000c34 <MGPIO_vSetPinMode+0xd4>
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d002      	beq.n	8000b9e <MGPIO_vSetPinMode+0x3e>
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d019      	beq.n	8000bd0 <MGPIO_vSetPinMode+0x70>
 8000b9c:	e04a      	b.n	8000c34 <MGPIO_vSetPinMode+0xd4>
    case GPIO_PORTA :
            GPIOA ->GPIOx_MODER &= ~(0b11<<(u8_PinNo*2));
 8000b9e:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	79ba      	ldrb	r2, [r7, #6]
 8000ba4:	0052      	lsls	r2, r2, #1
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bac:	43d2      	mvns	r2, r2
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4a24      	ldr	r2, [pc, #144]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000bb2:	400b      	ands	r3, r1
 8000bb4:	6013      	str	r3, [r2, #0]
            GPIOA ->GPIOx_MODER |=(u8_PinMode<<(u8_PinNo*2)); 
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	7979      	ldrb	r1, [r7, #5]
 8000bbc:	79ba      	ldrb	r2, [r7, #6]
 8000bbe:	0052      	lsls	r2, r2, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
            return E_OK; 
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e032      	b.n	8000c36 <MGPIO_vSetPinMode+0xd6>

       
    case GPIO_PORTB:
            GPIOB ->GPIOx_MODER &= ~(0b11<<(u8_PinNo*2));
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MGPIO_vSetPinMode+0xe8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	2103      	movs	r1, #3
 8000bda:	fa01 f202 	lsl.w	r2, r1, r2
 8000bde:	43d2      	mvns	r2, r2
 8000be0:	4611      	mov	r1, r2
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <MGPIO_vSetPinMode+0xe8>)
 8000be4:	400b      	ands	r3, r1
 8000be6:	6013      	str	r3, [r2, #0]
            GPIOB ->GPIOx_MODER |=(u8_PinMode<<(u8_PinNo*2));
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MGPIO_vSetPinMode+0xe8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	7979      	ldrb	r1, [r7, #5]
 8000bee:	79ba      	ldrb	r2, [r7, #6]
 8000bf0:	0052      	lsls	r2, r2, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MGPIO_vSetPinMode+0xe8>)
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	6013      	str	r3, [r2, #0]
            return E_OK;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e019      	b.n	8000c36 <MGPIO_vSetPinMode+0xd6>
    case GPIO_PORTC:
            GPIOC ->GPIOx_MODER &= ~(0b11<<(u8_PinNo*2));
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	4611      	mov	r1, r2
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000c16:	400b      	ands	r3, r1
 8000c18:	6013      	str	r3, [r2, #0]
            GPIOC ->GPIOx_MODER |=(u8_PinMode<<(u8_PinNo*2));
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	7979      	ldrb	r1, [r7, #5]
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	0052      	lsls	r2, r2, #1
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	4611      	mov	r1, r2
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <MGPIO_vSetPinMode+0xe4>)
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6013      	str	r3, [r2, #0]
            return E_OK;
 8000c30:	2300      	movs	r3, #0
 8000c32:	e000      	b.n	8000c36 <MGPIO_vSetPinMode+0xd6>
 }
}
   return E_NOK_CONFIG_PARM_ERROR;
 8000c34:	2304      	movs	r3, #4
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400

08000c4c <MGPIO_u8SetPinVal>:
 }
return L_u8PinVal;
}


void MGPIO_u8SetPinVal(uint8 u8_PortId,uint8 u8_PinNo, uint8 u8_Pin_Value ){
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
 8000c56:	460b      	mov	r3, r1
 8000c58:	71bb      	strb	r3, [r7, #6]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	717b      	strb	r3, [r7, #5]
    if(u8_Pin_Value==GPIO_HIGH){
 8000c5e:	797b      	ldrb	r3, [r7, #5]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d12a      	bne.n	8000cba <MGPIO_u8SetPinVal+0x6e>
         switch(u8_PortId){
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d01c      	beq.n	8000ca4 <MGPIO_u8SetPinVal+0x58>
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	dc53      	bgt.n	8000d16 <MGPIO_u8SetPinVal+0xca>
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <MGPIO_u8SetPinVal+0x2c>
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d00b      	beq.n	8000c8e <MGPIO_u8SetPinVal+0x42>
                CLR_BIT(GPIOC->GPIOx_ODR,u8_PinNo)   ;   
                break;
        }

    }
}
 8000c76:	e04e      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
                SET_BIT(GPIOA->GPIOx_ODR,u8_PinNo)   ;
 8000c78:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000c7a:	695b      	ldr	r3, [r3, #20]
 8000c7c:	79ba      	ldrb	r2, [r7, #6]
 8000c7e:	2101      	movs	r1, #1
 8000c80:	fa01 f202 	lsl.w	r2, r1, r2
 8000c84:	4611      	mov	r1, r2
 8000c86:	4a27      	ldr	r2, [pc, #156]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000c88:	430b      	orrs	r3, r1
 8000c8a:	6153      	str	r3, [r2, #20]
                break;
 8000c8c:	e043      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
                SET_BIT(GPIOB->GPIOx_ODR,u8_PinNo)   ; 
 8000c8e:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MGPIO_u8SetPinVal+0xdc>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	79ba      	ldrb	r2, [r7, #6]
 8000c94:	2101      	movs	r1, #1
 8000c96:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9a:	4611      	mov	r1, r2
 8000c9c:	4a22      	ldr	r2, [pc, #136]	; (8000d28 <MGPIO_u8SetPinVal+0xdc>)
 8000c9e:	430b      	orrs	r3, r1
 8000ca0:	6153      	str	r3, [r2, #20]
                break;
 8000ca2:	e038      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
                SET_BIT(GPIOC->GPIOx_ODR,u8_PinNo)   ;   
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	79ba      	ldrb	r2, [r7, #6]
 8000caa:	2101      	movs	r1, #1
 8000cac:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6153      	str	r3, [r2, #20]
                break;
 8000cb8:	e02d      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
         switch(u8_PortId){
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d01e      	beq.n	8000cfe <MGPIO_u8SetPinVal+0xb2>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	dc28      	bgt.n	8000d16 <MGPIO_u8SetPinVal+0xca>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d002      	beq.n	8000cce <MGPIO_u8SetPinVal+0x82>
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d00c      	beq.n	8000ce6 <MGPIO_u8SetPinVal+0x9a>
}
 8000ccc:	e023      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
                CLR_BIT(GPIOA->GPIOx_ODR,u8_PinNo)   ;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	79ba      	ldrb	r2, [r7, #6]
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cda:	43d2      	mvns	r2, r2
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000ce0:	400b      	ands	r3, r1
 8000ce2:	6153      	str	r3, [r2, #20]
                break;
 8000ce4:	e017      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
                CLR_BIT(GPIOB->GPIOx_ODR,u8_PinNo)   ; 
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <MGPIO_u8SetPinVal+0xdc>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <MGPIO_u8SetPinVal+0xdc>)
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	6153      	str	r3, [r2, #20]
                break;
 8000cfc:	e00b      	b.n	8000d16 <MGPIO_u8SetPinVal+0xca>
                CLR_BIT(GPIOC->GPIOx_ODR,u8_PinNo)   ;   
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <MGPIO_u8SetPinVal+0xd8>)
 8000d10:	400b      	ands	r3, r1
 8000d12:	6153      	str	r3, [r2, #20]
                break;
 8000d14:	bf00      	nop
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40020000 	.word	0x40020000
 8000d28:	40020400 	.word	0x40020400

08000d2c <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void) 
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	e15c      	b.n	8000ff2 <LCD_voidInit+0x2c6>
	{

		MSTK_voidDelayMsec(300);
 8000d38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d3c:	f000 fcfc 	bl	8001738 <MSTK_voidDelayMsec>
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
 8000d40:	79fa      	ldrb	r2, [r7, #7]
 8000d42:	49b0      	ldr	r1, [pc, #704]	; (8001004 <LCD_voidInit+0x2d8>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	f040 8091 	bne.w	8000e7e <LCD_voidInit+0x152>
		{

			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	49a9      	ldr	r1, [pc, #676]	; (8001004 <LCD_voidInit+0x2d8>)
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	00db      	lsls	r3, r3, #3
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000d7a:	b259      	sxtb	r1, r3
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ; 
 8000d7c:	79fa      	ldrb	r2, [r7, #7]
 8000d7e:	48a1      	ldr	r0, [pc, #644]	; (8001004 <LCD_voidInit+0x2d8>)
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4403      	add	r3, r0
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	009b      	lsls	r3, r3, #2
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	430b      	orrs	r3, r1
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	71bb      	strb	r3, [r7, #6]
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
 8000d9c:	79ba      	ldrb	r2, [r7, #6]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fa6c 	bl	8001280 <LCD_enuWriteCmd>

			

		   MSTK_voidDelayMsec(20);
 8000da8:	2014      	movs	r0, #20
 8000daa:	f000 fcc5 	bl	8001738 <MSTK_voidDelayMsec>
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
 8000dae:	79fa      	ldrb	r2, [r7, #7]
 8000db0:	4994      	ldr	r1, [pc, #592]	; (8001004 <LCD_voidInit+0x2d8>)
 8000db2:	4613      	mov	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4413      	add	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	440b      	add	r3, r1
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	b259      	sxtb	r1, r3
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
 8000dce:	79fa      	ldrb	r2, [r7, #7]
 8000dd0:	488c      	ldr	r0, [pc, #560]	; (8001004 <LCD_voidInit+0x2d8>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4403      	add	r3, r0
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	005b      	lsls	r3, r3, #1
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	430b      	orrs	r3, r1
 8000dea:	b259      	sxtb	r1, r3
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;
 8000dec:	79fa      	ldrb	r2, [r7, #7]
 8000dee:	4885      	ldr	r0, [pc, #532]	; (8001004 <LCD_voidInit+0x2d8>)
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	4403      	add	r3, r0
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	b25b      	sxtb	r3, r3
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
 8000e04:	430b      	orrs	r3, r1
 8000e06:	b25b      	sxtb	r3, r3
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
 8000e08:	71bb      	strb	r3, [r7, #6]
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
 8000e0a:	79ba      	ldrb	r2, [r7, #6]
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 fa35 	bl	8001280 <LCD_enuWriteCmd>
		    MSTK_voidDelayMsec(20);
 8000e16:	2014      	movs	r0, #20
 8000e18:	f000 fc8e 	bl	8001738 <MSTK_voidDelayMsec>
			
			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa2d 	bl	8001280 <LCD_enuWriteCmd>
		     MSTK_voidDelayMsec(20);
 8000e26:	2014      	movs	r0, #20
 8000e28:	f000 fc86 	bl	8001738 <MSTK_voidDelayMsec>
			
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
 8000e2c:	79fa      	ldrb	r2, [r7, #7]
 8000e2e:	4975      	ldr	r1, [pc, #468]	; (8001004 <LCD_voidInit+0x2d8>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	f043 0304 	orr.w	r3, r3, #4
 8000e4a:	b259      	sxtb	r1, r3
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ; 
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	486d      	ldr	r0, [pc, #436]	; (8001004 <LCD_voidInit+0x2d8>)
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4403      	add	r3, r0
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	b25b      	sxtb	r3, r3
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
 8000e64:	430b      	orrs	r3, r1
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	71bb      	strb	r3, [r7, #6]
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
 8000e6a:	79ba      	ldrb	r2, [r7, #6]
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fa05 	bl	8001280 <LCD_enuWriteCmd>

			 MSTK_voidDelayMsec(20);
 8000e76:	2014      	movs	r0, #20
 8000e78:	f000 fc5e 	bl	8001738 <MSTK_voidDelayMsec>
 8000e7c:	e0b6      	b.n	8000fec <LCD_voidInit+0x2c0>

		}
		else 
		{

				LCD_enuWriteCmd(u8CntrLoc , 0x20);
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2120      	movs	r1, #32
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f9fc 	bl	8001280 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000e88:	2014      	movs	r0, #20
 8000e8a:	f000 fc55 	bl	8001738 <MSTK_voidDelayMsec>
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	2120      	movs	r1, #32
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 f9f4 	bl	8001280 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000e98:	2014      	movs	r0, #20
 8000e9a:	f000 fc4d 	bl	8001738 <MSTK_voidDelayMsec>
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	4958      	ldr	r1, [pc, #352]	; (8001004 <LCD_voidInit+0x2d8>)
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4413      	add	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	440b      	add	r3, r1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	01db      	lsls	r3, r3, #7
 8000eb6:	b259      	sxtb	r1, r3
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ; 
 8000eb8:	79fa      	ldrb	r2, [r7, #7]
 8000eba:	4852      	ldr	r0, [pc, #328]	; (8001004 <LCD_voidInit+0x2d8>)
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	4413      	add	r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	4403      	add	r3, r0
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	019b      	lsls	r3, r3, #6
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	430b      	orrs	r3, r1
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	71bb      	strb	r3, [r7, #6]
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4611      	mov	r1, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f9ce 	bl	8001280 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000ee4:	2014      	movs	r0, #20
 8000ee6:	f000 fc27 	bl	8001738 <MSTK_voidDelayMsec>
				 
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2100      	movs	r1, #0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 f9c6 	bl	8001280 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f000 fc1f 	bl	8001738 <MSTK_voidDelayMsec>
				 
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	4941      	ldr	r1, [pc, #260]	; (8001004 <LCD_voidInit+0x2d8>)
 8000efe:	4613      	mov	r3, r2
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	4413      	add	r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	440b      	add	r3, r1
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	019b      	lsls	r3, r3, #6
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f18:	b259      	sxtb	r1, r3
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	4839      	ldr	r0, [pc, #228]	; (8001004 <LCD_voidInit+0x2d8>)
 8000f1e:	4613      	mov	r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4413      	add	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4403      	add	r3, r0
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	015b      	lsls	r3, r3, #5
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	430b      	orrs	r3, r1
 8000f36:	b259      	sxtb	r1, r3
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ; 
 8000f38:	79fa      	ldrb	r2, [r7, #7]
 8000f3a:	4832      	ldr	r0, [pc, #200]	; (8001004 <LCD_voidInit+0x2d8>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4403      	add	r3, r0
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	011b      	lsls	r3, r3, #4
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	430b      	orrs	r3, r1
 8000f54:	b25b      	sxtb	r3, r3
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
 8000f56:	71bb      	strb	r3, [r7, #6]
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
 8000f58:	79ba      	ldrb	r2, [r7, #6]
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f98e 	bl	8001280 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000f64:	2014      	movs	r0, #20
 8000f66:	f000 fbe7 	bl	8001738 <MSTK_voidDelayMsec>
				
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f000 f986 	bl	8001280 <LCD_enuWriteCmd>
			    MSTK_voidDelayMsec(20);
 8000f74:	2014      	movs	r0, #20
 8000f76:	f000 fbdf 	bl	8001738 <MSTK_voidDelayMsec>
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2110      	movs	r1, #16
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f97e 	bl	8001280 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000f84:	2014      	movs	r0, #20
 8000f86:	f000 fbd7 	bl	8001738 <MSTK_voidDelayMsec>

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f976 	bl	8001280 <LCD_enuWriteCmd>
			    MSTK_voidDelayMsec(20);
 8000f94:	2014      	movs	r0, #20
 8000f96:	f000 fbcf 	bl	8001738 <MSTK_voidDelayMsec>
				
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
 8000f9a:	79fa      	ldrb	r2, [r7, #7]
 8000f9c:	4919      	ldr	r1, [pc, #100]	; (8001004 <LCD_voidInit+0x2d8>)
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	015b      	lsls	r3, r3, #5
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	b259      	sxtb	r1, r3
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ; 
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <LCD_voidInit+0x2d8>)
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4403      	add	r3, r0
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	011b      	lsls	r3, r3, #4
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	430b      	orrs	r3, r1
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	71bb      	strb	r3, [r7, #6]
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
 8000fda:	79ba      	ldrb	r2, [r7, #6]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f94d 	bl	8001280 <LCD_enuWriteCmd>
			     MSTK_voidDelayMsec(20);
 8000fe6:	2014      	movs	r0, #20
 8000fe8:	f000 fba6 	bl	8001738 <MSTK_voidDelayMsec>
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	f43f ae9f 	beq.w	8000d38 <LCD_voidInit+0xc>
				
			
		}
		
	}
}
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000

08001008 <LCD_enuHelp>:



static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	460a      	mov	r2, r1
 8001012:	71fb      	strb	r3, [r7, #7]
 8001014:	4613      	mov	r3, r2
 8001016:	71bb      	strb	r3, [r7, #6]
	tenuErrorStatus enuErrorStateLoc = E_OK ;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
	uint8 u8CntrLoc ;

	if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch<=15){
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	4997      	ldr	r1, [pc, #604]	; (800127c <LCD_enuHelp+0x274>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	440b      	add	r3, r1
 800102a:	3303      	adds	r3, #3
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2b0f      	cmp	r3, #15
 8001030:	d80e      	bhi.n	8001050 <LCD_enuHelp+0x48>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, GPIO_HIGH );
 8001032:	79fa      	ldrb	r2, [r7, #7]
 8001034:	4991      	ldr	r1, [pc, #580]	; (800127c <LCD_enuHelp+0x274>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	440b      	add	r3, r1
 8001040:	3303      	adds	r3, #3
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	2000      	movs	r0, #0
 800104a:	f7ff fdff 	bl	8000c4c <MGPIO_u8SetPinVal>
 800104e:	e00f      	b.n	8001070 <LCD_enuHelp+0x68>

		}
		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch-16, GPIO_HIGH );
 8001050:	79fa      	ldrb	r2, [r7, #7]
 8001052:	498a      	ldr	r1, [pc, #552]	; (800127c <LCD_enuHelp+0x274>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3303      	adds	r3, #3
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	3b10      	subs	r3, #16
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	2001      	movs	r0, #1
 800106c:	f7ff fdee 	bl	8000c4c <MGPIO_u8SetPinVal>
		}

	if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite<=15){
 8001070:	79fa      	ldrb	r2, [r7, #7]
 8001072:	4982      	ldr	r1, [pc, #520]	; (800127c <LCD_enuHelp+0x274>)
 8001074:	4613      	mov	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4413      	add	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	3302      	adds	r3, #2
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	d80e      	bhi.n	80010a4 <LCD_enuHelp+0x9c>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite, GPIO_LOW );
 8001086:	79fa      	ldrb	r2, [r7, #7]
 8001088:	497c      	ldr	r1, [pc, #496]	; (800127c <LCD_enuHelp+0x274>)
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	3302      	adds	r3, #2
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff fdd5 	bl	8000c4c <MGPIO_u8SetPinVal>
 80010a2:	e00f      	b.n	80010c4 <LCD_enuHelp+0xbc>
		}
		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite-16, GPIO_LOW );
 80010a4:	79fa      	ldrb	r2, [r7, #7]
 80010a6:	4975      	ldr	r1, [pc, #468]	; (800127c <LCD_enuHelp+0x274>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	440b      	add	r3, r1
 80010b2:	3302      	adds	r3, #2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3b10      	subs	r3, #16
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff fdc4 	bl	8000c4c <MGPIO_u8SetPinVal>
		}

		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	496d      	ldr	r1, [pc, #436]	; (800127c <LCD_enuHelp+0x274>)
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d147      	bne.n	800116e <LCD_enuHelp+0x166>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
 80010de:	2300      	movs	r3, #0
 80010e0:	73bb      	strb	r3, [r7, #14]
 80010e2:	e040      	b.n	8001166 <LCD_enuHelp+0x15e>
			  {
				if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]<=15){
 80010e4:	79fa      	ldrb	r2, [r7, #7]
 80010e6:	7bb9      	ldrb	r1, [r7, #14]
 80010e8:	4864      	ldr	r0, [pc, #400]	; (800127c <LCD_enuHelp+0x274>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4403      	add	r3, r0
 80010f4:	440b      	add	r3, r1
 80010f6:	3304      	adds	r3, #4
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b0f      	cmp	r3, #15
 80010fc:	d817      	bhi.n	800112e <LCD_enuHelp+0x126>
						MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 80010fe:	79fa      	ldrb	r2, [r7, #7]
 8001100:	7bb9      	ldrb	r1, [r7, #14]
 8001102:	485e      	ldr	r0, [pc, #376]	; (800127c <LCD_enuHelp+0x274>)
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4403      	add	r3, r0
 800110e:	440b      	add	r3, r1
 8001110:	3304      	adds	r3, #4
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	79ba      	ldrb	r2, [r7, #6]
 8001116:	7bbb      	ldrb	r3, [r7, #14]
 8001118:	fa42 f303 	asr.w	r3, r2, r3
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff fd90 	bl	8000c4c <MGPIO_u8SetPinVal>
 800112c:	e018      	b.n	8001160 <LCD_enuHelp+0x158>
					}
				else{
						MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]-16, GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	7bb9      	ldrb	r1, [r7, #14]
 8001132:	4852      	ldr	r0, [pc, #328]	; (800127c <LCD_enuHelp+0x274>)
 8001134:	4613      	mov	r3, r2
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4403      	add	r3, r0
 800113e:	440b      	add	r3, r1
 8001140:	3304      	adds	r3, #4
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	3b10      	subs	r3, #16
 8001146:	b2d9      	uxtb	r1, r3
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	7bbb      	ldrb	r3, [r7, #14]
 800114c:	fa42 f303 	asr.w	r3, r2, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	461a      	mov	r2, r3
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fd76 	bl	8000c4c <MGPIO_u8SetPinVal>
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
 8001160:	7bbb      	ldrb	r3, [r7, #14]
 8001162:	3301      	adds	r3, #1
 8001164:	73bb      	strb	r3, [r7, #14]
 8001166:	7bbb      	ldrb	r3, [r7, #14]
 8001168:	2b07      	cmp	r3, #7
 800116a:	d9bb      	bls.n	80010e4 <LCD_enuHelp+0xdc>
 800116c:	e056      	b.n	800121c <LCD_enuHelp+0x214>
					}	
				  
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
 800116e:	79fa      	ldrb	r2, [r7, #7]
 8001170:	4942      	ldr	r1, [pc, #264]	; (800127c <LCD_enuHelp+0x274>)
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	440b      	add	r3, r1
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	d147      	bne.n	8001218 <LCD_enuHelp+0x210>
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
 8001188:	2304      	movs	r3, #4
 800118a:	73bb      	strb	r3, [r7, #14]
 800118c:	e040      	b.n	8001210 <LCD_enuHelp+0x208>
			{
				if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]<=15){
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	7bb9      	ldrb	r1, [r7, #14]
 8001192:	483a      	ldr	r0, [pc, #232]	; (800127c <LCD_enuHelp+0x274>)
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4403      	add	r3, r0
 800119e:	440b      	add	r3, r1
 80011a0:	3304      	adds	r3, #4
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d817      	bhi.n	80011d8 <LCD_enuHelp+0x1d0>
						MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 80011a8:	79fa      	ldrb	r2, [r7, #7]
 80011aa:	7bb9      	ldrb	r1, [r7, #14]
 80011ac:	4833      	ldr	r0, [pc, #204]	; (800127c <LCD_enuHelp+0x274>)
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4403      	add	r3, r0
 80011b8:	440b      	add	r3, r1
 80011ba:	3304      	adds	r3, #4
 80011bc:	7819      	ldrb	r1, [r3, #0]
 80011be:	79ba      	ldrb	r2, [r7, #6]
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	fa42 f303 	asr.w	r3, r2, r3
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	461a      	mov	r2, r3
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fd3b 	bl	8000c4c <MGPIO_u8SetPinVal>
 80011d6:	e018      	b.n	800120a <LCD_enuHelp+0x202>
					}
				else{
						MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]-16, GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 80011d8:	79fa      	ldrb	r2, [r7, #7]
 80011da:	7bb9      	ldrb	r1, [r7, #14]
 80011dc:	4827      	ldr	r0, [pc, #156]	; (800127c <LCD_enuHelp+0x274>)
 80011de:	4613      	mov	r3, r2
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4403      	add	r3, r0
 80011e8:	440b      	add	r3, r1
 80011ea:	3304      	adds	r3, #4
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	3b10      	subs	r3, #16
 80011f0:	b2d9      	uxtb	r1, r3
 80011f2:	79ba      	ldrb	r2, [r7, #6]
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	fa42 f303 	asr.w	r3, r2, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	461a      	mov	r2, r3
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fd21 	bl	8000c4c <MGPIO_u8SetPinVal>
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	3301      	adds	r3, #1
 800120e:	73bb      	strb	r3, [r7, #14]
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	2b07      	cmp	r3, #7
 8001214:	d9bb      	bls.n	800118e <LCD_enuHelp+0x186>
 8001216:	e001      	b.n	800121c <LCD_enuHelp+0x214>
			}

		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ; 
 8001218:	2304      	movs	r3, #4
 800121a:	73fb      	strb	r3, [r7, #15]
		}

			if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch<=15){
 800121c:	79fa      	ldrb	r2, [r7, #7]
 800121e:	4917      	ldr	r1, [pc, #92]	; (800127c <LCD_enuHelp+0x274>)
 8001220:	4613      	mov	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4413      	add	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3303      	adds	r3, #3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	d80e      	bhi.n	8001250 <LCD_enuHelp+0x248>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, GPIO_LOW);
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	4911      	ldr	r1, [pc, #68]	; (800127c <LCD_enuHelp+0x274>)
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	440b      	add	r3, r1
 8001240:	3303      	adds	r3, #3
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	4619      	mov	r1, r3
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fcff 	bl	8000c4c <MGPIO_u8SetPinVal>
 800124e:	e00f      	b.n	8001270 <LCD_enuHelp+0x268>
		}
		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch-16, GPIO_LOW );
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	490a      	ldr	r1, [pc, #40]	; (800127c <LCD_enuHelp+0x274>)
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	440b      	add	r3, r1
 800125e:	3303      	adds	r3, #3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	3b10      	subs	r3, #16
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2200      	movs	r2, #0
 8001268:	4619      	mov	r1, r3
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff fcee 	bl	8000c4c <MGPIO_u8SetPinVal>
		}
	
	return enuErrorStateLoc ;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000000 	.word	0x20000000

08001280 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	460a      	mov	r2, r1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	4613      	mov	r3, r2
 800128e:	71bb      	strb	r3, [r7, #6]

	tenuErrorStatus enuErrorStateLoc = E_OK ;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]
	if (u8LcdNumCpy < LCD_MAX_NUM )
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d132      	bne.n	8001300 <LCD_enuWriteCmd+0x80>

	{

		if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect<=15){
 800129a:	79fa      	ldrb	r2, [r7, #7]
 800129c:	491c      	ldr	r1, [pc, #112]	; (8001310 <LCD_enuWriteCmd+0x90>)
 800129e:	4613      	mov	r3, r2
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	4413      	add	r3, r2
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	440b      	add	r3, r1
 80012a8:	3301      	adds	r3, #1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b0f      	cmp	r3, #15
 80012ae:	d80e      	bhi.n	80012ce <LCD_enuWriteCmd+0x4e>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect, GPIO_LOW );
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4917      	ldr	r1, [pc, #92]	; (8001310 <LCD_enuWriteCmd+0x90>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3301      	adds	r3, #1
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2200      	movs	r2, #0
 80012c4:	4619      	mov	r1, r3
 80012c6:	2000      	movs	r0, #0
 80012c8:	f7ff fcc0 	bl	8000c4c <MGPIO_u8SetPinVal>
 80012cc:	e00f      	b.n	80012ee <LCD_enuWriteCmd+0x6e>
		}
		else {

			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect-16, GPIO_LOW );
 80012ce:	79fa      	ldrb	r2, [r7, #7]
 80012d0:	490f      	ldr	r1, [pc, #60]	; (8001310 <LCD_enuWriteCmd+0x90>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3301      	adds	r3, #1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b10      	subs	r3, #16
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fcaf 	bl	8000c4c <MGPIO_u8SetPinVal>

		}

		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
 80012ee:	79ba      	ldrb	r2, [r7, #6]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe87 	bl	8001008 <LCD_enuHelp>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e001      	b.n	8001304 <LCD_enuWriteCmd+0x84>
	}
	else
	{

		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
 8001300:	2302      	movs	r3, #2
 8001302:	73fb      	strb	r3, [r7, #15]
	}


	return enuErrorStateLoc ;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <LCD_enuWriteChar>:


tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	460a      	mov	r2, r1
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	71bb      	strb	r3, [r7, #6]
	tenuErrorStatus enuErrorStateLoc = E_OK ;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]


	if (u8LcdNumCpy < LCD_MAX_NUM )
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d130      	bne.n	8001390 <LCD_enuWriteChar+0x7c>
	{
		if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect<=15){
 800132e:	79fa      	ldrb	r2, [r7, #7]
 8001330:	491b      	ldr	r1, [pc, #108]	; (80013a0 <LCD_enuWriteChar+0x8c>)
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	440b      	add	r3, r1
 800133c:	3301      	adds	r3, #1
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b0f      	cmp	r3, #15
 8001342:	d80e      	bhi.n	8001362 <LCD_enuWriteChar+0x4e>

			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect, GPIO_HIGH );
 8001344:	79fa      	ldrb	r2, [r7, #7]
 8001346:	4916      	ldr	r1, [pc, #88]	; (80013a0 <LCD_enuWriteChar+0x8c>)
 8001348:	4613      	mov	r3, r2
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	3301      	adds	r3, #1
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	4619      	mov	r1, r3
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc76 	bl	8000c4c <MGPIO_u8SetPinVal>
 8001360:	e00f      	b.n	8001382 <LCD_enuWriteChar+0x6e>
		}

		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect-16, GPIO_HIGH );
 8001362:	79fa      	ldrb	r2, [r7, #7]
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <LCD_enuWriteChar+0x8c>)
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	440b      	add	r3, r1
 8001370:	3301      	adds	r3, #1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	3b10      	subs	r3, #16
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2201      	movs	r2, #1
 800137a:	4619      	mov	r1, r3
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc65 	bl	8000c4c <MGPIO_u8SetPinVal>
		}
		LCD_enuHelp(u8LcdNumCpy, u8DataCpy);
 8001382:	79ba      	ldrb	r2, [r7, #6]
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe3d 	bl	8001008 <LCD_enuHelp>
 800138e:	e001      	b.n	8001394 <LCD_enuWriteChar+0x80>

	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
 8001390:	2302      	movs	r3, #2
 8001392:	73fb      	strb	r3, [r7, #15]
	}

	return enuErrorStateLoc ;
 8001394:	7bfb      	ldrb	r3, [r7, #15]

}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <LCD_enuWritenumber>:
}



void LCD_enuWritenumber(uint8 u8LcdNumCpy, float32 pu8DataCpy)
{
 80013a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013a8:	b08d      	sub	sp, #52	; 0x34
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	ed87 0a00 	vstr	s0, [r7]
 80013b2:	71fb      	strb	r3, [r7, #7]
 80013b4:	466b      	mov	r3, sp
 80013b6:	461e      	mov	r6, r3
    // Check if the number is negative
    int isNegative = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (pu8DataCpy < 0)
 80013bc:	edd7 7a00 	vldr	s15, [r7]
 80013c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c8:	d507      	bpl.n	80013da <LCD_enuWritenumber+0x36>
    {
        isNegative = 1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pu8DataCpy = -pu8DataCpy; // Use the absolute value
 80013ce:	edd7 7a00 	vldr	s15, [r7]
 80013d2:	eef1 7a67 	vneg.f32	s15, s15
 80013d6:	edc7 7a00 	vstr	s15, [r7]
    }

    // Count digits in the integer part of the number
    int integerPart = (int)pu8DataCpy;
 80013da:	edd7 7a00 	vldr	s15, [r7]
 80013de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e2:	ee17 3a90 	vmov	r3, s15
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
    int digitCount = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (integerPart / 10 != 0)
 80013ec:	e00a      	b.n	8001404 <LCD_enuWritenumber+0x60>
    {
        digitCount++;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	3301      	adds	r3, #1
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
        integerPart /= 10;
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	4a52      	ldr	r2, [pc, #328]	; (8001540 <LCD_enuWritenumber+0x19c>)
 80013f8:	fb82 1203 	smull	r1, r2, r2, r3
 80013fc:	1092      	asrs	r2, r2, #2
 80013fe:	17db      	asrs	r3, r3, #31
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    while (integerPart / 10 != 0)
 8001404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001406:	3309      	adds	r3, #9
 8001408:	2b12      	cmp	r3, #18
 800140a:	d8f0      	bhi.n	80013ee <LCD_enuWritenumber+0x4a>
    }

    // Add one more for the negative sign if applicable
    if (isNegative)
 800140c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <LCD_enuWritenumber+0x74>
    {
        digitCount++;
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Declare a character array to store the result
    char arr[digitCount];
 8001418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800141a:	1e4b      	subs	r3, r1, #1
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	460a      	mov	r2, r1
 8001420:	2300      	movs	r3, #0
 8001422:	4690      	mov	r8, r2
 8001424:	4699      	mov	r9, r3
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800143a:	460a      	mov	r2, r1
 800143c:	2300      	movs	r3, #0
 800143e:	4614      	mov	r4, r2
 8001440:	461d      	mov	r5, r3
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	00eb      	lsls	r3, r5, #3
 800144c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001450:	00e2      	lsls	r2, r4, #3
 8001452:	460b      	mov	r3, r1
 8001454:	3307      	adds	r3, #7
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	ebad 0d03 	sub.w	sp, sp, r3
 800145e:	466b      	mov	r3, sp
 8001460:	3300      	adds	r3, #0
 8001462:	613b      	str	r3, [r7, #16]

    // Separate integer into digits and store them in the array
    int index = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    do
    {
        arr[index++] = (char)((int)pu8DataCpy % 10 + '0');
 8001468:	edd7 7a00 	vldr	s15, [r7]
 800146c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001470:	ee17 1a90 	vmov	r1, s15
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <LCD_enuWritenumber+0x19c>)
 8001476:	fb83 2301 	smull	r2, r3, r3, r1
 800147a:	109a      	asrs	r2, r3, #2
 800147c:	17cb      	asrs	r3, r1, #31
 800147e:	1ad2      	subs	r2, r2, r3
 8001480:	4613      	mov	r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	1aca      	subs	r2, r1, r3
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	6a3b      	ldr	r3, [r7, #32]
 800148e:	1c59      	adds	r1, r3, #1
 8001490:	6239      	str	r1, [r7, #32]
 8001492:	3230      	adds	r2, #48	; 0x30
 8001494:	b2d1      	uxtb	r1, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	54d1      	strb	r1, [r2, r3]
        pu8DataCpy /= 10;
 800149a:	ed97 7a00 	vldr	s14, [r7]
 800149e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014a6:	edc7 7a00 	vstr	s15, [r7]
    } while ((int)pu8DataCpy != 0);
 80014aa:	edd7 7a00 	vldr	s15, [r7]
 80014ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b2:	ee17 3a90 	vmov	r3, s15
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1d6      	bne.n	8001468 <LCD_enuWritenumber+0xc4>

    // Add the negative sign if applicable
    if (isNegative)
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <LCD_enuWritenumber+0x126>
    {
        arr[index] = '-';
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	4413      	add	r3, r2
 80014c6:	222d      	movs	r2, #45	; 0x2d
 80014c8:	701a      	strb	r2, [r3, #0]
    }

    // Reverse the array
    int i, j;
    char temp;
    for (i = 0, j = index; i < j; i++, j--)
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	e018      	b.n	8001506 <LCD_enuWritenumber+0x162>
    {
        temp = arr[i];
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	4413      	add	r3, r2
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	73fb      	strb	r3, [r7, #15]
        arr[i] = arr[j];
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	4413      	add	r3, r2
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
        arr[j] = temp;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4413      	add	r3, r2
 80014f6:	7bfa      	ldrb	r2, [r7, #15]
 80014f8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = index; i < j; i++, j--)
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3301      	adds	r3, #1
 80014fe:	61fb      	str	r3, [r7, #28]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	3b01      	subs	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbe2      	blt.n	80014d4 <LCD_enuWritenumber+0x130>
    }

    // Display the characters on the LCD
    for (i = 0; i <= index; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	e00b      	b.n	800152c <LCD_enuWritenumber+0x188>
    {
        LCD_enuWriteChar(u8LcdNumCpy, arr[i]);
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	781a      	ldrb	r2, [r3, #0]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4611      	mov	r1, r2
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fef7 	bl	8001314 <LCD_enuWriteChar>
    for (i = 0; i <= index; i++)
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3301      	adds	r3, #1
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	6a3b      	ldr	r3, [r7, #32]
 8001530:	429a      	cmp	r2, r3
 8001532:	ddef      	ble.n	8001514 <LCD_enuWritenumber+0x170>
 8001534:	46b5      	mov	sp, r6
    }
}
 8001536:	bf00      	nop
 8001538:	3734      	adds	r7, #52	; 0x34
 800153a:	46bd      	mov	sp, r7
 800153c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001540:	66666667 	.word	0x66666667
 8001544:	00000000 	.word	0x00000000

08001548 <ADC_to_Temperature>:
#include "LM35_PRIV.h"
#include "LM35_CONFG.h"
#include "LM35.h"


float32 ADC_to_Temperature(uint16 adcValue) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	80fb      	strh	r3, [r7, #6]
    // and LM35 sensitivity is 10 mV/°C
//    float32 voltage = (adcValue / (STEPS*1.0)) * Vref; // Convert ADC reading to voltage
//    float32 temperature = (voltage - 0.5) * 100.0; // Convert voltage to temperature in Celsius
    float32 output_temp=((float) adcValue /STEPS) * Vref;
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800155c:	eddf 6a12 	vldr	s13, [pc, #72]	; 80015a8 <ADC_to_Temperature+0x60>
 8001560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001564:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001568:	ee67 7a87 	vmul.f32	s15, s15, s14
 800156c:	edc7 7a03 	vstr	s15, [r7, #12]
	output_temp=output_temp/0.01;
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7fe ffe9 	bl	8000548 <__aeabi_f2d>
 8001576:	a30a      	add	r3, pc, #40	; (adr r3, 80015a0 <ADC_to_Temperature+0x58>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7ff f966 	bl	800084c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa48 	bl	8000a1c <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	60fb      	str	r3, [r7, #12]
    return output_temp;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	ee07 3a90 	vmov	s15, r3
}
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	47ae147b 	.word	0x47ae147b
 80015a4:	3f847ae1 	.word	0x3f847ae1
 80015a8:	45800000 	.word	0x45800000

080015ac <Init_Rcc>:


#include  "RCC_cfg.h"
#include  "RCC.h"

void Init_Rcc(void){
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
 #if RCC_SYSCLK == RCC_HSI
    SET_BIT(RCC->RCC_CR , RCC_HSI);
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <Init_Rcc+0x5c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <Init_Rcc+0x5c>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]
    while (GET_BIT(RCC->RCC_CR , 1)!=1);
 80015bc:	bf00      	nop
 80015be:	4b12      	ldr	r3, [pc, #72]	; (8001608 <Init_Rcc+0x5c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f9      	beq.n	80015be <Init_Rcc+0x12>
    CLR_BIT(RCC->RCC_CFGR,0);
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <Init_Rcc+0x5c>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <Init_Rcc+0x5c>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6093      	str	r3, [r2, #8]
    CLR_BIT(RCC->RCC_CFGR,1);
 80015d6:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <Init_Rcc+0x5c>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <Init_Rcc+0x5c>)
 80015dc:	f023 0302 	bic.w	r3, r3, #2
 80015e0:	6093      	str	r3, [r2, #8]
    while ((GET_BIT(RCC->RCC_CR , 2)!=0) || (GET_BIT(RCC->RCC_CR , 3)!=0) );
 80015e2:	bf00      	nop
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <Init_Rcc+0x5c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <Init_Rcc+0x38>
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <Init_Rcc+0x5c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f3      	bne.n	80015e4 <Init_Rcc+0x38>
		CLR_BIT(RCC->RCC_CFGR , 0);
		while(RCC->RCC_CFGR&&0x0c != 0x10);	
 #else
  #error " not allowed RCC_SYSCLK"
 #endif
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40023800 	.word	0x40023800

0800160c <Enable_peripheral>:

void Enable_peripheral(uint8 RCC_PERIPHERAL, uint8 RCC_BUS) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	460a      	mov	r2, r1
 8001616:	71fb      	strb	r3, [r7, #7]
 8001618:	4613      	mov	r3, r2
 800161a:	71bb      	strb	r3, [r7, #6]
    switch (RCC_BUS) {  // Fixed to use RCC_BUS instead of RCC_PERIPHERAL
 800161c:	79bb      	ldrb	r3, [r7, #6]
 800161e:	2b03      	cmp	r3, #3
 8001620:	d836      	bhi.n	8001690 <Enable_peripheral+0x84>
 8001622:	a201      	add	r2, pc, #4	; (adr r2, 8001628 <Enable_peripheral+0x1c>)
 8001624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001628:	08001639 	.word	0x08001639
 800162c:	0800164f 	.word	0x0800164f
 8001630:	08001665 	.word	0x08001665
 8001634:	0800167b 	.word	0x0800167b
        case RCC_AHB1:
            SET_BIT(RCC->RCC_AHB1ENR, RCC_PERIPHERAL);
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <Enable_peripheral+0x94>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	2101      	movs	r1, #1
 8001640:	fa01 f202 	lsl.w	r2, r1, r2
 8001644:	4611      	mov	r1, r2
 8001646:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <Enable_peripheral+0x94>)
 8001648:	430b      	orrs	r3, r1
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 800164c:	e024      	b.n	8001698 <Enable_peripheral+0x8c>
        case RCC_AHB2:
            SET_BIT(RCC->RCC_AHB2ENR, RCC_PERIPHERAL);
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <Enable_peripheral+0x94>)
 8001650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001652:	79fa      	ldrb	r2, [r7, #7]
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	4611      	mov	r1, r2
 800165c:	4a10      	ldr	r2, [pc, #64]	; (80016a0 <Enable_peripheral+0x94>)
 800165e:	430b      	orrs	r3, r1
 8001660:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 8001662:	e019      	b.n	8001698 <Enable_peripheral+0x8c>
        case RCC_APB1:
            SET_BIT(RCC->RCC_APB1ENR, RCC_PERIPHERAL);
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <Enable_peripheral+0x94>)
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	79fa      	ldrb	r2, [r7, #7]
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	4611      	mov	r1, r2
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <Enable_peripheral+0x94>)
 8001674:	430b      	orrs	r3, r1
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 8001678:	e00e      	b.n	8001698 <Enable_peripheral+0x8c>
        case RCC_APB2:
            SET_BIT(RCC->RCC_APB2ENR, RCC_PERIPHERAL);
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <Enable_peripheral+0x94>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	79fa      	ldrb	r2, [r7, #7]
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	4611      	mov	r1, r2
 8001688:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <Enable_peripheral+0x94>)
 800168a:	430b      	orrs	r3, r1
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 800168e:	e003      	b.n	8001698 <Enable_peripheral+0x8c>
        default:
		printf("invaild bus");
 8001690:	4804      	ldr	r0, [pc, #16]	; (80016a4 <Enable_peripheral+0x98>)
 8001692:	f000 fa87 	bl	8001ba4 <iprintf>


            break;
 8001696:	bf00      	nop
    }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	080028a4 	.word	0x080028a4

080016a8 <MSTK_voidInit>:
#include  "SYSTICK.h"
#include  "SYSTICK_cfg.h"

static void(*Global_Systick_PTR)(void)=NULL_PTR;

void MSTK_voidInit(void){
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
    if (CLK_SCR== AHB_DIV_8_CLK_CS){
        CLR_BIT(SYSTICK->STK_CTRL,2); //0.5 Ms
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <MSTK_voidInit+0x1c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <MSTK_voidInit+0x1c>)
 80016b2:	f023 0304 	bic.w	r3, r3, #4
 80016b6:	6013      	str	r3, [r2, #0]
    }
    else{
        SET_BIT(SYSTICK->STK_CTRL,2); //0.0625Ms
    }
    
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e010 	.word	0xe000e010

080016c8 <MSTK_voidIntState>:

void MSTK_voidIntState(void){
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
SET_BIT(SYSTICK->STK_CTRL,1);
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <MSTK_voidIntState+0x1c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <MSTK_voidIntState+0x1c>)
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <MSTK_voidStart>:

void MSTK_voidStart(uint32 Copy_u8PreloadValue){
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
    SYSTICK->STK_LOAD= Copy_u8PreloadValue;
 80016f0:	4a08      	ldr	r2, [pc, #32]	; (8001714 <MSTK_voidStart+0x2c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6053      	str	r3, [r2, #4]
    SYSTICK->STK_VAL=0;
 80016f6:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MSTK_voidStart+0x2c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
    SET_BIT(SYSTICK->STK_CTRL,0);
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <MSTK_voidStart+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <MSTK_voidStart+0x2c>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6013      	str	r3, [r2, #0]


}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000e010 	.word	0xe000e010

08001718 <MSTK_u8ReadFlag>:

uint8 MSTK_u8ReadFlag(void){
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
    return GET_BIT(SYSTICK->STK_CTRL,16);
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <MSTK_u8ReadFlag+0x1c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0c1b      	lsrs	r3, r3, #16
 8001722:	b2db      	uxtb	r3, r3
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	b2db      	uxtb	r3, r3
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000e010 	.word	0xe000e010

08001738 <MSTK_voidDelayMsec>:
    if( GET_BIT(temp_loc,1)==1){
        MSTK_voidIntState();
    }
}

void MSTK_voidDelayMsec(uint32 Copy_u8DelayMsec){
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
    uint32 temp_loc=SYSTICK->STK_CTRL;
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MSTK_voidDelayMsec+0x4c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
    CLR_BIT(SYSTICK->STK_CTRL,1);
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MSTK_voidDelayMsec+0x4c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <MSTK_voidDelayMsec+0x4c>)
 800174c:	f023 0302 	bic.w	r3, r3, #2
 8001750:	6013      	str	r3, [r2, #0]
    if (CLK_SCR== AHB_DIV_8_CLK_CS){
         MSTK_voidStart(Copy_u8DelayMsec*2000);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ffc3 	bl	80016e8 <MSTK_voidStart>
         while (MSTK_u8ReadFlag()==0);
 8001762:	bf00      	nop
 8001764:	f7ff ffd8 	bl	8001718 <MSTK_u8ReadFlag>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0fa      	beq.n	8001764 <MSTK_voidDelayMsec+0x2c>
    }
    else{
         MSTK_voidStart(Copy_u8DelayMsec*16000);
         while (MSTK_u8ReadFlag()==0);
    }
    if( GET_BIT(temp_loc,1)==1){
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MSTK_voidDelayMsec+0x44>
        MSTK_voidIntState();
 8001778:	f7ff ffa6 	bl	80016c8 <MSTK_voidIntState>
    }

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	e000e010 	.word	0xe000e010

08001788 <main>:
#include "LCD.h"
#include "ADC.h"
#include "LM35.h"


int main(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
	 Init_Rcc();
 800178e:	f7ff ff0d 	bl	80015ac <Init_Rcc>
	 Enable_peripheral(  RCC_AHB1ENR_GPIOA	,RCC_AHB1 );
 8001792:	2100      	movs	r1, #0
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ff39 	bl	800160c <Enable_peripheral>
	 ADC_Init() ;
 800179a:	f7ff f98f 	bl	8000abc <ADC_Init>
	 MSTK_voidInit();
 800179e:	f7ff ff83 	bl	80016a8 <MSTK_voidInit>
//	 MSTK_voidIntState();
	 int i;
	 for(i=1;i<=11;i++){
 80017a2:	2301      	movs	r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	e009      	b.n	80017bc <main+0x34>
		 MGPIO_vSetPinMode(GPIO_PORTA, i, GPIO_MODE_OUTPUT);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2201      	movs	r2, #1
 80017ae:	4619      	mov	r1, r3
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff f9d5 	bl	8000b60 <MGPIO_vSetPinMode>
	 for(i=1;i<=11;i++){
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3301      	adds	r3, #1
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b0b      	cmp	r3, #11
 80017c0:	ddf2      	ble.n	80017a8 <main+0x20>
	 }

	 LCD_voidInit();
 80017c2:	f7ff fab3 	bl	8000d2c <LCD_voidInit>
	 float32 tempr=0;
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	603b      	str	r3, [r7, #0]
    while (1)

    {


      	tempr = ADC_ReadChannel(0);
 80017cc:	2000      	movs	r0, #0
 80017ce:	f7ff f9a1 	bl	8000b14 <ADC_ReadChannel>
 80017d2:	ed87 0a00 	vstr	s0, [r7]
      	LCD_enuWritenumber(LCD_u8NUM_0,ADC_to_Temperature(tempr));
 80017d6:	edd7 7a00 	vldr	s15, [r7]
 80017da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017de:	ee17 3a90 	vmov	r3, s15
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff feaf 	bl	8001548 <ADC_to_Temperature>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	eeb0 0a67 	vmov.f32	s0, s15
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fdd6 	bl	80013a4 <LCD_enuWritenumber>
      	MSTK_voidDelayMsec(500);
 80017f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80017fc:	f7ff ff9c 	bl	8001738 <MSTK_voidDelayMsec>
      	LCD_enuWriteCmd (LCD_u8NUM_0 ,LCD_u8CLEAR);
 8001800:	2101      	movs	r1, #1
 8001802:	2000      	movs	r0, #0
 8001804:	f7ff fd3c 	bl	8001280 <LCD_enuWriteCmd>
      	tempr = ADC_ReadChannel(0);
 8001808:	e7e0      	b.n	80017cc <main+0x44>

0800180a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800180a:	b480      	push	{r7}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180e:	e7fe      	b.n	800180e <NMI_Handler+0x4>

08001810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001814:	e7fe      	b.n	8001814 <HardFault_Handler+0x4>

08001816 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800181a:	e7fe      	b.n	800181a <MemManage_Handler+0x4>

0800181c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001820:	e7fe      	b.n	8001820 <BusFault_Handler+0x4>

08001822 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <UsageFault_Handler+0x4>

08001828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001856:	f000 f8e1 	bl	8001a1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e00a      	b.n	8001886 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001870:	f3af 8000 	nop.w
 8001874:	4601      	mov	r1, r0
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	60ba      	str	r2, [r7, #8]
 800187c:	b2ca      	uxtb	r2, r1
 800187e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	3301      	adds	r3, #1
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	dbf0      	blt.n	8001870 <_read+0x12>
  }

  return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	e009      	b.n	80018be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	60ba      	str	r2, [r7, #8]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf1      	blt.n	80018aa <_write+0x12>
  }
  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_close>:

int _close(int file)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018dc:	4618      	mov	r0, r3
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f8:	605a      	str	r2, [r3, #4]
  return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <_isatty>:

int _isatty(int file)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001910:	2301      	movs	r3, #1
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001940:	4a14      	ldr	r2, [pc, #80]	; (8001994 <_sbrk+0x5c>)
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <_sbrk+0x60>)
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <_sbrk+0x64>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d102      	bne.n	800195a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x64>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <_sbrk+0x68>)
 8001958:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <_sbrk+0x64>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4413      	add	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	429a      	cmp	r2, r3
 8001966:	d207      	bcs.n	8001978 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001968:	f000 f9c0 	bl	8001cec <__errno>
 800196c:	4603      	mov	r3, r0
 800196e:	220c      	movs	r2, #12
 8001970:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	e009      	b.n	800198c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001978:	4b08      	ldr	r3, [pc, #32]	; (800199c <_sbrk+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197e:	4b07      	ldr	r3, [pc, #28]	; (800199c <_sbrk+0x64>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	4a05      	ldr	r2, [pc, #20]	; (800199c <_sbrk+0x64>)
 8001988:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198a:	68fb      	ldr	r3, [r7, #12]
}
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20010000 	.word	0x20010000
 8001998:	00000400 	.word	0x00000400
 800199c:	20000088 	.word	0x20000088
 80019a0:	200001e0 	.word	0x200001e0

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <SystemInit+0x20>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a05      	ldr	r2, [pc, #20]	; (80019c4 <SystemInit+0x20>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ce:	490e      	ldr	r1, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d0:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e4:	4c0b      	ldr	r4, [pc, #44]	; (8001a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019f2:	f7ff ffd7 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f000 f97f 	bl	8001cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7ff fec5 	bl	8001788 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a0c:	08002900 	.word	0x08002900
  ldr r2, =_sbss
 8001a10:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a14:	200001dc 	.word	0x200001dc

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x20>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_IncTick+0x24>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <HAL_IncTick+0x24>)
 8001a2e:	6013      	str	r3, [r2, #0]
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000000c 	.word	0x2000000c
 8001a40:	2000008c 	.word	0x2000008c

08001a44 <std>:
 8001a44:	2300      	movs	r3, #0
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
 8001a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8001a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a52:	6083      	str	r3, [r0, #8]
 8001a54:	8181      	strh	r1, [r0, #12]
 8001a56:	6643      	str	r3, [r0, #100]	; 0x64
 8001a58:	81c2      	strh	r2, [r0, #14]
 8001a5a:	6183      	str	r3, [r0, #24]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	2208      	movs	r2, #8
 8001a60:	305c      	adds	r0, #92	; 0x5c
 8001a62:	f000 f8f4 	bl	8001c4e <memset>
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <std+0x38>)
 8001a68:	6263      	str	r3, [r4, #36]	; 0x24
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <std+0x3c>)
 8001a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <std+0x40>)
 8001a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a72:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <std+0x44>)
 8001a74:	6224      	str	r4, [r4, #32]
 8001a76:	6323      	str	r3, [r4, #48]	; 0x30
 8001a78:	bd10      	pop	{r4, pc}
 8001a7a:	bf00      	nop
 8001a7c:	08001bc9 	.word	0x08001bc9
 8001a80:	08001beb 	.word	0x08001beb
 8001a84:	08001c23 	.word	0x08001c23
 8001a88:	08001c47 	.word	0x08001c47

08001a8c <stdio_exit_handler>:
 8001a8c:	4a02      	ldr	r2, [pc, #8]	; (8001a98 <stdio_exit_handler+0xc>)
 8001a8e:	4903      	ldr	r1, [pc, #12]	; (8001a9c <stdio_exit_handler+0x10>)
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <stdio_exit_handler+0x14>)
 8001a92:	f000 b869 	b.w	8001b68 <_fwalk_sglue>
 8001a96:	bf00      	nop
 8001a98:	20000010 	.word	0x20000010
 8001a9c:	080025e9 	.word	0x080025e9
 8001aa0:	2000001c 	.word	0x2000001c

08001aa4 <cleanup_stdio>:
 8001aa4:	6841      	ldr	r1, [r0, #4]
 8001aa6:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <cleanup_stdio+0x34>)
 8001aa8:	4299      	cmp	r1, r3
 8001aaa:	b510      	push	{r4, lr}
 8001aac:	4604      	mov	r4, r0
 8001aae:	d001      	beq.n	8001ab4 <cleanup_stdio+0x10>
 8001ab0:	f000 fd9a 	bl	80025e8 <_fflush_r>
 8001ab4:	68a1      	ldr	r1, [r4, #8]
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <cleanup_stdio+0x38>)
 8001ab8:	4299      	cmp	r1, r3
 8001aba:	d002      	beq.n	8001ac2 <cleanup_stdio+0x1e>
 8001abc:	4620      	mov	r0, r4
 8001abe:	f000 fd93 	bl	80025e8 <_fflush_r>
 8001ac2:	68e1      	ldr	r1, [r4, #12]
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <cleanup_stdio+0x3c>)
 8001ac6:	4299      	cmp	r1, r3
 8001ac8:	d004      	beq.n	8001ad4 <cleanup_stdio+0x30>
 8001aca:	4620      	mov	r0, r4
 8001acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ad0:	f000 bd8a 	b.w	80025e8 <_fflush_r>
 8001ad4:	bd10      	pop	{r4, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000090 	.word	0x20000090
 8001adc:	200000f8 	.word	0x200000f8
 8001ae0:	20000160 	.word	0x20000160

08001ae4 <global_stdio_init.part.0>:
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <global_stdio_init.part.0+0x30>)
 8001ae8:	4c0b      	ldr	r4, [pc, #44]	; (8001b18 <global_stdio_init.part.0+0x34>)
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <global_stdio_init.part.0+0x38>)
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4620      	mov	r0, r4
 8001af0:	2200      	movs	r2, #0
 8001af2:	2104      	movs	r1, #4
 8001af4:	f7ff ffa6 	bl	8001a44 <std>
 8001af8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001afc:	2201      	movs	r2, #1
 8001afe:	2109      	movs	r1, #9
 8001b00:	f7ff ffa0 	bl	8001a44 <std>
 8001b04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001b08:	2202      	movs	r2, #2
 8001b0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b0e:	2112      	movs	r1, #18
 8001b10:	f7ff bf98 	b.w	8001a44 <std>
 8001b14:	200001c8 	.word	0x200001c8
 8001b18:	20000090 	.word	0x20000090
 8001b1c:	08001a8d 	.word	0x08001a8d

08001b20 <__sfp_lock_acquire>:
 8001b20:	4801      	ldr	r0, [pc, #4]	; (8001b28 <__sfp_lock_acquire+0x8>)
 8001b22:	f000 b90d 	b.w	8001d40 <__retarget_lock_acquire_recursive>
 8001b26:	bf00      	nop
 8001b28:	200001d1 	.word	0x200001d1

08001b2c <__sfp_lock_release>:
 8001b2c:	4801      	ldr	r0, [pc, #4]	; (8001b34 <__sfp_lock_release+0x8>)
 8001b2e:	f000 b908 	b.w	8001d42 <__retarget_lock_release_recursive>
 8001b32:	bf00      	nop
 8001b34:	200001d1 	.word	0x200001d1

08001b38 <__sinit>:
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	f7ff fff0 	bl	8001b20 <__sfp_lock_acquire>
 8001b40:	6a23      	ldr	r3, [r4, #32]
 8001b42:	b11b      	cbz	r3, 8001b4c <__sinit+0x14>
 8001b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b48:	f7ff bff0 	b.w	8001b2c <__sfp_lock_release>
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__sinit+0x28>)
 8001b4e:	6223      	str	r3, [r4, #32]
 8001b50:	4b04      	ldr	r3, [pc, #16]	; (8001b64 <__sinit+0x2c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f5      	bne.n	8001b44 <__sinit+0xc>
 8001b58:	f7ff ffc4 	bl	8001ae4 <global_stdio_init.part.0>
 8001b5c:	e7f2      	b.n	8001b44 <__sinit+0xc>
 8001b5e:	bf00      	nop
 8001b60:	08001aa5 	.word	0x08001aa5
 8001b64:	200001c8 	.word	0x200001c8

08001b68 <_fwalk_sglue>:
 8001b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b6c:	4607      	mov	r7, r0
 8001b6e:	4688      	mov	r8, r1
 8001b70:	4614      	mov	r4, r2
 8001b72:	2600      	movs	r6, #0
 8001b74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b78:	f1b9 0901 	subs.w	r9, r9, #1
 8001b7c:	d505      	bpl.n	8001b8a <_fwalk_sglue+0x22>
 8001b7e:	6824      	ldr	r4, [r4, #0]
 8001b80:	2c00      	cmp	r4, #0
 8001b82:	d1f7      	bne.n	8001b74 <_fwalk_sglue+0xc>
 8001b84:	4630      	mov	r0, r6
 8001b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b8a:	89ab      	ldrh	r3, [r5, #12]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d907      	bls.n	8001ba0 <_fwalk_sglue+0x38>
 8001b90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001b94:	3301      	adds	r3, #1
 8001b96:	d003      	beq.n	8001ba0 <_fwalk_sglue+0x38>
 8001b98:	4629      	mov	r1, r5
 8001b9a:	4638      	mov	r0, r7
 8001b9c:	47c0      	blx	r8
 8001b9e:	4306      	orrs	r6, r0
 8001ba0:	3568      	adds	r5, #104	; 0x68
 8001ba2:	e7e9      	b.n	8001b78 <_fwalk_sglue+0x10>

08001ba4 <iprintf>:
 8001ba4:	b40f      	push	{r0, r1, r2, r3}
 8001ba6:	b507      	push	{r0, r1, r2, lr}
 8001ba8:	4906      	ldr	r1, [pc, #24]	; (8001bc4 <iprintf+0x20>)
 8001baa:	ab04      	add	r3, sp, #16
 8001bac:	6808      	ldr	r0, [r1, #0]
 8001bae:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bb2:	6881      	ldr	r1, [r0, #8]
 8001bb4:	9301      	str	r3, [sp, #4]
 8001bb6:	f000 f9e7 	bl	8001f88 <_vfiprintf_r>
 8001bba:	b003      	add	sp, #12
 8001bbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bc0:	b004      	add	sp, #16
 8001bc2:	4770      	bx	lr
 8001bc4:	20000068 	.word	0x20000068

08001bc8 <__sread>:
 8001bc8:	b510      	push	{r4, lr}
 8001bca:	460c      	mov	r4, r1
 8001bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bd0:	f000 f868 	bl	8001ca4 <_read_r>
 8001bd4:	2800      	cmp	r0, #0
 8001bd6:	bfab      	itete	ge
 8001bd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bda:	89a3      	ldrhlt	r3, [r4, #12]
 8001bdc:	181b      	addge	r3, r3, r0
 8001bde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001be2:	bfac      	ite	ge
 8001be4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001be6:	81a3      	strhlt	r3, [r4, #12]
 8001be8:	bd10      	pop	{r4, pc}

08001bea <__swrite>:
 8001bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bee:	461f      	mov	r7, r3
 8001bf0:	898b      	ldrh	r3, [r1, #12]
 8001bf2:	05db      	lsls	r3, r3, #23
 8001bf4:	4605      	mov	r5, r0
 8001bf6:	460c      	mov	r4, r1
 8001bf8:	4616      	mov	r6, r2
 8001bfa:	d505      	bpl.n	8001c08 <__swrite+0x1e>
 8001bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c00:	2302      	movs	r3, #2
 8001c02:	2200      	movs	r2, #0
 8001c04:	f000 f83c 	bl	8001c80 <_lseek_r>
 8001c08:	89a3      	ldrh	r3, [r4, #12]
 8001c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c12:	81a3      	strh	r3, [r4, #12]
 8001c14:	4632      	mov	r2, r6
 8001c16:	463b      	mov	r3, r7
 8001c18:	4628      	mov	r0, r5
 8001c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1e:	f000 b853 	b.w	8001cc8 <_write_r>

08001c22 <__sseek>:
 8001c22:	b510      	push	{r4, lr}
 8001c24:	460c      	mov	r4, r1
 8001c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c2a:	f000 f829 	bl	8001c80 <_lseek_r>
 8001c2e:	1c43      	adds	r3, r0, #1
 8001c30:	89a3      	ldrh	r3, [r4, #12]
 8001c32:	bf15      	itete	ne
 8001c34:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c3e:	81a3      	strheq	r3, [r4, #12]
 8001c40:	bf18      	it	ne
 8001c42:	81a3      	strhne	r3, [r4, #12]
 8001c44:	bd10      	pop	{r4, pc}

08001c46 <__sclose>:
 8001c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c4a:	f000 b809 	b.w	8001c60 <_close_r>

08001c4e <memset>:
 8001c4e:	4402      	add	r2, r0
 8001c50:	4603      	mov	r3, r0
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d100      	bne.n	8001c58 <memset+0xa>
 8001c56:	4770      	bx	lr
 8001c58:	f803 1b01 	strb.w	r1, [r3], #1
 8001c5c:	e7f9      	b.n	8001c52 <memset+0x4>
	...

08001c60 <_close_r>:
 8001c60:	b538      	push	{r3, r4, r5, lr}
 8001c62:	4d06      	ldr	r5, [pc, #24]	; (8001c7c <_close_r+0x1c>)
 8001c64:	2300      	movs	r3, #0
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	602b      	str	r3, [r5, #0]
 8001c6c:	f7ff fe30 	bl	80018d0 <_close>
 8001c70:	1c43      	adds	r3, r0, #1
 8001c72:	d102      	bne.n	8001c7a <_close_r+0x1a>
 8001c74:	682b      	ldr	r3, [r5, #0]
 8001c76:	b103      	cbz	r3, 8001c7a <_close_r+0x1a>
 8001c78:	6023      	str	r3, [r4, #0]
 8001c7a:	bd38      	pop	{r3, r4, r5, pc}
 8001c7c:	200001cc 	.word	0x200001cc

08001c80 <_lseek_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	4d07      	ldr	r5, [pc, #28]	; (8001ca0 <_lseek_r+0x20>)
 8001c84:	4604      	mov	r4, r0
 8001c86:	4608      	mov	r0, r1
 8001c88:	4611      	mov	r1, r2
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	602a      	str	r2, [r5, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f7ff fe45 	bl	800191e <_lseek>
 8001c94:	1c43      	adds	r3, r0, #1
 8001c96:	d102      	bne.n	8001c9e <_lseek_r+0x1e>
 8001c98:	682b      	ldr	r3, [r5, #0]
 8001c9a:	b103      	cbz	r3, 8001c9e <_lseek_r+0x1e>
 8001c9c:	6023      	str	r3, [r4, #0]
 8001c9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ca0:	200001cc 	.word	0x200001cc

08001ca4 <_read_r>:
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4d07      	ldr	r5, [pc, #28]	; (8001cc4 <_read_r+0x20>)
 8001ca8:	4604      	mov	r4, r0
 8001caa:	4608      	mov	r0, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	602a      	str	r2, [r5, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f7ff fdd3 	bl	800185e <_read>
 8001cb8:	1c43      	adds	r3, r0, #1
 8001cba:	d102      	bne.n	8001cc2 <_read_r+0x1e>
 8001cbc:	682b      	ldr	r3, [r5, #0]
 8001cbe:	b103      	cbz	r3, 8001cc2 <_read_r+0x1e>
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	bd38      	pop	{r3, r4, r5, pc}
 8001cc4:	200001cc 	.word	0x200001cc

08001cc8 <_write_r>:
 8001cc8:	b538      	push	{r3, r4, r5, lr}
 8001cca:	4d07      	ldr	r5, [pc, #28]	; (8001ce8 <_write_r+0x20>)
 8001ccc:	4604      	mov	r4, r0
 8001cce:	4608      	mov	r0, r1
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	602a      	str	r2, [r5, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f7ff fdde 	bl	8001898 <_write>
 8001cdc:	1c43      	adds	r3, r0, #1
 8001cde:	d102      	bne.n	8001ce6 <_write_r+0x1e>
 8001ce0:	682b      	ldr	r3, [r5, #0]
 8001ce2:	b103      	cbz	r3, 8001ce6 <_write_r+0x1e>
 8001ce4:	6023      	str	r3, [r4, #0]
 8001ce6:	bd38      	pop	{r3, r4, r5, pc}
 8001ce8:	200001cc 	.word	0x200001cc

08001cec <__errno>:
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <__errno+0x8>)
 8001cee:	6818      	ldr	r0, [r3, #0]
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	20000068 	.word	0x20000068

08001cf8 <__libc_init_array>:
 8001cf8:	b570      	push	{r4, r5, r6, lr}
 8001cfa:	4d0d      	ldr	r5, [pc, #52]	; (8001d30 <__libc_init_array+0x38>)
 8001cfc:	4c0d      	ldr	r4, [pc, #52]	; (8001d34 <__libc_init_array+0x3c>)
 8001cfe:	1b64      	subs	r4, r4, r5
 8001d00:	10a4      	asrs	r4, r4, #2
 8001d02:	2600      	movs	r6, #0
 8001d04:	42a6      	cmp	r6, r4
 8001d06:	d109      	bne.n	8001d1c <__libc_init_array+0x24>
 8001d08:	4d0b      	ldr	r5, [pc, #44]	; (8001d38 <__libc_init_array+0x40>)
 8001d0a:	4c0c      	ldr	r4, [pc, #48]	; (8001d3c <__libc_init_array+0x44>)
 8001d0c:	f000 fdbe 	bl	800288c <_init>
 8001d10:	1b64      	subs	r4, r4, r5
 8001d12:	10a4      	asrs	r4, r4, #2
 8001d14:	2600      	movs	r6, #0
 8001d16:	42a6      	cmp	r6, r4
 8001d18:	d105      	bne.n	8001d26 <__libc_init_array+0x2e>
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
 8001d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d20:	4798      	blx	r3
 8001d22:	3601      	adds	r6, #1
 8001d24:	e7ee      	b.n	8001d04 <__libc_init_array+0xc>
 8001d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d2a:	4798      	blx	r3
 8001d2c:	3601      	adds	r6, #1
 8001d2e:	e7f2      	b.n	8001d16 <__libc_init_array+0x1e>
 8001d30:	080028f8 	.word	0x080028f8
 8001d34:	080028f8 	.word	0x080028f8
 8001d38:	080028f8 	.word	0x080028f8
 8001d3c:	080028fc 	.word	0x080028fc

08001d40 <__retarget_lock_acquire_recursive>:
 8001d40:	4770      	bx	lr

08001d42 <__retarget_lock_release_recursive>:
 8001d42:	4770      	bx	lr

08001d44 <_free_r>:
 8001d44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d46:	2900      	cmp	r1, #0
 8001d48:	d044      	beq.n	8001dd4 <_free_r+0x90>
 8001d4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d4e:	9001      	str	r0, [sp, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f1a1 0404 	sub.w	r4, r1, #4
 8001d56:	bfb8      	it	lt
 8001d58:	18e4      	addlt	r4, r4, r3
 8001d5a:	f000 f8df 	bl	8001f1c <__malloc_lock>
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	; (8001dd8 <_free_r+0x94>)
 8001d60:	9801      	ldr	r0, [sp, #4]
 8001d62:	6813      	ldr	r3, [r2, #0]
 8001d64:	b933      	cbnz	r3, 8001d74 <_free_r+0x30>
 8001d66:	6063      	str	r3, [r4, #4]
 8001d68:	6014      	str	r4, [r2, #0]
 8001d6a:	b003      	add	sp, #12
 8001d6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d70:	f000 b8da 	b.w	8001f28 <__malloc_unlock>
 8001d74:	42a3      	cmp	r3, r4
 8001d76:	d908      	bls.n	8001d8a <_free_r+0x46>
 8001d78:	6825      	ldr	r5, [r4, #0]
 8001d7a:	1961      	adds	r1, r4, r5
 8001d7c:	428b      	cmp	r3, r1
 8001d7e:	bf01      	itttt	eq
 8001d80:	6819      	ldreq	r1, [r3, #0]
 8001d82:	685b      	ldreq	r3, [r3, #4]
 8001d84:	1949      	addeq	r1, r1, r5
 8001d86:	6021      	streq	r1, [r4, #0]
 8001d88:	e7ed      	b.n	8001d66 <_free_r+0x22>
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	b10b      	cbz	r3, 8001d94 <_free_r+0x50>
 8001d90:	42a3      	cmp	r3, r4
 8001d92:	d9fa      	bls.n	8001d8a <_free_r+0x46>
 8001d94:	6811      	ldr	r1, [r2, #0]
 8001d96:	1855      	adds	r5, r2, r1
 8001d98:	42a5      	cmp	r5, r4
 8001d9a:	d10b      	bne.n	8001db4 <_free_r+0x70>
 8001d9c:	6824      	ldr	r4, [r4, #0]
 8001d9e:	4421      	add	r1, r4
 8001da0:	1854      	adds	r4, r2, r1
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	6011      	str	r1, [r2, #0]
 8001da6:	d1e0      	bne.n	8001d6a <_free_r+0x26>
 8001da8:	681c      	ldr	r4, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	6053      	str	r3, [r2, #4]
 8001dae:	440c      	add	r4, r1
 8001db0:	6014      	str	r4, [r2, #0]
 8001db2:	e7da      	b.n	8001d6a <_free_r+0x26>
 8001db4:	d902      	bls.n	8001dbc <_free_r+0x78>
 8001db6:	230c      	movs	r3, #12
 8001db8:	6003      	str	r3, [r0, #0]
 8001dba:	e7d6      	b.n	8001d6a <_free_r+0x26>
 8001dbc:	6825      	ldr	r5, [r4, #0]
 8001dbe:	1961      	adds	r1, r4, r5
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	bf04      	itt	eq
 8001dc4:	6819      	ldreq	r1, [r3, #0]
 8001dc6:	685b      	ldreq	r3, [r3, #4]
 8001dc8:	6063      	str	r3, [r4, #4]
 8001dca:	bf04      	itt	eq
 8001dcc:	1949      	addeq	r1, r1, r5
 8001dce:	6021      	streq	r1, [r4, #0]
 8001dd0:	6054      	str	r4, [r2, #4]
 8001dd2:	e7ca      	b.n	8001d6a <_free_r+0x26>
 8001dd4:	b003      	add	sp, #12
 8001dd6:	bd30      	pop	{r4, r5, pc}
 8001dd8:	200001d4 	.word	0x200001d4

08001ddc <sbrk_aligned>:
 8001ddc:	b570      	push	{r4, r5, r6, lr}
 8001dde:	4e0e      	ldr	r6, [pc, #56]	; (8001e18 <sbrk_aligned+0x3c>)
 8001de0:	460c      	mov	r4, r1
 8001de2:	6831      	ldr	r1, [r6, #0]
 8001de4:	4605      	mov	r5, r0
 8001de6:	b911      	cbnz	r1, 8001dee <sbrk_aligned+0x12>
 8001de8:	f000 fcbc 	bl	8002764 <_sbrk_r>
 8001dec:	6030      	str	r0, [r6, #0]
 8001dee:	4621      	mov	r1, r4
 8001df0:	4628      	mov	r0, r5
 8001df2:	f000 fcb7 	bl	8002764 <_sbrk_r>
 8001df6:	1c43      	adds	r3, r0, #1
 8001df8:	d00a      	beq.n	8001e10 <sbrk_aligned+0x34>
 8001dfa:	1cc4      	adds	r4, r0, #3
 8001dfc:	f024 0403 	bic.w	r4, r4, #3
 8001e00:	42a0      	cmp	r0, r4
 8001e02:	d007      	beq.n	8001e14 <sbrk_aligned+0x38>
 8001e04:	1a21      	subs	r1, r4, r0
 8001e06:	4628      	mov	r0, r5
 8001e08:	f000 fcac 	bl	8002764 <_sbrk_r>
 8001e0c:	3001      	adds	r0, #1
 8001e0e:	d101      	bne.n	8001e14 <sbrk_aligned+0x38>
 8001e10:	f04f 34ff 	mov.w	r4, #4294967295
 8001e14:	4620      	mov	r0, r4
 8001e16:	bd70      	pop	{r4, r5, r6, pc}
 8001e18:	200001d8 	.word	0x200001d8

08001e1c <_malloc_r>:
 8001e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e20:	1ccd      	adds	r5, r1, #3
 8001e22:	f025 0503 	bic.w	r5, r5, #3
 8001e26:	3508      	adds	r5, #8
 8001e28:	2d0c      	cmp	r5, #12
 8001e2a:	bf38      	it	cc
 8001e2c:	250c      	movcc	r5, #12
 8001e2e:	2d00      	cmp	r5, #0
 8001e30:	4607      	mov	r7, r0
 8001e32:	db01      	blt.n	8001e38 <_malloc_r+0x1c>
 8001e34:	42a9      	cmp	r1, r5
 8001e36:	d905      	bls.n	8001e44 <_malloc_r+0x28>
 8001e38:	230c      	movs	r3, #12
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	2600      	movs	r6, #0
 8001e3e:	4630      	mov	r0, r6
 8001e40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f18 <_malloc_r+0xfc>
 8001e48:	f000 f868 	bl	8001f1c <__malloc_lock>
 8001e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8001e50:	461c      	mov	r4, r3
 8001e52:	bb5c      	cbnz	r4, 8001eac <_malloc_r+0x90>
 8001e54:	4629      	mov	r1, r5
 8001e56:	4638      	mov	r0, r7
 8001e58:	f7ff ffc0 	bl	8001ddc <sbrk_aligned>
 8001e5c:	1c43      	adds	r3, r0, #1
 8001e5e:	4604      	mov	r4, r0
 8001e60:	d155      	bne.n	8001f0e <_malloc_r+0xf2>
 8001e62:	f8d8 4000 	ldr.w	r4, [r8]
 8001e66:	4626      	mov	r6, r4
 8001e68:	2e00      	cmp	r6, #0
 8001e6a:	d145      	bne.n	8001ef8 <_malloc_r+0xdc>
 8001e6c:	2c00      	cmp	r4, #0
 8001e6e:	d048      	beq.n	8001f02 <_malloc_r+0xe6>
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	4631      	mov	r1, r6
 8001e74:	4638      	mov	r0, r7
 8001e76:	eb04 0903 	add.w	r9, r4, r3
 8001e7a:	f000 fc73 	bl	8002764 <_sbrk_r>
 8001e7e:	4581      	cmp	r9, r0
 8001e80:	d13f      	bne.n	8001f02 <_malloc_r+0xe6>
 8001e82:	6821      	ldr	r1, [r4, #0]
 8001e84:	1a6d      	subs	r5, r5, r1
 8001e86:	4629      	mov	r1, r5
 8001e88:	4638      	mov	r0, r7
 8001e8a:	f7ff ffa7 	bl	8001ddc <sbrk_aligned>
 8001e8e:	3001      	adds	r0, #1
 8001e90:	d037      	beq.n	8001f02 <_malloc_r+0xe6>
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	442b      	add	r3, r5
 8001e96:	6023      	str	r3, [r4, #0]
 8001e98:	f8d8 3000 	ldr.w	r3, [r8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d038      	beq.n	8001f12 <_malloc_r+0xf6>
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	42a2      	cmp	r2, r4
 8001ea4:	d12b      	bne.n	8001efe <_malloc_r+0xe2>
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	e00f      	b.n	8001ecc <_malloc_r+0xb0>
 8001eac:	6822      	ldr	r2, [r4, #0]
 8001eae:	1b52      	subs	r2, r2, r5
 8001eb0:	d41f      	bmi.n	8001ef2 <_malloc_r+0xd6>
 8001eb2:	2a0b      	cmp	r2, #11
 8001eb4:	d917      	bls.n	8001ee6 <_malloc_r+0xca>
 8001eb6:	1961      	adds	r1, r4, r5
 8001eb8:	42a3      	cmp	r3, r4
 8001eba:	6025      	str	r5, [r4, #0]
 8001ebc:	bf18      	it	ne
 8001ebe:	6059      	strne	r1, [r3, #4]
 8001ec0:	6863      	ldr	r3, [r4, #4]
 8001ec2:	bf08      	it	eq
 8001ec4:	f8c8 1000 	streq.w	r1, [r8]
 8001ec8:	5162      	str	r2, [r4, r5]
 8001eca:	604b      	str	r3, [r1, #4]
 8001ecc:	4638      	mov	r0, r7
 8001ece:	f104 060b 	add.w	r6, r4, #11
 8001ed2:	f000 f829 	bl	8001f28 <__malloc_unlock>
 8001ed6:	f026 0607 	bic.w	r6, r6, #7
 8001eda:	1d23      	adds	r3, r4, #4
 8001edc:	1af2      	subs	r2, r6, r3
 8001ede:	d0ae      	beq.n	8001e3e <_malloc_r+0x22>
 8001ee0:	1b9b      	subs	r3, r3, r6
 8001ee2:	50a3      	str	r3, [r4, r2]
 8001ee4:	e7ab      	b.n	8001e3e <_malloc_r+0x22>
 8001ee6:	42a3      	cmp	r3, r4
 8001ee8:	6862      	ldr	r2, [r4, #4]
 8001eea:	d1dd      	bne.n	8001ea8 <_malloc_r+0x8c>
 8001eec:	f8c8 2000 	str.w	r2, [r8]
 8001ef0:	e7ec      	b.n	8001ecc <_malloc_r+0xb0>
 8001ef2:	4623      	mov	r3, r4
 8001ef4:	6864      	ldr	r4, [r4, #4]
 8001ef6:	e7ac      	b.n	8001e52 <_malloc_r+0x36>
 8001ef8:	4634      	mov	r4, r6
 8001efa:	6876      	ldr	r6, [r6, #4]
 8001efc:	e7b4      	b.n	8001e68 <_malloc_r+0x4c>
 8001efe:	4613      	mov	r3, r2
 8001f00:	e7cc      	b.n	8001e9c <_malloc_r+0x80>
 8001f02:	230c      	movs	r3, #12
 8001f04:	603b      	str	r3, [r7, #0]
 8001f06:	4638      	mov	r0, r7
 8001f08:	f000 f80e 	bl	8001f28 <__malloc_unlock>
 8001f0c:	e797      	b.n	8001e3e <_malloc_r+0x22>
 8001f0e:	6025      	str	r5, [r4, #0]
 8001f10:	e7dc      	b.n	8001ecc <_malloc_r+0xb0>
 8001f12:	605b      	str	r3, [r3, #4]
 8001f14:	deff      	udf	#255	; 0xff
 8001f16:	bf00      	nop
 8001f18:	200001d4 	.word	0x200001d4

08001f1c <__malloc_lock>:
 8001f1c:	4801      	ldr	r0, [pc, #4]	; (8001f24 <__malloc_lock+0x8>)
 8001f1e:	f7ff bf0f 	b.w	8001d40 <__retarget_lock_acquire_recursive>
 8001f22:	bf00      	nop
 8001f24:	200001d0 	.word	0x200001d0

08001f28 <__malloc_unlock>:
 8001f28:	4801      	ldr	r0, [pc, #4]	; (8001f30 <__malloc_unlock+0x8>)
 8001f2a:	f7ff bf0a 	b.w	8001d42 <__retarget_lock_release_recursive>
 8001f2e:	bf00      	nop
 8001f30:	200001d0 	.word	0x200001d0

08001f34 <__sfputc_r>:
 8001f34:	6893      	ldr	r3, [r2, #8]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	b410      	push	{r4}
 8001f3c:	6093      	str	r3, [r2, #8]
 8001f3e:	da08      	bge.n	8001f52 <__sfputc_r+0x1e>
 8001f40:	6994      	ldr	r4, [r2, #24]
 8001f42:	42a3      	cmp	r3, r4
 8001f44:	db01      	blt.n	8001f4a <__sfputc_r+0x16>
 8001f46:	290a      	cmp	r1, #10
 8001f48:	d103      	bne.n	8001f52 <__sfputc_r+0x1e>
 8001f4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f4e:	f000 bb73 	b.w	8002638 <__swbuf_r>
 8001f52:	6813      	ldr	r3, [r2, #0]
 8001f54:	1c58      	adds	r0, r3, #1
 8001f56:	6010      	str	r0, [r2, #0]
 8001f58:	7019      	strb	r1, [r3, #0]
 8001f5a:	4608      	mov	r0, r1
 8001f5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <__sfputs_r>:
 8001f62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f64:	4606      	mov	r6, r0
 8001f66:	460f      	mov	r7, r1
 8001f68:	4614      	mov	r4, r2
 8001f6a:	18d5      	adds	r5, r2, r3
 8001f6c:	42ac      	cmp	r4, r5
 8001f6e:	d101      	bne.n	8001f74 <__sfputs_r+0x12>
 8001f70:	2000      	movs	r0, #0
 8001f72:	e007      	b.n	8001f84 <__sfputs_r+0x22>
 8001f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f78:	463a      	mov	r2, r7
 8001f7a:	4630      	mov	r0, r6
 8001f7c:	f7ff ffda 	bl	8001f34 <__sfputc_r>
 8001f80:	1c43      	adds	r3, r0, #1
 8001f82:	d1f3      	bne.n	8001f6c <__sfputs_r+0xa>
 8001f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001f88 <_vfiprintf_r>:
 8001f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f8c:	460d      	mov	r5, r1
 8001f8e:	b09d      	sub	sp, #116	; 0x74
 8001f90:	4614      	mov	r4, r2
 8001f92:	4698      	mov	r8, r3
 8001f94:	4606      	mov	r6, r0
 8001f96:	b118      	cbz	r0, 8001fa0 <_vfiprintf_r+0x18>
 8001f98:	6a03      	ldr	r3, [r0, #32]
 8001f9a:	b90b      	cbnz	r3, 8001fa0 <_vfiprintf_r+0x18>
 8001f9c:	f7ff fdcc 	bl	8001b38 <__sinit>
 8001fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fa2:	07d9      	lsls	r1, r3, #31
 8001fa4:	d405      	bmi.n	8001fb2 <_vfiprintf_r+0x2a>
 8001fa6:	89ab      	ldrh	r3, [r5, #12]
 8001fa8:	059a      	lsls	r2, r3, #22
 8001faa:	d402      	bmi.n	8001fb2 <_vfiprintf_r+0x2a>
 8001fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fae:	f7ff fec7 	bl	8001d40 <__retarget_lock_acquire_recursive>
 8001fb2:	89ab      	ldrh	r3, [r5, #12]
 8001fb4:	071b      	lsls	r3, r3, #28
 8001fb6:	d501      	bpl.n	8001fbc <_vfiprintf_r+0x34>
 8001fb8:	692b      	ldr	r3, [r5, #16]
 8001fba:	b99b      	cbnz	r3, 8001fe4 <_vfiprintf_r+0x5c>
 8001fbc:	4629      	mov	r1, r5
 8001fbe:	4630      	mov	r0, r6
 8001fc0:	f000 fb78 	bl	80026b4 <__swsetup_r>
 8001fc4:	b170      	cbz	r0, 8001fe4 <_vfiprintf_r+0x5c>
 8001fc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fc8:	07dc      	lsls	r4, r3, #31
 8001fca:	d504      	bpl.n	8001fd6 <_vfiprintf_r+0x4e>
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	b01d      	add	sp, #116	; 0x74
 8001fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fd6:	89ab      	ldrh	r3, [r5, #12]
 8001fd8:	0598      	lsls	r0, r3, #22
 8001fda:	d4f7      	bmi.n	8001fcc <_vfiprintf_r+0x44>
 8001fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fde:	f7ff feb0 	bl	8001d42 <__retarget_lock_release_recursive>
 8001fe2:	e7f3      	b.n	8001fcc <_vfiprintf_r+0x44>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9309      	str	r3, [sp, #36]	; 0x24
 8001fe8:	2320      	movs	r3, #32
 8001fea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001fee:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ff2:	2330      	movs	r3, #48	; 0x30
 8001ff4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80021a8 <_vfiprintf_r+0x220>
 8001ff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001ffc:	f04f 0901 	mov.w	r9, #1
 8002000:	4623      	mov	r3, r4
 8002002:	469a      	mov	sl, r3
 8002004:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002008:	b10a      	cbz	r2, 800200e <_vfiprintf_r+0x86>
 800200a:	2a25      	cmp	r2, #37	; 0x25
 800200c:	d1f9      	bne.n	8002002 <_vfiprintf_r+0x7a>
 800200e:	ebba 0b04 	subs.w	fp, sl, r4
 8002012:	d00b      	beq.n	800202c <_vfiprintf_r+0xa4>
 8002014:	465b      	mov	r3, fp
 8002016:	4622      	mov	r2, r4
 8002018:	4629      	mov	r1, r5
 800201a:	4630      	mov	r0, r6
 800201c:	f7ff ffa1 	bl	8001f62 <__sfputs_r>
 8002020:	3001      	adds	r0, #1
 8002022:	f000 80a9 	beq.w	8002178 <_vfiprintf_r+0x1f0>
 8002026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002028:	445a      	add	r2, fp
 800202a:	9209      	str	r2, [sp, #36]	; 0x24
 800202c:	f89a 3000 	ldrb.w	r3, [sl]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 80a1 	beq.w	8002178 <_vfiprintf_r+0x1f0>
 8002036:	2300      	movs	r3, #0
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002040:	f10a 0a01 	add.w	sl, sl, #1
 8002044:	9304      	str	r3, [sp, #16]
 8002046:	9307      	str	r3, [sp, #28]
 8002048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800204c:	931a      	str	r3, [sp, #104]	; 0x68
 800204e:	4654      	mov	r4, sl
 8002050:	2205      	movs	r2, #5
 8002052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002056:	4854      	ldr	r0, [pc, #336]	; (80021a8 <_vfiprintf_r+0x220>)
 8002058:	f7fe f8c2 	bl	80001e0 <memchr>
 800205c:	9a04      	ldr	r2, [sp, #16]
 800205e:	b9d8      	cbnz	r0, 8002098 <_vfiprintf_r+0x110>
 8002060:	06d1      	lsls	r1, r2, #27
 8002062:	bf44      	itt	mi
 8002064:	2320      	movmi	r3, #32
 8002066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800206a:	0713      	lsls	r3, r2, #28
 800206c:	bf44      	itt	mi
 800206e:	232b      	movmi	r3, #43	; 0x2b
 8002070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002074:	f89a 3000 	ldrb.w	r3, [sl]
 8002078:	2b2a      	cmp	r3, #42	; 0x2a
 800207a:	d015      	beq.n	80020a8 <_vfiprintf_r+0x120>
 800207c:	9a07      	ldr	r2, [sp, #28]
 800207e:	4654      	mov	r4, sl
 8002080:	2000      	movs	r0, #0
 8002082:	f04f 0c0a 	mov.w	ip, #10
 8002086:	4621      	mov	r1, r4
 8002088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800208c:	3b30      	subs	r3, #48	; 0x30
 800208e:	2b09      	cmp	r3, #9
 8002090:	d94d      	bls.n	800212e <_vfiprintf_r+0x1a6>
 8002092:	b1b0      	cbz	r0, 80020c2 <_vfiprintf_r+0x13a>
 8002094:	9207      	str	r2, [sp, #28]
 8002096:	e014      	b.n	80020c2 <_vfiprintf_r+0x13a>
 8002098:	eba0 0308 	sub.w	r3, r0, r8
 800209c:	fa09 f303 	lsl.w	r3, r9, r3
 80020a0:	4313      	orrs	r3, r2
 80020a2:	9304      	str	r3, [sp, #16]
 80020a4:	46a2      	mov	sl, r4
 80020a6:	e7d2      	b.n	800204e <_vfiprintf_r+0xc6>
 80020a8:	9b03      	ldr	r3, [sp, #12]
 80020aa:	1d19      	adds	r1, r3, #4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	9103      	str	r1, [sp, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bfbb      	ittet	lt
 80020b4:	425b      	neglt	r3, r3
 80020b6:	f042 0202 	orrlt.w	r2, r2, #2
 80020ba:	9307      	strge	r3, [sp, #28]
 80020bc:	9307      	strlt	r3, [sp, #28]
 80020be:	bfb8      	it	lt
 80020c0:	9204      	strlt	r2, [sp, #16]
 80020c2:	7823      	ldrb	r3, [r4, #0]
 80020c4:	2b2e      	cmp	r3, #46	; 0x2e
 80020c6:	d10c      	bne.n	80020e2 <_vfiprintf_r+0x15a>
 80020c8:	7863      	ldrb	r3, [r4, #1]
 80020ca:	2b2a      	cmp	r3, #42	; 0x2a
 80020cc:	d134      	bne.n	8002138 <_vfiprintf_r+0x1b0>
 80020ce:	9b03      	ldr	r3, [sp, #12]
 80020d0:	1d1a      	adds	r2, r3, #4
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	9203      	str	r2, [sp, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bfb8      	it	lt
 80020da:	f04f 33ff 	movlt.w	r3, #4294967295
 80020de:	3402      	adds	r4, #2
 80020e0:	9305      	str	r3, [sp, #20]
 80020e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80021b8 <_vfiprintf_r+0x230>
 80020e6:	7821      	ldrb	r1, [r4, #0]
 80020e8:	2203      	movs	r2, #3
 80020ea:	4650      	mov	r0, sl
 80020ec:	f7fe f878 	bl	80001e0 <memchr>
 80020f0:	b138      	cbz	r0, 8002102 <_vfiprintf_r+0x17a>
 80020f2:	9b04      	ldr	r3, [sp, #16]
 80020f4:	eba0 000a 	sub.w	r0, r0, sl
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	4082      	lsls	r2, r0
 80020fc:	4313      	orrs	r3, r2
 80020fe:	3401      	adds	r4, #1
 8002100:	9304      	str	r3, [sp, #16]
 8002102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002106:	4829      	ldr	r0, [pc, #164]	; (80021ac <_vfiprintf_r+0x224>)
 8002108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800210c:	2206      	movs	r2, #6
 800210e:	f7fe f867 	bl	80001e0 <memchr>
 8002112:	2800      	cmp	r0, #0
 8002114:	d03f      	beq.n	8002196 <_vfiprintf_r+0x20e>
 8002116:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <_vfiprintf_r+0x228>)
 8002118:	bb1b      	cbnz	r3, 8002162 <_vfiprintf_r+0x1da>
 800211a:	9b03      	ldr	r3, [sp, #12]
 800211c:	3307      	adds	r3, #7
 800211e:	f023 0307 	bic.w	r3, r3, #7
 8002122:	3308      	adds	r3, #8
 8002124:	9303      	str	r3, [sp, #12]
 8002126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002128:	443b      	add	r3, r7
 800212a:	9309      	str	r3, [sp, #36]	; 0x24
 800212c:	e768      	b.n	8002000 <_vfiprintf_r+0x78>
 800212e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002132:	460c      	mov	r4, r1
 8002134:	2001      	movs	r0, #1
 8002136:	e7a6      	b.n	8002086 <_vfiprintf_r+0xfe>
 8002138:	2300      	movs	r3, #0
 800213a:	3401      	adds	r4, #1
 800213c:	9305      	str	r3, [sp, #20]
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 0c0a 	mov.w	ip, #10
 8002144:	4620      	mov	r0, r4
 8002146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800214a:	3a30      	subs	r2, #48	; 0x30
 800214c:	2a09      	cmp	r2, #9
 800214e:	d903      	bls.n	8002158 <_vfiprintf_r+0x1d0>
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0c6      	beq.n	80020e2 <_vfiprintf_r+0x15a>
 8002154:	9105      	str	r1, [sp, #20]
 8002156:	e7c4      	b.n	80020e2 <_vfiprintf_r+0x15a>
 8002158:	fb0c 2101 	mla	r1, ip, r1, r2
 800215c:	4604      	mov	r4, r0
 800215e:	2301      	movs	r3, #1
 8002160:	e7f0      	b.n	8002144 <_vfiprintf_r+0x1bc>
 8002162:	ab03      	add	r3, sp, #12
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	462a      	mov	r2, r5
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <_vfiprintf_r+0x22c>)
 800216a:	a904      	add	r1, sp, #16
 800216c:	4630      	mov	r0, r6
 800216e:	f3af 8000 	nop.w
 8002172:	4607      	mov	r7, r0
 8002174:	1c78      	adds	r0, r7, #1
 8002176:	d1d6      	bne.n	8002126 <_vfiprintf_r+0x19e>
 8002178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800217a:	07d9      	lsls	r1, r3, #31
 800217c:	d405      	bmi.n	800218a <_vfiprintf_r+0x202>
 800217e:	89ab      	ldrh	r3, [r5, #12]
 8002180:	059a      	lsls	r2, r3, #22
 8002182:	d402      	bmi.n	800218a <_vfiprintf_r+0x202>
 8002184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002186:	f7ff fddc 	bl	8001d42 <__retarget_lock_release_recursive>
 800218a:	89ab      	ldrh	r3, [r5, #12]
 800218c:	065b      	lsls	r3, r3, #25
 800218e:	f53f af1d 	bmi.w	8001fcc <_vfiprintf_r+0x44>
 8002192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002194:	e71c      	b.n	8001fd0 <_vfiprintf_r+0x48>
 8002196:	ab03      	add	r3, sp, #12
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	462a      	mov	r2, r5
 800219c:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <_vfiprintf_r+0x22c>)
 800219e:	a904      	add	r1, sp, #16
 80021a0:	4630      	mov	r0, r6
 80021a2:	f000 f879 	bl	8002298 <_printf_i>
 80021a6:	e7e4      	b.n	8002172 <_vfiprintf_r+0x1ea>
 80021a8:	080028c2 	.word	0x080028c2
 80021ac:	080028cc 	.word	0x080028cc
 80021b0:	00000000 	.word	0x00000000
 80021b4:	08001f63 	.word	0x08001f63
 80021b8:	080028c8 	.word	0x080028c8

080021bc <_printf_common>:
 80021bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c0:	4616      	mov	r6, r2
 80021c2:	4699      	mov	r9, r3
 80021c4:	688a      	ldr	r2, [r1, #8]
 80021c6:	690b      	ldr	r3, [r1, #16]
 80021c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021cc:	4293      	cmp	r3, r2
 80021ce:	bfb8      	it	lt
 80021d0:	4613      	movlt	r3, r2
 80021d2:	6033      	str	r3, [r6, #0]
 80021d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021d8:	4607      	mov	r7, r0
 80021da:	460c      	mov	r4, r1
 80021dc:	b10a      	cbz	r2, 80021e2 <_printf_common+0x26>
 80021de:	3301      	adds	r3, #1
 80021e0:	6033      	str	r3, [r6, #0]
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	0699      	lsls	r1, r3, #26
 80021e6:	bf42      	ittt	mi
 80021e8:	6833      	ldrmi	r3, [r6, #0]
 80021ea:	3302      	addmi	r3, #2
 80021ec:	6033      	strmi	r3, [r6, #0]
 80021ee:	6825      	ldr	r5, [r4, #0]
 80021f0:	f015 0506 	ands.w	r5, r5, #6
 80021f4:	d106      	bne.n	8002204 <_printf_common+0x48>
 80021f6:	f104 0a19 	add.w	sl, r4, #25
 80021fa:	68e3      	ldr	r3, [r4, #12]
 80021fc:	6832      	ldr	r2, [r6, #0]
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	42ab      	cmp	r3, r5
 8002202:	dc26      	bgt.n	8002252 <_printf_common+0x96>
 8002204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002208:	1e13      	subs	r3, r2, #0
 800220a:	6822      	ldr	r2, [r4, #0]
 800220c:	bf18      	it	ne
 800220e:	2301      	movne	r3, #1
 8002210:	0692      	lsls	r2, r2, #26
 8002212:	d42b      	bmi.n	800226c <_printf_common+0xb0>
 8002214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002218:	4649      	mov	r1, r9
 800221a:	4638      	mov	r0, r7
 800221c:	47c0      	blx	r8
 800221e:	3001      	adds	r0, #1
 8002220:	d01e      	beq.n	8002260 <_printf_common+0xa4>
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	6922      	ldr	r2, [r4, #16]
 8002226:	f003 0306 	and.w	r3, r3, #6
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf02      	ittt	eq
 800222e:	68e5      	ldreq	r5, [r4, #12]
 8002230:	6833      	ldreq	r3, [r6, #0]
 8002232:	1aed      	subeq	r5, r5, r3
 8002234:	68a3      	ldr	r3, [r4, #8]
 8002236:	bf0c      	ite	eq
 8002238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800223c:	2500      	movne	r5, #0
 800223e:	4293      	cmp	r3, r2
 8002240:	bfc4      	itt	gt
 8002242:	1a9b      	subgt	r3, r3, r2
 8002244:	18ed      	addgt	r5, r5, r3
 8002246:	2600      	movs	r6, #0
 8002248:	341a      	adds	r4, #26
 800224a:	42b5      	cmp	r5, r6
 800224c:	d11a      	bne.n	8002284 <_printf_common+0xc8>
 800224e:	2000      	movs	r0, #0
 8002250:	e008      	b.n	8002264 <_printf_common+0xa8>
 8002252:	2301      	movs	r3, #1
 8002254:	4652      	mov	r2, sl
 8002256:	4649      	mov	r1, r9
 8002258:	4638      	mov	r0, r7
 800225a:	47c0      	blx	r8
 800225c:	3001      	adds	r0, #1
 800225e:	d103      	bne.n	8002268 <_printf_common+0xac>
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002268:	3501      	adds	r5, #1
 800226a:	e7c6      	b.n	80021fa <_printf_common+0x3e>
 800226c:	18e1      	adds	r1, r4, r3
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	2030      	movs	r0, #48	; 0x30
 8002272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002276:	4422      	add	r2, r4
 8002278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800227c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002280:	3302      	adds	r3, #2
 8002282:	e7c7      	b.n	8002214 <_printf_common+0x58>
 8002284:	2301      	movs	r3, #1
 8002286:	4622      	mov	r2, r4
 8002288:	4649      	mov	r1, r9
 800228a:	4638      	mov	r0, r7
 800228c:	47c0      	blx	r8
 800228e:	3001      	adds	r0, #1
 8002290:	d0e6      	beq.n	8002260 <_printf_common+0xa4>
 8002292:	3601      	adds	r6, #1
 8002294:	e7d9      	b.n	800224a <_printf_common+0x8e>
	...

08002298 <_printf_i>:
 8002298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800229c:	7e0f      	ldrb	r7, [r1, #24]
 800229e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022a0:	2f78      	cmp	r7, #120	; 0x78
 80022a2:	4691      	mov	r9, r2
 80022a4:	4680      	mov	r8, r0
 80022a6:	460c      	mov	r4, r1
 80022a8:	469a      	mov	sl, r3
 80022aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022ae:	d807      	bhi.n	80022c0 <_printf_i+0x28>
 80022b0:	2f62      	cmp	r7, #98	; 0x62
 80022b2:	d80a      	bhi.n	80022ca <_printf_i+0x32>
 80022b4:	2f00      	cmp	r7, #0
 80022b6:	f000 80d4 	beq.w	8002462 <_printf_i+0x1ca>
 80022ba:	2f58      	cmp	r7, #88	; 0x58
 80022bc:	f000 80c0 	beq.w	8002440 <_printf_i+0x1a8>
 80022c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022c8:	e03a      	b.n	8002340 <_printf_i+0xa8>
 80022ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022ce:	2b15      	cmp	r3, #21
 80022d0:	d8f6      	bhi.n	80022c0 <_printf_i+0x28>
 80022d2:	a101      	add	r1, pc, #4	; (adr r1, 80022d8 <_printf_i+0x40>)
 80022d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022d8:	08002331 	.word	0x08002331
 80022dc:	08002345 	.word	0x08002345
 80022e0:	080022c1 	.word	0x080022c1
 80022e4:	080022c1 	.word	0x080022c1
 80022e8:	080022c1 	.word	0x080022c1
 80022ec:	080022c1 	.word	0x080022c1
 80022f0:	08002345 	.word	0x08002345
 80022f4:	080022c1 	.word	0x080022c1
 80022f8:	080022c1 	.word	0x080022c1
 80022fc:	080022c1 	.word	0x080022c1
 8002300:	080022c1 	.word	0x080022c1
 8002304:	08002449 	.word	0x08002449
 8002308:	08002371 	.word	0x08002371
 800230c:	08002403 	.word	0x08002403
 8002310:	080022c1 	.word	0x080022c1
 8002314:	080022c1 	.word	0x080022c1
 8002318:	0800246b 	.word	0x0800246b
 800231c:	080022c1 	.word	0x080022c1
 8002320:	08002371 	.word	0x08002371
 8002324:	080022c1 	.word	0x080022c1
 8002328:	080022c1 	.word	0x080022c1
 800232c:	0800240b 	.word	0x0800240b
 8002330:	682b      	ldr	r3, [r5, #0]
 8002332:	1d1a      	adds	r2, r3, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	602a      	str	r2, [r5, #0]
 8002338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800233c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002340:	2301      	movs	r3, #1
 8002342:	e09f      	b.n	8002484 <_printf_i+0x1ec>
 8002344:	6820      	ldr	r0, [r4, #0]
 8002346:	682b      	ldr	r3, [r5, #0]
 8002348:	0607      	lsls	r7, r0, #24
 800234a:	f103 0104 	add.w	r1, r3, #4
 800234e:	6029      	str	r1, [r5, #0]
 8002350:	d501      	bpl.n	8002356 <_printf_i+0xbe>
 8002352:	681e      	ldr	r6, [r3, #0]
 8002354:	e003      	b.n	800235e <_printf_i+0xc6>
 8002356:	0646      	lsls	r6, r0, #25
 8002358:	d5fb      	bpl.n	8002352 <_printf_i+0xba>
 800235a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800235e:	2e00      	cmp	r6, #0
 8002360:	da03      	bge.n	800236a <_printf_i+0xd2>
 8002362:	232d      	movs	r3, #45	; 0x2d
 8002364:	4276      	negs	r6, r6
 8002366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800236a:	485a      	ldr	r0, [pc, #360]	; (80024d4 <_printf_i+0x23c>)
 800236c:	230a      	movs	r3, #10
 800236e:	e012      	b.n	8002396 <_printf_i+0xfe>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	6820      	ldr	r0, [r4, #0]
 8002374:	1d19      	adds	r1, r3, #4
 8002376:	6029      	str	r1, [r5, #0]
 8002378:	0605      	lsls	r5, r0, #24
 800237a:	d501      	bpl.n	8002380 <_printf_i+0xe8>
 800237c:	681e      	ldr	r6, [r3, #0]
 800237e:	e002      	b.n	8002386 <_printf_i+0xee>
 8002380:	0641      	lsls	r1, r0, #25
 8002382:	d5fb      	bpl.n	800237c <_printf_i+0xe4>
 8002384:	881e      	ldrh	r6, [r3, #0]
 8002386:	4853      	ldr	r0, [pc, #332]	; (80024d4 <_printf_i+0x23c>)
 8002388:	2f6f      	cmp	r7, #111	; 0x6f
 800238a:	bf0c      	ite	eq
 800238c:	2308      	moveq	r3, #8
 800238e:	230a      	movne	r3, #10
 8002390:	2100      	movs	r1, #0
 8002392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002396:	6865      	ldr	r5, [r4, #4]
 8002398:	60a5      	str	r5, [r4, #8]
 800239a:	2d00      	cmp	r5, #0
 800239c:	bfa2      	ittt	ge
 800239e:	6821      	ldrge	r1, [r4, #0]
 80023a0:	f021 0104 	bicge.w	r1, r1, #4
 80023a4:	6021      	strge	r1, [r4, #0]
 80023a6:	b90e      	cbnz	r6, 80023ac <_printf_i+0x114>
 80023a8:	2d00      	cmp	r5, #0
 80023aa:	d04b      	beq.n	8002444 <_printf_i+0x1ac>
 80023ac:	4615      	mov	r5, r2
 80023ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80023b2:	fb03 6711 	mls	r7, r3, r1, r6
 80023b6:	5dc7      	ldrb	r7, [r0, r7]
 80023b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023bc:	4637      	mov	r7, r6
 80023be:	42bb      	cmp	r3, r7
 80023c0:	460e      	mov	r6, r1
 80023c2:	d9f4      	bls.n	80023ae <_printf_i+0x116>
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d10b      	bne.n	80023e0 <_printf_i+0x148>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	07de      	lsls	r6, r3, #31
 80023cc:	d508      	bpl.n	80023e0 <_printf_i+0x148>
 80023ce:	6923      	ldr	r3, [r4, #16]
 80023d0:	6861      	ldr	r1, [r4, #4]
 80023d2:	4299      	cmp	r1, r3
 80023d4:	bfde      	ittt	le
 80023d6:	2330      	movle	r3, #48	; 0x30
 80023d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023e0:	1b52      	subs	r2, r2, r5
 80023e2:	6122      	str	r2, [r4, #16]
 80023e4:	f8cd a000 	str.w	sl, [sp]
 80023e8:	464b      	mov	r3, r9
 80023ea:	aa03      	add	r2, sp, #12
 80023ec:	4621      	mov	r1, r4
 80023ee:	4640      	mov	r0, r8
 80023f0:	f7ff fee4 	bl	80021bc <_printf_common>
 80023f4:	3001      	adds	r0, #1
 80023f6:	d14a      	bne.n	800248e <_printf_i+0x1f6>
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	b004      	add	sp, #16
 80023fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	f043 0320 	orr.w	r3, r3, #32
 8002408:	6023      	str	r3, [r4, #0]
 800240a:	4833      	ldr	r0, [pc, #204]	; (80024d8 <_printf_i+0x240>)
 800240c:	2778      	movs	r7, #120	; 0x78
 800240e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	6829      	ldr	r1, [r5, #0]
 8002416:	061f      	lsls	r7, r3, #24
 8002418:	f851 6b04 	ldr.w	r6, [r1], #4
 800241c:	d402      	bmi.n	8002424 <_printf_i+0x18c>
 800241e:	065f      	lsls	r7, r3, #25
 8002420:	bf48      	it	mi
 8002422:	b2b6      	uxthmi	r6, r6
 8002424:	07df      	lsls	r7, r3, #31
 8002426:	bf48      	it	mi
 8002428:	f043 0320 	orrmi.w	r3, r3, #32
 800242c:	6029      	str	r1, [r5, #0]
 800242e:	bf48      	it	mi
 8002430:	6023      	strmi	r3, [r4, #0]
 8002432:	b91e      	cbnz	r6, 800243c <_printf_i+0x1a4>
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	f023 0320 	bic.w	r3, r3, #32
 800243a:	6023      	str	r3, [r4, #0]
 800243c:	2310      	movs	r3, #16
 800243e:	e7a7      	b.n	8002390 <_printf_i+0xf8>
 8002440:	4824      	ldr	r0, [pc, #144]	; (80024d4 <_printf_i+0x23c>)
 8002442:	e7e4      	b.n	800240e <_printf_i+0x176>
 8002444:	4615      	mov	r5, r2
 8002446:	e7bd      	b.n	80023c4 <_printf_i+0x12c>
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	6826      	ldr	r6, [r4, #0]
 800244c:	6961      	ldr	r1, [r4, #20]
 800244e:	1d18      	adds	r0, r3, #4
 8002450:	6028      	str	r0, [r5, #0]
 8002452:	0635      	lsls	r5, r6, #24
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	d501      	bpl.n	800245c <_printf_i+0x1c4>
 8002458:	6019      	str	r1, [r3, #0]
 800245a:	e002      	b.n	8002462 <_printf_i+0x1ca>
 800245c:	0670      	lsls	r0, r6, #25
 800245e:	d5fb      	bpl.n	8002458 <_printf_i+0x1c0>
 8002460:	8019      	strh	r1, [r3, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	6123      	str	r3, [r4, #16]
 8002466:	4615      	mov	r5, r2
 8002468:	e7bc      	b.n	80023e4 <_printf_i+0x14c>
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	1d1a      	adds	r2, r3, #4
 800246e:	602a      	str	r2, [r5, #0]
 8002470:	681d      	ldr	r5, [r3, #0]
 8002472:	6862      	ldr	r2, [r4, #4]
 8002474:	2100      	movs	r1, #0
 8002476:	4628      	mov	r0, r5
 8002478:	f7fd feb2 	bl	80001e0 <memchr>
 800247c:	b108      	cbz	r0, 8002482 <_printf_i+0x1ea>
 800247e:	1b40      	subs	r0, r0, r5
 8002480:	6060      	str	r0, [r4, #4]
 8002482:	6863      	ldr	r3, [r4, #4]
 8002484:	6123      	str	r3, [r4, #16]
 8002486:	2300      	movs	r3, #0
 8002488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800248c:	e7aa      	b.n	80023e4 <_printf_i+0x14c>
 800248e:	6923      	ldr	r3, [r4, #16]
 8002490:	462a      	mov	r2, r5
 8002492:	4649      	mov	r1, r9
 8002494:	4640      	mov	r0, r8
 8002496:	47d0      	blx	sl
 8002498:	3001      	adds	r0, #1
 800249a:	d0ad      	beq.n	80023f8 <_printf_i+0x160>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	079b      	lsls	r3, r3, #30
 80024a0:	d413      	bmi.n	80024ca <_printf_i+0x232>
 80024a2:	68e0      	ldr	r0, [r4, #12]
 80024a4:	9b03      	ldr	r3, [sp, #12]
 80024a6:	4298      	cmp	r0, r3
 80024a8:	bfb8      	it	lt
 80024aa:	4618      	movlt	r0, r3
 80024ac:	e7a6      	b.n	80023fc <_printf_i+0x164>
 80024ae:	2301      	movs	r3, #1
 80024b0:	4632      	mov	r2, r6
 80024b2:	4649      	mov	r1, r9
 80024b4:	4640      	mov	r0, r8
 80024b6:	47d0      	blx	sl
 80024b8:	3001      	adds	r0, #1
 80024ba:	d09d      	beq.n	80023f8 <_printf_i+0x160>
 80024bc:	3501      	adds	r5, #1
 80024be:	68e3      	ldr	r3, [r4, #12]
 80024c0:	9903      	ldr	r1, [sp, #12]
 80024c2:	1a5b      	subs	r3, r3, r1
 80024c4:	42ab      	cmp	r3, r5
 80024c6:	dcf2      	bgt.n	80024ae <_printf_i+0x216>
 80024c8:	e7eb      	b.n	80024a2 <_printf_i+0x20a>
 80024ca:	2500      	movs	r5, #0
 80024cc:	f104 0619 	add.w	r6, r4, #25
 80024d0:	e7f5      	b.n	80024be <_printf_i+0x226>
 80024d2:	bf00      	nop
 80024d4:	080028d3 	.word	0x080028d3
 80024d8:	080028e4 	.word	0x080028e4

080024dc <__sflush_r>:
 80024dc:	898a      	ldrh	r2, [r1, #12]
 80024de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024e2:	4605      	mov	r5, r0
 80024e4:	0710      	lsls	r0, r2, #28
 80024e6:	460c      	mov	r4, r1
 80024e8:	d458      	bmi.n	800259c <__sflush_r+0xc0>
 80024ea:	684b      	ldr	r3, [r1, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	dc05      	bgt.n	80024fc <__sflush_r+0x20>
 80024f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	dc02      	bgt.n	80024fc <__sflush_r+0x20>
 80024f6:	2000      	movs	r0, #0
 80024f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80024fe:	2e00      	cmp	r6, #0
 8002500:	d0f9      	beq.n	80024f6 <__sflush_r+0x1a>
 8002502:	2300      	movs	r3, #0
 8002504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002508:	682f      	ldr	r7, [r5, #0]
 800250a:	6a21      	ldr	r1, [r4, #32]
 800250c:	602b      	str	r3, [r5, #0]
 800250e:	d032      	beq.n	8002576 <__sflush_r+0x9a>
 8002510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002512:	89a3      	ldrh	r3, [r4, #12]
 8002514:	075a      	lsls	r2, r3, #29
 8002516:	d505      	bpl.n	8002524 <__sflush_r+0x48>
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	1ac0      	subs	r0, r0, r3
 800251c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800251e:	b10b      	cbz	r3, 8002524 <__sflush_r+0x48>
 8002520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002522:	1ac0      	subs	r0, r0, r3
 8002524:	2300      	movs	r3, #0
 8002526:	4602      	mov	r2, r0
 8002528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800252a:	6a21      	ldr	r1, [r4, #32]
 800252c:	4628      	mov	r0, r5
 800252e:	47b0      	blx	r6
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	d106      	bne.n	8002544 <__sflush_r+0x68>
 8002536:	6829      	ldr	r1, [r5, #0]
 8002538:	291d      	cmp	r1, #29
 800253a:	d82b      	bhi.n	8002594 <__sflush_r+0xb8>
 800253c:	4a29      	ldr	r2, [pc, #164]	; (80025e4 <__sflush_r+0x108>)
 800253e:	410a      	asrs	r2, r1
 8002540:	07d6      	lsls	r6, r2, #31
 8002542:	d427      	bmi.n	8002594 <__sflush_r+0xb8>
 8002544:	2200      	movs	r2, #0
 8002546:	6062      	str	r2, [r4, #4]
 8002548:	04d9      	lsls	r1, r3, #19
 800254a:	6922      	ldr	r2, [r4, #16]
 800254c:	6022      	str	r2, [r4, #0]
 800254e:	d504      	bpl.n	800255a <__sflush_r+0x7e>
 8002550:	1c42      	adds	r2, r0, #1
 8002552:	d101      	bne.n	8002558 <__sflush_r+0x7c>
 8002554:	682b      	ldr	r3, [r5, #0]
 8002556:	b903      	cbnz	r3, 800255a <__sflush_r+0x7e>
 8002558:	6560      	str	r0, [r4, #84]	; 0x54
 800255a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800255c:	602f      	str	r7, [r5, #0]
 800255e:	2900      	cmp	r1, #0
 8002560:	d0c9      	beq.n	80024f6 <__sflush_r+0x1a>
 8002562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002566:	4299      	cmp	r1, r3
 8002568:	d002      	beq.n	8002570 <__sflush_r+0x94>
 800256a:	4628      	mov	r0, r5
 800256c:	f7ff fbea 	bl	8001d44 <_free_r>
 8002570:	2000      	movs	r0, #0
 8002572:	6360      	str	r0, [r4, #52]	; 0x34
 8002574:	e7c0      	b.n	80024f8 <__sflush_r+0x1c>
 8002576:	2301      	movs	r3, #1
 8002578:	4628      	mov	r0, r5
 800257a:	47b0      	blx	r6
 800257c:	1c41      	adds	r1, r0, #1
 800257e:	d1c8      	bne.n	8002512 <__sflush_r+0x36>
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0c5      	beq.n	8002512 <__sflush_r+0x36>
 8002586:	2b1d      	cmp	r3, #29
 8002588:	d001      	beq.n	800258e <__sflush_r+0xb2>
 800258a:	2b16      	cmp	r3, #22
 800258c:	d101      	bne.n	8002592 <__sflush_r+0xb6>
 800258e:	602f      	str	r7, [r5, #0]
 8002590:	e7b1      	b.n	80024f6 <__sflush_r+0x1a>
 8002592:	89a3      	ldrh	r3, [r4, #12]
 8002594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002598:	81a3      	strh	r3, [r4, #12]
 800259a:	e7ad      	b.n	80024f8 <__sflush_r+0x1c>
 800259c:	690f      	ldr	r7, [r1, #16]
 800259e:	2f00      	cmp	r7, #0
 80025a0:	d0a9      	beq.n	80024f6 <__sflush_r+0x1a>
 80025a2:	0793      	lsls	r3, r2, #30
 80025a4:	680e      	ldr	r6, [r1, #0]
 80025a6:	bf08      	it	eq
 80025a8:	694b      	ldreq	r3, [r1, #20]
 80025aa:	600f      	str	r7, [r1, #0]
 80025ac:	bf18      	it	ne
 80025ae:	2300      	movne	r3, #0
 80025b0:	eba6 0807 	sub.w	r8, r6, r7
 80025b4:	608b      	str	r3, [r1, #8]
 80025b6:	f1b8 0f00 	cmp.w	r8, #0
 80025ba:	dd9c      	ble.n	80024f6 <__sflush_r+0x1a>
 80025bc:	6a21      	ldr	r1, [r4, #32]
 80025be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025c0:	4643      	mov	r3, r8
 80025c2:	463a      	mov	r2, r7
 80025c4:	4628      	mov	r0, r5
 80025c6:	47b0      	blx	r6
 80025c8:	2800      	cmp	r0, #0
 80025ca:	dc06      	bgt.n	80025da <__sflush_r+0xfe>
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025d2:	81a3      	strh	r3, [r4, #12]
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	e78e      	b.n	80024f8 <__sflush_r+0x1c>
 80025da:	4407      	add	r7, r0
 80025dc:	eba8 0800 	sub.w	r8, r8, r0
 80025e0:	e7e9      	b.n	80025b6 <__sflush_r+0xda>
 80025e2:	bf00      	nop
 80025e4:	dfbffffe 	.word	0xdfbffffe

080025e8 <_fflush_r>:
 80025e8:	b538      	push	{r3, r4, r5, lr}
 80025ea:	690b      	ldr	r3, [r1, #16]
 80025ec:	4605      	mov	r5, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	b913      	cbnz	r3, 80025f8 <_fflush_r+0x10>
 80025f2:	2500      	movs	r5, #0
 80025f4:	4628      	mov	r0, r5
 80025f6:	bd38      	pop	{r3, r4, r5, pc}
 80025f8:	b118      	cbz	r0, 8002602 <_fflush_r+0x1a>
 80025fa:	6a03      	ldr	r3, [r0, #32]
 80025fc:	b90b      	cbnz	r3, 8002602 <_fflush_r+0x1a>
 80025fe:	f7ff fa9b 	bl	8001b38 <__sinit>
 8002602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f3      	beq.n	80025f2 <_fflush_r+0xa>
 800260a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800260c:	07d0      	lsls	r0, r2, #31
 800260e:	d404      	bmi.n	800261a <_fflush_r+0x32>
 8002610:	0599      	lsls	r1, r3, #22
 8002612:	d402      	bmi.n	800261a <_fflush_r+0x32>
 8002614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002616:	f7ff fb93 	bl	8001d40 <__retarget_lock_acquire_recursive>
 800261a:	4628      	mov	r0, r5
 800261c:	4621      	mov	r1, r4
 800261e:	f7ff ff5d 	bl	80024dc <__sflush_r>
 8002622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002624:	07da      	lsls	r2, r3, #31
 8002626:	4605      	mov	r5, r0
 8002628:	d4e4      	bmi.n	80025f4 <_fflush_r+0xc>
 800262a:	89a3      	ldrh	r3, [r4, #12]
 800262c:	059b      	lsls	r3, r3, #22
 800262e:	d4e1      	bmi.n	80025f4 <_fflush_r+0xc>
 8002630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002632:	f7ff fb86 	bl	8001d42 <__retarget_lock_release_recursive>
 8002636:	e7dd      	b.n	80025f4 <_fflush_r+0xc>

08002638 <__swbuf_r>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	460e      	mov	r6, r1
 800263c:	4614      	mov	r4, r2
 800263e:	4605      	mov	r5, r0
 8002640:	b118      	cbz	r0, 800264a <__swbuf_r+0x12>
 8002642:	6a03      	ldr	r3, [r0, #32]
 8002644:	b90b      	cbnz	r3, 800264a <__swbuf_r+0x12>
 8002646:	f7ff fa77 	bl	8001b38 <__sinit>
 800264a:	69a3      	ldr	r3, [r4, #24]
 800264c:	60a3      	str	r3, [r4, #8]
 800264e:	89a3      	ldrh	r3, [r4, #12]
 8002650:	071a      	lsls	r2, r3, #28
 8002652:	d525      	bpl.n	80026a0 <__swbuf_r+0x68>
 8002654:	6923      	ldr	r3, [r4, #16]
 8002656:	b31b      	cbz	r3, 80026a0 <__swbuf_r+0x68>
 8002658:	6823      	ldr	r3, [r4, #0]
 800265a:	6922      	ldr	r2, [r4, #16]
 800265c:	1a98      	subs	r0, r3, r2
 800265e:	6963      	ldr	r3, [r4, #20]
 8002660:	b2f6      	uxtb	r6, r6
 8002662:	4283      	cmp	r3, r0
 8002664:	4637      	mov	r7, r6
 8002666:	dc04      	bgt.n	8002672 <__swbuf_r+0x3a>
 8002668:	4621      	mov	r1, r4
 800266a:	4628      	mov	r0, r5
 800266c:	f7ff ffbc 	bl	80025e8 <_fflush_r>
 8002670:	b9e0      	cbnz	r0, 80026ac <__swbuf_r+0x74>
 8002672:	68a3      	ldr	r3, [r4, #8]
 8002674:	3b01      	subs	r3, #1
 8002676:	60a3      	str	r3, [r4, #8]
 8002678:	6823      	ldr	r3, [r4, #0]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	6022      	str	r2, [r4, #0]
 800267e:	701e      	strb	r6, [r3, #0]
 8002680:	6962      	ldr	r2, [r4, #20]
 8002682:	1c43      	adds	r3, r0, #1
 8002684:	429a      	cmp	r2, r3
 8002686:	d004      	beq.n	8002692 <__swbuf_r+0x5a>
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	07db      	lsls	r3, r3, #31
 800268c:	d506      	bpl.n	800269c <__swbuf_r+0x64>
 800268e:	2e0a      	cmp	r6, #10
 8002690:	d104      	bne.n	800269c <__swbuf_r+0x64>
 8002692:	4621      	mov	r1, r4
 8002694:	4628      	mov	r0, r5
 8002696:	f7ff ffa7 	bl	80025e8 <_fflush_r>
 800269a:	b938      	cbnz	r0, 80026ac <__swbuf_r+0x74>
 800269c:	4638      	mov	r0, r7
 800269e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026a0:	4621      	mov	r1, r4
 80026a2:	4628      	mov	r0, r5
 80026a4:	f000 f806 	bl	80026b4 <__swsetup_r>
 80026a8:	2800      	cmp	r0, #0
 80026aa:	d0d5      	beq.n	8002658 <__swbuf_r+0x20>
 80026ac:	f04f 37ff 	mov.w	r7, #4294967295
 80026b0:	e7f4      	b.n	800269c <__swbuf_r+0x64>
	...

080026b4 <__swsetup_r>:
 80026b4:	b538      	push	{r3, r4, r5, lr}
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <__swsetup_r+0xac>)
 80026b8:	4605      	mov	r5, r0
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	460c      	mov	r4, r1
 80026be:	b118      	cbz	r0, 80026c8 <__swsetup_r+0x14>
 80026c0:	6a03      	ldr	r3, [r0, #32]
 80026c2:	b90b      	cbnz	r3, 80026c8 <__swsetup_r+0x14>
 80026c4:	f7ff fa38 	bl	8001b38 <__sinit>
 80026c8:	89a3      	ldrh	r3, [r4, #12]
 80026ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026ce:	0718      	lsls	r0, r3, #28
 80026d0:	d422      	bmi.n	8002718 <__swsetup_r+0x64>
 80026d2:	06d9      	lsls	r1, r3, #27
 80026d4:	d407      	bmi.n	80026e6 <__swsetup_r+0x32>
 80026d6:	2309      	movs	r3, #9
 80026d8:	602b      	str	r3, [r5, #0]
 80026da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026de:	81a3      	strh	r3, [r4, #12]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	e034      	b.n	8002750 <__swsetup_r+0x9c>
 80026e6:	0758      	lsls	r0, r3, #29
 80026e8:	d512      	bpl.n	8002710 <__swsetup_r+0x5c>
 80026ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80026ec:	b141      	cbz	r1, 8002700 <__swsetup_r+0x4c>
 80026ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026f2:	4299      	cmp	r1, r3
 80026f4:	d002      	beq.n	80026fc <__swsetup_r+0x48>
 80026f6:	4628      	mov	r0, r5
 80026f8:	f7ff fb24 	bl	8001d44 <_free_r>
 80026fc:	2300      	movs	r3, #0
 80026fe:	6363      	str	r3, [r4, #52]	; 0x34
 8002700:	89a3      	ldrh	r3, [r4, #12]
 8002702:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002706:	81a3      	strh	r3, [r4, #12]
 8002708:	2300      	movs	r3, #0
 800270a:	6063      	str	r3, [r4, #4]
 800270c:	6923      	ldr	r3, [r4, #16]
 800270e:	6023      	str	r3, [r4, #0]
 8002710:	89a3      	ldrh	r3, [r4, #12]
 8002712:	f043 0308 	orr.w	r3, r3, #8
 8002716:	81a3      	strh	r3, [r4, #12]
 8002718:	6923      	ldr	r3, [r4, #16]
 800271a:	b94b      	cbnz	r3, 8002730 <__swsetup_r+0x7c>
 800271c:	89a3      	ldrh	r3, [r4, #12]
 800271e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002726:	d003      	beq.n	8002730 <__swsetup_r+0x7c>
 8002728:	4621      	mov	r1, r4
 800272a:	4628      	mov	r0, r5
 800272c:	f000 f850 	bl	80027d0 <__smakebuf_r>
 8002730:	89a0      	ldrh	r0, [r4, #12]
 8002732:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002736:	f010 0301 	ands.w	r3, r0, #1
 800273a:	d00a      	beq.n	8002752 <__swsetup_r+0x9e>
 800273c:	2300      	movs	r3, #0
 800273e:	60a3      	str	r3, [r4, #8]
 8002740:	6963      	ldr	r3, [r4, #20]
 8002742:	425b      	negs	r3, r3
 8002744:	61a3      	str	r3, [r4, #24]
 8002746:	6923      	ldr	r3, [r4, #16]
 8002748:	b943      	cbnz	r3, 800275c <__swsetup_r+0xa8>
 800274a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800274e:	d1c4      	bne.n	80026da <__swsetup_r+0x26>
 8002750:	bd38      	pop	{r3, r4, r5, pc}
 8002752:	0781      	lsls	r1, r0, #30
 8002754:	bf58      	it	pl
 8002756:	6963      	ldrpl	r3, [r4, #20]
 8002758:	60a3      	str	r3, [r4, #8]
 800275a:	e7f4      	b.n	8002746 <__swsetup_r+0x92>
 800275c:	2000      	movs	r0, #0
 800275e:	e7f7      	b.n	8002750 <__swsetup_r+0x9c>
 8002760:	20000068 	.word	0x20000068

08002764 <_sbrk_r>:
 8002764:	b538      	push	{r3, r4, r5, lr}
 8002766:	4d06      	ldr	r5, [pc, #24]	; (8002780 <_sbrk_r+0x1c>)
 8002768:	2300      	movs	r3, #0
 800276a:	4604      	mov	r4, r0
 800276c:	4608      	mov	r0, r1
 800276e:	602b      	str	r3, [r5, #0]
 8002770:	f7ff f8e2 	bl	8001938 <_sbrk>
 8002774:	1c43      	adds	r3, r0, #1
 8002776:	d102      	bne.n	800277e <_sbrk_r+0x1a>
 8002778:	682b      	ldr	r3, [r5, #0]
 800277a:	b103      	cbz	r3, 800277e <_sbrk_r+0x1a>
 800277c:	6023      	str	r3, [r4, #0]
 800277e:	bd38      	pop	{r3, r4, r5, pc}
 8002780:	200001cc 	.word	0x200001cc

08002784 <__swhatbuf_r>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	460c      	mov	r4, r1
 8002788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800278c:	2900      	cmp	r1, #0
 800278e:	b096      	sub	sp, #88	; 0x58
 8002790:	4615      	mov	r5, r2
 8002792:	461e      	mov	r6, r3
 8002794:	da0d      	bge.n	80027b2 <__swhatbuf_r+0x2e>
 8002796:	89a3      	ldrh	r3, [r4, #12]
 8002798:	f013 0f80 	tst.w	r3, #128	; 0x80
 800279c:	f04f 0100 	mov.w	r1, #0
 80027a0:	bf0c      	ite	eq
 80027a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80027a6:	2340      	movne	r3, #64	; 0x40
 80027a8:	2000      	movs	r0, #0
 80027aa:	6031      	str	r1, [r6, #0]
 80027ac:	602b      	str	r3, [r5, #0]
 80027ae:	b016      	add	sp, #88	; 0x58
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	466a      	mov	r2, sp
 80027b4:	f000 f848 	bl	8002848 <_fstat_r>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	dbec      	blt.n	8002796 <__swhatbuf_r+0x12>
 80027bc:	9901      	ldr	r1, [sp, #4]
 80027be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80027c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80027c6:	4259      	negs	r1, r3
 80027c8:	4159      	adcs	r1, r3
 80027ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ce:	e7eb      	b.n	80027a8 <__swhatbuf_r+0x24>

080027d0 <__smakebuf_r>:
 80027d0:	898b      	ldrh	r3, [r1, #12]
 80027d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027d4:	079d      	lsls	r5, r3, #30
 80027d6:	4606      	mov	r6, r0
 80027d8:	460c      	mov	r4, r1
 80027da:	d507      	bpl.n	80027ec <__smakebuf_r+0x1c>
 80027dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027e0:	6023      	str	r3, [r4, #0]
 80027e2:	6123      	str	r3, [r4, #16]
 80027e4:	2301      	movs	r3, #1
 80027e6:	6163      	str	r3, [r4, #20]
 80027e8:	b002      	add	sp, #8
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	ab01      	add	r3, sp, #4
 80027ee:	466a      	mov	r2, sp
 80027f0:	f7ff ffc8 	bl	8002784 <__swhatbuf_r>
 80027f4:	9900      	ldr	r1, [sp, #0]
 80027f6:	4605      	mov	r5, r0
 80027f8:	4630      	mov	r0, r6
 80027fa:	f7ff fb0f 	bl	8001e1c <_malloc_r>
 80027fe:	b948      	cbnz	r0, 8002814 <__smakebuf_r+0x44>
 8002800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002804:	059a      	lsls	r2, r3, #22
 8002806:	d4ef      	bmi.n	80027e8 <__smakebuf_r+0x18>
 8002808:	f023 0303 	bic.w	r3, r3, #3
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	81a3      	strh	r3, [r4, #12]
 8002812:	e7e3      	b.n	80027dc <__smakebuf_r+0xc>
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	6020      	str	r0, [r4, #0]
 8002818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281c:	81a3      	strh	r3, [r4, #12]
 800281e:	9b00      	ldr	r3, [sp, #0]
 8002820:	6163      	str	r3, [r4, #20]
 8002822:	9b01      	ldr	r3, [sp, #4]
 8002824:	6120      	str	r0, [r4, #16]
 8002826:	b15b      	cbz	r3, 8002840 <__smakebuf_r+0x70>
 8002828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800282c:	4630      	mov	r0, r6
 800282e:	f000 f81d 	bl	800286c <_isatty_r>
 8002832:	b128      	cbz	r0, 8002840 <__smakebuf_r+0x70>
 8002834:	89a3      	ldrh	r3, [r4, #12]
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	81a3      	strh	r3, [r4, #12]
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	431d      	orrs	r5, r3
 8002844:	81a5      	strh	r5, [r4, #12]
 8002846:	e7cf      	b.n	80027e8 <__smakebuf_r+0x18>

08002848 <_fstat_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4d07      	ldr	r5, [pc, #28]	; (8002868 <_fstat_r+0x20>)
 800284c:	2300      	movs	r3, #0
 800284e:	4604      	mov	r4, r0
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	602b      	str	r3, [r5, #0]
 8002856:	f7ff f847 	bl	80018e8 <_fstat>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	d102      	bne.n	8002864 <_fstat_r+0x1c>
 800285e:	682b      	ldr	r3, [r5, #0]
 8002860:	b103      	cbz	r3, 8002864 <_fstat_r+0x1c>
 8002862:	6023      	str	r3, [r4, #0]
 8002864:	bd38      	pop	{r3, r4, r5, pc}
 8002866:	bf00      	nop
 8002868:	200001cc 	.word	0x200001cc

0800286c <_isatty_r>:
 800286c:	b538      	push	{r3, r4, r5, lr}
 800286e:	4d06      	ldr	r5, [pc, #24]	; (8002888 <_isatty_r+0x1c>)
 8002870:	2300      	movs	r3, #0
 8002872:	4604      	mov	r4, r0
 8002874:	4608      	mov	r0, r1
 8002876:	602b      	str	r3, [r5, #0]
 8002878:	f7ff f846 	bl	8001908 <_isatty>
 800287c:	1c43      	adds	r3, r0, #1
 800287e:	d102      	bne.n	8002886 <_isatty_r+0x1a>
 8002880:	682b      	ldr	r3, [r5, #0]
 8002882:	b103      	cbz	r3, 8002886 <_isatty_r+0x1a>
 8002884:	6023      	str	r3, [r4, #0]
 8002886:	bd38      	pop	{r3, r4, r5, pc}
 8002888:	200001cc 	.word	0x200001cc

0800288c <_init>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr

08002898 <_fini>:
 8002898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800289a:	bf00      	nop
 800289c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289e:	bc08      	pop	{r3}
 80028a0:	469e      	mov	lr, r3
 80028a2:	4770      	bx	lr
