
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000271c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080028bc  080028bc  000128bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002910  08002910  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002910  08002910  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002910  08002910  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000006c  08002984  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002984  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002bcd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dc6  00000000  00000000  00022cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  00023a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002e8  00000000  00000000  00023eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000313c  00000000  00000000  00024198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000376e  00000000  00000000  000272d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084983  00000000  00000000  0002aa42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000015f0  00000000  00000000  000af3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b09b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080028a4 	.word	0x080028a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080028a4 	.word	0x080028a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <ADC_Init>:
#include "ADC_PRIV.h"
#include "ADC_CONFG.h"
#include "ADC.h"
#include "LCD.h"

void ADC_Init(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

    // Enable the ADC peripheral clock
	Enable_peripheral(RCC_APB2ENR_ADC1 ,RCC_APB2 );
 8000ac0:	2103      	movs	r1, #3
 8000ac2:	2008      	movs	r0, #8
 8000ac4:	f000 fdae 	bl	8001624 <Enable_peripheral>
	//	//A port clock enable
	MGPIO_vSetPinMode(GPIO_PORTA, 0, GPIO_MODE_ANALOG);
 8000ac8:	220b      	movs	r2, #11
 8000aca:	2100      	movs	r1, #0
 8000acc:	2000      	movs	r0, #0
 8000ace:	f000 f853 	bl	8000b78 <MGPIO_vSetPinMode>
    // Configure the ADC for single conversion mode
    ADC1->ADC_CR1 = 0; // Reset CR1 register
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <ADC_Init+0x6c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
    ADC1->ADC_CR2 = 0; // Reset CR2 register
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <ADC_Init+0x6c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
	// Configure ADC for single conversion mode

    ADC1->ADC_CR2 &= ~(1U << 11); // Set CONT = 0 for single conversion
 8000ade:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <ADC_Init+0x6c>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4a11      	ldr	r2, [pc, #68]	; (8000b28 <ADC_Init+0x6c>)
 8000ae4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000ae8:	6093      	str	r3, [r2, #8]
    ADC1->ADC_CR1 &= ~(0x3U << 24); // Clear RES bits
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <ADC_Init+0x6c>)
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <ADC_Init+0x6c>)
 8000af0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000af4:	6053      	str	r3, [r2, #4]
	ADC1->ADC_CR1 |= (RES << 24);
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <ADC_Init+0x6c>)
 8000af8:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <ADC_Init+0x6c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	6053      	str	r3, [r2, #4]
   #if channel_num<10
   ADC1->ADC_SMPR2 &=~ (0x7U << (channel_num*3));
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <ADC_Init+0x6c>)
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <ADC_Init+0x6c>)
 8000b04:	f023 0307 	bic.w	r3, r3, #7
 8000b08:	6113      	str	r3, [r2, #16]
	ADC1->ADC_SMPR2 |= (SAMPLE_CYC << (channel_num*3));
 8000b0a:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <ADC_Init+0x6c>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	4a06      	ldr	r2, [pc, #24]	; (8000b28 <ADC_Init+0x6c>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6113      	str	r3, [r2, #16]
	#else
	ADC1->ADC_SMPR1 &=~ (0x7U <<  ((channel_num-10)*3));
	ADC1->ADC_SMPR1 |= (SAMPLE_CYC <<  ((channel_num-10)*3));
	#endif
	ADC1->ADC_CR2 |= 1U;
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <ADC_Init+0x6c>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	4a03      	ldr	r2, [pc, #12]	; (8000b28 <ADC_Init+0x6c>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6093      	str	r3, [r2, #8]
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012000 	.word	0x40012000

08000b2c <ADC_ReadChannel>:

float32 ADC_ReadChannel(uint32 channel) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
    // Configure the channel
    ADC1->ADC_SQR1= (channel & 0x1F);
 8000b34:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <ADC_ReadChannel+0x48>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f003 031f 	and.w	r3, r3, #31
 8000b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Start a conversion
    ADC1-> ADC_CR2 |= (1 << 30); // Set the SWSTART bit
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <ADC_ReadChannel+0x48>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <ADC_ReadChannel+0x48>)
 8000b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000b48:	6093      	str	r3, [r2, #8]
    // Wait for the conversion to complete
    while (!(ADC1->ADC_SR & (1 << 1))); // Check EOC bit in ADC_SR
 8000b4a:	bf00      	nop
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <ADC_ReadChannel+0x48>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <ADC_ReadChannel+0x20>


    // Read and return the ADC conversion result
    return ADC1->ADC_DR;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <ADC_ReadChannel+0x48>)
 8000b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5c:	ee07 3a90 	vmov	s15, r3
 8000b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8000b64:	eeb0 0a67 	vmov.f32	s0, s15
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	40012000 	.word	0x40012000

08000b78 <MGPIO_vSetPinMode>:
#include"GPIO_CONFG.h"
#include "STD_Types.h"
#include "BIT_Math.h"


tenuErrorStatus MGPIO_vSetPinMode(uint8 u8_PortId, uint8 u8_PinNo , uint8 u8_PinMode){
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
 8000b82:	460b      	mov	r3, r1
 8000b84:	71bb      	strb	r3, [r7, #6]
 8000b86:	4613      	mov	r3, r2
 8000b88:	717b      	strb	r3, [r7, #5]
if (u8_PinMode==GPIO_MODE_INPUT ||u8_PinMode==GPIO_MODE_OUTPUT ||u8_PinMode==GPIO_MODE_ALTFUN
 8000b8a:	797b      	ldrb	r3, [r7, #5]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d008      	beq.n	8000ba2 <MGPIO_vSetPinMode+0x2a>
 8000b90:	797b      	ldrb	r3, [r7, #5]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <MGPIO_vSetPinMode+0x2a>
 8000b96:	797b      	ldrb	r3, [r7, #5]
 8000b98:	2b0a      	cmp	r3, #10
 8000b9a:	d002      	beq.n	8000ba2 <MGPIO_vSetPinMode+0x2a>
|| u8_PinMode==GPIO_MODE_ANALOG )
 8000b9c:	797b      	ldrb	r3, [r7, #5]
 8000b9e:	2b0b      	cmp	r3, #11
 8000ba0:	d154      	bne.n	8000c4c <MGPIO_vSetPinMode+0xd4>
{
   switch(u8_PortId){
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d038      	beq.n	8000c1a <MGPIO_vSetPinMode+0xa2>
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	dc4f      	bgt.n	8000c4c <MGPIO_vSetPinMode+0xd4>
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d002      	beq.n	8000bb6 <MGPIO_vSetPinMode+0x3e>
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d019      	beq.n	8000be8 <MGPIO_vSetPinMode+0x70>
 8000bb4:	e04a      	b.n	8000c4c <MGPIO_vSetPinMode+0xd4>
    case GPIO_PORTA :
            GPIOA ->GPIOx_MODER &= ~(0b11<<(u8_PinNo*2));
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	79ba      	ldrb	r2, [r7, #6]
 8000bbc:	0052      	lsls	r2, r2, #1
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	43d2      	mvns	r2, r2
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4a24      	ldr	r2, [pc, #144]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000bca:	400b      	ands	r3, r1
 8000bcc:	6013      	str	r3, [r2, #0]
            GPIOA ->GPIOx_MODER |=(u8_PinMode<<(u8_PinNo*2)); 
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	7979      	ldrb	r1, [r7, #5]
 8000bd4:	79ba      	ldrb	r2, [r7, #6]
 8000bd6:	0052      	lsls	r2, r2, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6013      	str	r3, [r2, #0]
            return E_OK; 
 8000be4:	2300      	movs	r3, #0
 8000be6:	e032      	b.n	8000c4e <MGPIO_vSetPinMode+0xd6>

       
    case GPIO_PORTB:
            GPIOB ->GPIOx_MODER &= ~(0b11<<(u8_PinNo*2));
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MGPIO_vSetPinMode+0xe8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	0052      	lsls	r2, r2, #1
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	43d2      	mvns	r2, r2
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <MGPIO_vSetPinMode+0xe8>)
 8000bfc:	400b      	ands	r3, r1
 8000bfe:	6013      	str	r3, [r2, #0]
            GPIOB ->GPIOx_MODER |=(u8_PinMode<<(u8_PinNo*2));
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MGPIO_vSetPinMode+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	7979      	ldrb	r1, [r7, #5]
 8000c06:	79ba      	ldrb	r2, [r7, #6]
 8000c08:	0052      	lsls	r2, r2, #1
 8000c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4a13      	ldr	r2, [pc, #76]	; (8000c60 <MGPIO_vSetPinMode+0xe8>)
 8000c12:	430b      	orrs	r3, r1
 8000c14:	6013      	str	r3, [r2, #0]
            return E_OK;
 8000c16:	2300      	movs	r3, #0
 8000c18:	e019      	b.n	8000c4e <MGPIO_vSetPinMode+0xd6>
    case GPIO_PORTC:
            GPIOC ->GPIOx_MODER &= ~(0b11<<(u8_PinNo*2));
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	79ba      	ldrb	r2, [r7, #6]
 8000c20:	0052      	lsls	r2, r2, #1
 8000c22:	2103      	movs	r1, #3
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000c2e:	400b      	ands	r3, r1
 8000c30:	6013      	str	r3, [r2, #0]
            GPIOC ->GPIOx_MODER |=(u8_PinMode<<(u8_PinNo*2));
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	7979      	ldrb	r1, [r7, #5]
 8000c38:	79ba      	ldrb	r2, [r7, #6]
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	4611      	mov	r1, r2
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <MGPIO_vSetPinMode+0xe4>)
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
            return E_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	e000      	b.n	8000c4e <MGPIO_vSetPinMode+0xd6>
 }
}
   return E_NOK_CONFIG_PARM_ERROR;
 8000c4c:	2304      	movs	r3, #4
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020400 	.word	0x40020400

08000c64 <MGPIO_u8SetPinVal>:
 }
return L_u8PinVal;
}


void MGPIO_u8SetPinVal(uint8 u8_PortId,uint8 u8_PinNo, uint8 u8_Pin_Value ){
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
 8000c6e:	460b      	mov	r3, r1
 8000c70:	71bb      	strb	r3, [r7, #6]
 8000c72:	4613      	mov	r3, r2
 8000c74:	717b      	strb	r3, [r7, #5]
    if(u8_Pin_Value==GPIO_HIGH){
 8000c76:	797b      	ldrb	r3, [r7, #5]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d12a      	bne.n	8000cd2 <MGPIO_u8SetPinVal+0x6e>
         switch(u8_PortId){
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d01c      	beq.n	8000cbc <MGPIO_u8SetPinVal+0x58>
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	dc53      	bgt.n	8000d2e <MGPIO_u8SetPinVal+0xca>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <MGPIO_u8SetPinVal+0x2c>
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d00b      	beq.n	8000ca6 <MGPIO_u8SetPinVal+0x42>
                CLR_BIT(GPIOC->GPIOx_ODR,u8_PinNo)   ;   
                break;
        }

    }
}
 8000c8e:	e04e      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
                SET_BIT(GPIOA->GPIOx_ODR,u8_PinNo)   ;
 8000c90:	4b2a      	ldr	r3, [pc, #168]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000c92:	695b      	ldr	r3, [r3, #20]
 8000c94:	79ba      	ldrb	r2, [r7, #6]
 8000c96:	2101      	movs	r1, #1
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	4611      	mov	r1, r2
 8000c9e:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000ca0:	430b      	orrs	r3, r1
 8000ca2:	6153      	str	r3, [r2, #20]
                break;
 8000ca4:	e043      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
                SET_BIT(GPIOB->GPIOx_ODR,u8_PinNo)   ; 
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MGPIO_u8SetPinVal+0xdc>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	79ba      	ldrb	r2, [r7, #6]
 8000cac:	2101      	movs	r1, #1
 8000cae:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4a22      	ldr	r2, [pc, #136]	; (8000d40 <MGPIO_u8SetPinVal+0xdc>)
 8000cb6:	430b      	orrs	r3, r1
 8000cb8:	6153      	str	r3, [r2, #20]
                break;
 8000cba:	e038      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
                SET_BIT(GPIOC->GPIOx_ODR,u8_PinNo)   ;   
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	79ba      	ldrb	r2, [r7, #6]
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc8:	4611      	mov	r1, r2
 8000cca:	4a1c      	ldr	r2, [pc, #112]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	6153      	str	r3, [r2, #20]
                break;
 8000cd0:	e02d      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
         switch(u8_PortId){
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	d01e      	beq.n	8000d16 <MGPIO_u8SetPinVal+0xb2>
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	dc28      	bgt.n	8000d2e <MGPIO_u8SetPinVal+0xca>
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <MGPIO_u8SetPinVal+0x82>
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d00c      	beq.n	8000cfe <MGPIO_u8SetPinVal+0x9a>
}
 8000ce4:	e023      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
                CLR_BIT(GPIOA->GPIOx_ODR,u8_PinNo)   ;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	79ba      	ldrb	r2, [r7, #6]
 8000cec:	2101      	movs	r1, #1
 8000cee:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	6153      	str	r3, [r2, #20]
                break;
 8000cfc:	e017      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
                CLR_BIT(GPIOB->GPIOx_ODR,u8_PinNo)   ; 
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MGPIO_u8SetPinVal+0xdc>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	79ba      	ldrb	r2, [r7, #6]
 8000d04:	2101      	movs	r1, #1
 8000d06:	fa01 f202 	lsl.w	r2, r1, r2
 8000d0a:	43d2      	mvns	r2, r2
 8000d0c:	4611      	mov	r1, r2
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <MGPIO_u8SetPinVal+0xdc>)
 8000d10:	400b      	ands	r3, r1
 8000d12:	6153      	str	r3, [r2, #20]
                break;
 8000d14:	e00b      	b.n	8000d2e <MGPIO_u8SetPinVal+0xca>
                CLR_BIT(GPIOC->GPIOx_ODR,u8_PinNo)   ;   
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	79ba      	ldrb	r2, [r7, #6]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	43d2      	mvns	r2, r2
 8000d24:	4611      	mov	r1, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <MGPIO_u8SetPinVal+0xd8>)
 8000d28:	400b      	ands	r3, r1
 8000d2a:	6153      	str	r3, [r2, #20]
                break;
 8000d2c:	bf00      	nop
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400

08000d44 <LCD_voidInit>:


static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy) ;

void LCD_voidInit(void) 
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc  ;
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	e15c      	b.n	800100a <LCD_voidInit+0x2c6>
	{

		MSTK_voidDelayMsec(300);
 8000d50:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000d54:	f000 fcfc 	bl	8001750 <MSTK_voidDelayMsec>
		if (LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	49b0      	ldr	r1, [pc, #704]	; (800101c <LCD_voidInit+0x2d8>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	f040 8091 	bne.w	8000e96 <LCD_voidInit+0x152>
		{

			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
 8000d74:	79fa      	ldrb	r2, [r7, #7]
 8000d76:	49a9      	ldr	r1, [pc, #676]	; (800101c <LCD_voidInit+0x2d8>)
 8000d78:	4613      	mov	r3, r2
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	440b      	add	r3, r1
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	b25b      	sxtb	r3, r3
 8000d8e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000d92:	b259      	sxtb	r1, r3
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<2 ; 
 8000d94:	79fa      	ldrb	r2, [r7, #7]
 8000d96:	48a1      	ldr	r0, [pc, #644]	; (800101c <LCD_voidInit+0x2d8>)
 8000d98:	4613      	mov	r3, r2
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	4413      	add	r3, r2
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	4403      	add	r3, r0
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	009b      	lsls	r3, r3, #2
			u8CmdLoc = 0x30|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<3 | 
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	430b      	orrs	r3, r1
 8000db0:	b25b      	sxtb	r3, r3
 8000db2:	71bb      	strb	r3, [r7, #6]
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
 8000db4:	79ba      	ldrb	r2, [r7, #6]
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fa6c 	bl	8001298 <LCD_enuWriteCmd>

			

		   MSTK_voidDelayMsec(20);
 8000dc0:	2014      	movs	r0, #20
 8000dc2:	f000 fcc5 	bl	8001750 <MSTK_voidDelayMsec>
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	4994      	ldr	r1, [pc, #592]	; (800101c <LCD_voidInit+0x2d8>)
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	440b      	add	r3, r1
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	b259      	sxtb	r1, r3
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
 8000de6:	79fa      	ldrb	r2, [r7, #7]
 8000de8:	488c      	ldr	r0, [pc, #560]	; (800101c <LCD_voidInit+0x2d8>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	4403      	add	r3, r0
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	005b      	lsls	r3, r3, #1
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
 8000dfe:	b25b      	sxtb	r3, r3
 8000e00:	430b      	orrs	r3, r1
 8000e02:	b259      	sxtb	r1, r3
							 LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<0 ;
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	4885      	ldr	r0, [pc, #532]	; (800101c <LCD_voidInit+0x2d8>)
 8000e08:	4613      	mov	r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4403      	add	r3, r0
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	b25b      	sxtb	r3, r3
                             LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<1 |
 8000e1c:	430b      	orrs	r3, r1
 8000e1e:	b25b      	sxtb	r3, r3
			u8CmdLoc = 0x08 |LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<2 |
 8000e20:	71bb      	strb	r3, [r7, #6]
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
 8000e22:	79ba      	ldrb	r2, [r7, #6]
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fa35 	bl	8001298 <LCD_enuWriteCmd>
		    MSTK_voidDelayMsec(20);
 8000e2e:	2014      	movs	r0, #20
 8000e30:	f000 fc8e 	bl	8001750 <MSTK_voidDelayMsec>
			
			LCD_enuWriteCmd(u8CntrLoc , LCD_u8CLEAR);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2101      	movs	r1, #1
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 fa2d 	bl	8001298 <LCD_enuWriteCmd>
		     MSTK_voidDelayMsec(20);
 8000e3e:	2014      	movs	r0, #20
 8000e40:	f000 fc86 	bl	8001750 <MSTK_voidDelayMsec>
			
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
 8000e44:	79fa      	ldrb	r2, [r7, #7]
 8000e46:	4975      	ldr	r1, [pc, #468]	; (800101c <LCD_voidInit+0x2d8>)
 8000e48:	4613      	mov	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	4413      	add	r3, r2
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	b25b      	sxtb	r3, r3
 8000e5e:	f043 0304 	orr.w	r3, r3, #4
 8000e62:	b259      	sxtb	r1, r3
						    LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift<<0 ; 
 8000e64:	79fa      	ldrb	r2, [r7, #7]
 8000e66:	486d      	ldr	r0, [pc, #436]	; (800101c <LCD_voidInit+0x2d8>)
 8000e68:	4613      	mov	r3, r2
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	4413      	add	r3, r2
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	4403      	add	r3, r0
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	b25b      	sxtb	r3, r3
			u8CmdLoc = 0x04|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment   <<1 | 
 8000e7c:	430b      	orrs	r3, r1
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	71bb      	strb	r3, [r7, #6]
			
			LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc);
 8000e82:	79ba      	ldrb	r2, [r7, #6]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4611      	mov	r1, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 fa05 	bl	8001298 <LCD_enuWriteCmd>

			 MSTK_voidDelayMsec(20);
 8000e8e:	2014      	movs	r0, #20
 8000e90:	f000 fc5e 	bl	8001750 <MSTK_voidDelayMsec>
 8000e94:	e0b6      	b.n	8001004 <LCD_voidInit+0x2c0>

		}
		else 
		{

				LCD_enuWriteCmd(u8CntrLoc , 0x20);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f9fc 	bl	8001298 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000ea0:	2014      	movs	r0, #20
 8000ea2:	f000 fc55 	bl	8001750 <MSTK_voidDelayMsec>
				LCD_enuWriteCmd(u8CntrLoc , 0x20);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2120      	movs	r1, #32
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 f9f4 	bl	8001298 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f000 fc4d 	bl	8001750 <MSTK_voidDelayMsec>
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
 8000eb6:	79fa      	ldrb	r2, [r7, #7]
 8000eb8:	4958      	ldr	r1, [pc, #352]	; (800101c <LCD_voidInit+0x2d8>)
 8000eba:	4613      	mov	r3, r2
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	4413      	add	r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	01db      	lsls	r3, r3, #7
 8000ece:	b259      	sxtb	r1, r3
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8CharFont<<6 ; 
 8000ed0:	79fa      	ldrb	r2, [r7, #7]
 8000ed2:	4852      	ldr	r0, [pc, #328]	; (800101c <LCD_voidInit+0x2d8>)
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4403      	add	r3, r0
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	019b      	lsls	r3, r3, #6
				u8CmdLoc = 0x00|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8PanLine <<7 | 
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	430b      	orrs	r3, r1
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	71bb      	strb	r3, [r7, #6]
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
 8000ef0:	79ba      	ldrb	r2, [r7, #6]
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f000 f9ce 	bl	8001298 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000efc:	2014      	movs	r0, #20
 8000efe:	f000 fc27 	bl	8001750 <MSTK_voidDelayMsec>
				 
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f9c6 	bl	8001298 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000f0c:	2014      	movs	r0, #20
 8000f0e:	f000 fc1f 	bl	8001750 <MSTK_voidDelayMsec>
				 
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	4941      	ldr	r1, [pc, #260]	; (800101c <LCD_voidInit+0x2d8>)
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	440b      	add	r3, r1
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	019b      	lsls	r3, r3, #6
 8000f2a:	b25b      	sxtb	r3, r3
 8000f2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f30:	b259      	sxtb	r1, r3
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	4839      	ldr	r0, [pc, #228]	; (800101c <LCD_voidInit+0x2d8>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4403      	add	r3, r0
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	015b      	lsls	r3, r3, #5
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
 8000f4a:	b25b      	sxtb	r3, r3
 8000f4c:	430b      	orrs	r3, r1
 8000f4e:	b259      	sxtb	r1, r3
								LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Blink   <<4 ; 
 8000f50:	79fa      	ldrb	r2, [r7, #7]
 8000f52:	4832      	ldr	r0, [pc, #200]	; (800101c <LCD_voidInit+0x2d8>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4403      	add	r3, r0
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	011b      	lsls	r3, r3, #4
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Cursor  <<5 |
 8000f68:	b25b      	sxtb	r3, r3
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	b25b      	sxtb	r3, r3
				u8CmdLoc = 0x80|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Display <<6 | 
 8000f6e:	71bb      	strb	r3, [r7, #6]
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
 8000f70:	79ba      	ldrb	r2, [r7, #6]
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f98e 	bl	8001298 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000f7c:	2014      	movs	r0, #20
 8000f7e:	f000 fbe7 	bl	8001750 <MSTK_voidDelayMsec>
				
				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f986 	bl	8001298 <LCD_enuWriteCmd>
			    MSTK_voidDelayMsec(20);
 8000f8c:	2014      	movs	r0, #20
 8000f8e:	f000 fbdf 	bl	8001750 <MSTK_voidDelayMsec>
				LCD_enuWriteCmd(u8CntrLoc , 0x10 );
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2110      	movs	r1, #16
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f97e 	bl	8001298 <LCD_enuWriteCmd>
				 MSTK_voidDelayMsec(20);
 8000f9c:	2014      	movs	r0, #20
 8000f9e:	f000 fbd7 	bl	8001750 <MSTK_voidDelayMsec>

				LCD_enuWriteCmd(u8CntrLoc , 0x00 );
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f976 	bl	8001298 <LCD_enuWriteCmd>
			    MSTK_voidDelayMsec(20);
 8000fac:	2014      	movs	r0, #20
 8000fae:	f000 fbcf 	bl	8001750 <MSTK_voidDelayMsec>
				
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
 8000fb2:	79fa      	ldrb	r2, [r7, #7]
 8000fb4:	4919      	ldr	r1, [pc, #100]	; (800101c <LCD_voidInit+0x2d8>)
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	015b      	lsls	r3, r3, #5
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd0:	b259      	sxtb	r1, r3
						        LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8DisplayShift <<4 ; 
 8000fd2:	79fa      	ldrb	r2, [r7, #7]
 8000fd4:	4811      	ldr	r0, [pc, #68]	; (800101c <LCD_voidInit+0x2d8>)
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	4403      	add	r3, r0
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	011b      	lsls	r3, r3, #4
				u8CmdLoc = 0x40|LCD_astrCfg[u8CntrLoc].strLcdOpcfg.u8Increment    <<5 | 
 8000fea:	b25b      	sxtb	r3, r3
 8000fec:	430b      	orrs	r3, r1
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	71bb      	strb	r3, [r7, #6]
			
				LCD_enuWriteCmd(u8CntrLoc , u8CmdLoc );
 8000ff2:	79ba      	ldrb	r2, [r7, #6]
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f94d 	bl	8001298 <LCD_enuWriteCmd>
			     MSTK_voidDelayMsec(20);
 8000ffe:	2014      	movs	r0, #20
 8001000:	f000 fba6 	bl	8001750 <MSTK_voidDelayMsec>
	for (u8CntrLoc = 0 ; u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3301      	adds	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b00      	cmp	r3, #0
 800100e:	f43f ae9f 	beq.w	8000d50 <LCD_voidInit+0xc>
				
			
		}
		
	}
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000

08001020 <LCD_enuHelp>:



static tenuErrorStatus LCD_enuHelp(uint8 u8LcdNumCpy , uint8 u8LcdDataCmdCpy)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]
	tenuErrorStatus enuErrorStateLoc = E_OK ;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
	uint8 u8CntrLoc ;

	if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch<=15){
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	4997      	ldr	r1, [pc, #604]	; (8001294 <LCD_enuHelp+0x274>)
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3303      	adds	r3, #3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	d80e      	bhi.n	8001068 <LCD_enuHelp+0x48>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, GPIO_HIGH );
 800104a:	79fa      	ldrb	r2, [r7, #7]
 800104c:	4991      	ldr	r1, [pc, #580]	; (8001294 <LCD_enuHelp+0x274>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	3303      	adds	r3, #3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff fdff 	bl	8000c64 <MGPIO_u8SetPinVal>
 8001066:	e00f      	b.n	8001088 <LCD_enuHelp+0x68>

		}
		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch-16, GPIO_HIGH );
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	498a      	ldr	r1, [pc, #552]	; (8001294 <LCD_enuHelp+0x274>)
 800106c:	4613      	mov	r3, r2
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	4413      	add	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	440b      	add	r3, r1
 8001076:	3303      	adds	r3, #3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	3b10      	subs	r3, #16
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2201      	movs	r2, #1
 8001080:	4619      	mov	r1, r3
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fdee 	bl	8000c64 <MGPIO_u8SetPinVal>
		}

	if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite<=15){
 8001088:	79fa      	ldrb	r2, [r7, #7]
 800108a:	4982      	ldr	r1, [pc, #520]	; (8001294 <LCD_enuHelp+0x274>)
 800108c:	4613      	mov	r3, r2
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	4413      	add	r3, r2
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	440b      	add	r3, r1
 8001096:	3302      	adds	r3, #2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b0f      	cmp	r3, #15
 800109c:	d80e      	bhi.n	80010bc <LCD_enuHelp+0x9c>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite, GPIO_LOW );
 800109e:	79fa      	ldrb	r2, [r7, #7]
 80010a0:	497c      	ldr	r1, [pc, #496]	; (8001294 <LCD_enuHelp+0x274>)
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3302      	adds	r3, #2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff fdd5 	bl	8000c64 <MGPIO_u8SetPinVal>
 80010ba:	e00f      	b.n	80010dc <LCD_enuHelp+0xbc>
		}
		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8ReadWrite-16, GPIO_LOW );
 80010bc:	79fa      	ldrb	r2, [r7, #7]
 80010be:	4975      	ldr	r1, [pc, #468]	; (8001294 <LCD_enuHelp+0x274>)
 80010c0:	4613      	mov	r3, r2
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	3302      	adds	r3, #2
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	3b10      	subs	r3, #16
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	4619      	mov	r1, r3
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fdc4 	bl	8000c64 <MGPIO_u8SetPinVal>
		}

		
		if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_8BIT)
 80010dc:	79fa      	ldrb	r2, [r7, #7]
 80010de:	496d      	ldr	r1, [pc, #436]	; (8001294 <LCD_enuHelp+0x274>)
 80010e0:	4613      	mov	r3, r2
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d147      	bne.n	8001186 <LCD_enuHelp+0x166>
		{
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	73bb      	strb	r3, [r7, #14]
 80010fa:	e040      	b.n	800117e <LCD_enuHelp+0x15e>
			  {
				if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]<=15){
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	7bb9      	ldrb	r1, [r7, #14]
 8001100:	4864      	ldr	r0, [pc, #400]	; (8001294 <LCD_enuHelp+0x274>)
 8001102:	4613      	mov	r3, r2
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	4413      	add	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4403      	add	r3, r0
 800110c:	440b      	add	r3, r1
 800110e:	3304      	adds	r3, #4
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d817      	bhi.n	8001146 <LCD_enuHelp+0x126>
						MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 8001116:	79fa      	ldrb	r2, [r7, #7]
 8001118:	7bb9      	ldrb	r1, [r7, #14]
 800111a:	485e      	ldr	r0, [pc, #376]	; (8001294 <LCD_enuHelp+0x274>)
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4403      	add	r3, r0
 8001126:	440b      	add	r3, r1
 8001128:	3304      	adds	r3, #4
 800112a:	7819      	ldrb	r1, [r3, #0]
 800112c:	79ba      	ldrb	r2, [r7, #6]
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	fa42 f303 	asr.w	r3, r2, r3
 8001134:	b2db      	uxtb	r3, r3
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	b2db      	uxtb	r3, r3
 800113c:	461a      	mov	r2, r3
 800113e:	2000      	movs	r0, #0
 8001140:	f7ff fd90 	bl	8000c64 <MGPIO_u8SetPinVal>
 8001144:	e018      	b.n	8001178 <LCD_enuHelp+0x158>
					}
				else{
						MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]-16, GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 8001146:	79fa      	ldrb	r2, [r7, #7]
 8001148:	7bb9      	ldrb	r1, [r7, #14]
 800114a:	4852      	ldr	r0, [pc, #328]	; (8001294 <LCD_enuHelp+0x274>)
 800114c:	4613      	mov	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4413      	add	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4403      	add	r3, r0
 8001156:	440b      	add	r3, r1
 8001158:	3304      	adds	r3, #4
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3b10      	subs	r3, #16
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	79ba      	ldrb	r2, [r7, #6]
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	fa42 f303 	asr.w	r3, r2, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff fd76 	bl	8000c64 <MGPIO_u8SetPinVal>
			  for (u8CntrLoc = 0 ; u8CntrLoc < 8 ; u8CntrLoc++)
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	3301      	adds	r3, #1
 800117c:	73bb      	strb	r3, [r7, #14]
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	2b07      	cmp	r3, #7
 8001182:	d9bb      	bls.n	80010fc <LCD_enuHelp+0xdc>
 8001184:	e056      	b.n	8001234 <LCD_enuHelp+0x214>
					}	
				  
			  }
		}
		else if (LCD_astrCfg[u8LcdNumCpy].strLcdOpcfg.u8Mode == LCD_u8MODE_4BIT)
 8001186:	79fa      	ldrb	r2, [r7, #7]
 8001188:	4942      	ldr	r1, [pc, #264]	; (8001294 <LCD_enuHelp+0x274>)
 800118a:	4613      	mov	r3, r2
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	4413      	add	r3, r2
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	440b      	add	r3, r1
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b00      	cmp	r3, #0
 800119e:	d147      	bne.n	8001230 <LCD_enuHelp+0x210>
		{   
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
 80011a0:	2304      	movs	r3, #4
 80011a2:	73bb      	strb	r3, [r7, #14]
 80011a4:	e040      	b.n	8001228 <LCD_enuHelp+0x208>
			{
				if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]<=15){
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	7bb9      	ldrb	r1, [r7, #14]
 80011aa:	483a      	ldr	r0, [pc, #232]	; (8001294 <LCD_enuHelp+0x274>)
 80011ac:	4613      	mov	r3, r2
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4403      	add	r3, r0
 80011b6:	440b      	add	r3, r1
 80011b8:	3304      	adds	r3, #4
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d817      	bhi.n	80011f0 <LCD_enuHelp+0x1d0>
						MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc], GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 80011c0:	79fa      	ldrb	r2, [r7, #7]
 80011c2:	7bb9      	ldrb	r1, [r7, #14]
 80011c4:	4833      	ldr	r0, [pc, #204]	; (8001294 <LCD_enuHelp+0x274>)
 80011c6:	4613      	mov	r3, r2
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	4413      	add	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4403      	add	r3, r0
 80011d0:	440b      	add	r3, r1
 80011d2:	3304      	adds	r3, #4
 80011d4:	7819      	ldrb	r1, [r3, #0]
 80011d6:	79ba      	ldrb	r2, [r7, #6]
 80011d8:	7bbb      	ldrb	r3, [r7, #14]
 80011da:	fa42 f303 	asr.w	r3, r2, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fd3b 	bl	8000c64 <MGPIO_u8SetPinVal>
 80011ee:	e018      	b.n	8001222 <LCD_enuHelp+0x202>
					}
				else{
						MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8DataPinMapping[u8CntrLoc]-16, GET_BIT(u8LcdDataCmdCpy, u8CntrLoc)  );
 80011f0:	79fa      	ldrb	r2, [r7, #7]
 80011f2:	7bb9      	ldrb	r1, [r7, #14]
 80011f4:	4827      	ldr	r0, [pc, #156]	; (8001294 <LCD_enuHelp+0x274>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4403      	add	r3, r0
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	3b10      	subs	r3, #16
 8001208:	b2d9      	uxtb	r1, r3
 800120a:	79ba      	ldrb	r2, [r7, #6]
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	fa42 f303 	asr.w	r3, r2, r3
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	2001      	movs	r0, #1
 800121e:	f7ff fd21 	bl	8000c64 <MGPIO_u8SetPinVal>
			for (u8CntrLoc = 4 ; u8CntrLoc < 8 ; u8CntrLoc++)
 8001222:	7bbb      	ldrb	r3, [r7, #14]
 8001224:	3301      	adds	r3, #1
 8001226:	73bb      	strb	r3, [r7, #14]
 8001228:	7bbb      	ldrb	r3, [r7, #14]
 800122a:	2b07      	cmp	r3, #7
 800122c:	d9bb      	bls.n	80011a6 <LCD_enuHelp+0x186>
 800122e:	e001      	b.n	8001234 <LCD_enuHelp+0x214>
			}

		}
		else
		{
			enuErrorStateLoc = E_NOK_CONFIG_PARM_ERROR ; 
 8001230:	2304      	movs	r3, #4
 8001232:	73fb      	strb	r3, [r7, #15]
		}

			if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch<=15){
 8001234:	79fa      	ldrb	r2, [r7, #7]
 8001236:	4917      	ldr	r1, [pc, #92]	; (8001294 <LCD_enuHelp+0x274>)
 8001238:	4613      	mov	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	3303      	adds	r3, #3
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	d80e      	bhi.n	8001268 <LCD_enuHelp+0x248>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch, GPIO_LOW);
 800124a:	79fa      	ldrb	r2, [r7, #7]
 800124c:	4911      	ldr	r1, [pc, #68]	; (8001294 <LCD_enuHelp+0x274>)
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	440b      	add	r3, r1
 8001258:	3303      	adds	r3, #3
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2200      	movs	r2, #0
 800125e:	4619      	mov	r1, r3
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fcff 	bl	8000c64 <MGPIO_u8SetPinVal>
 8001266:	e00f      	b.n	8001288 <LCD_enuHelp+0x268>
		}
		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8EnableLatch-16, GPIO_LOW );
 8001268:	79fa      	ldrb	r2, [r7, #7]
 800126a:	490a      	ldr	r1, [pc, #40]	; (8001294 <LCD_enuHelp+0x274>)
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	440b      	add	r3, r1
 8001276:	3303      	adds	r3, #3
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3b10      	subs	r3, #16
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff fcee 	bl	8000c64 <MGPIO_u8SetPinVal>
		}
	
	return enuErrorStateLoc ;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000000 	.word	0x20000000

08001298 <LCD_enuWriteCmd>:

tenuErrorStatus LCD_enuWriteCmd (uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]

	tenuErrorStatus enuErrorStateLoc = E_OK ;
 80012a8:	2300      	movs	r3, #0
 80012aa:	73fb      	strb	r3, [r7, #15]
	if (u8LcdNumCpy < LCD_MAX_NUM )
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d132      	bne.n	8001318 <LCD_enuWriteCmd+0x80>

	{

		if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect<=15){
 80012b2:	79fa      	ldrb	r2, [r7, #7]
 80012b4:	491c      	ldr	r1, [pc, #112]	; (8001328 <LCD_enuWriteCmd+0x90>)
 80012b6:	4613      	mov	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	3301      	adds	r3, #1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80e      	bhi.n	80012e6 <LCD_enuWriteCmd+0x4e>
			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect, GPIO_LOW );
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	4917      	ldr	r1, [pc, #92]	; (8001328 <LCD_enuWriteCmd+0x90>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3301      	adds	r3, #1
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2200      	movs	r2, #0
 80012dc:	4619      	mov	r1, r3
 80012de:	2000      	movs	r0, #0
 80012e0:	f7ff fcc0 	bl	8000c64 <MGPIO_u8SetPinVal>
 80012e4:	e00f      	b.n	8001306 <LCD_enuWriteCmd+0x6e>
		}
		else {

			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect-16, GPIO_LOW );
 80012e6:	79fa      	ldrb	r2, [r7, #7]
 80012e8:	490f      	ldr	r1, [pc, #60]	; (8001328 <LCD_enuWriteCmd+0x90>)
 80012ea:	4613      	mov	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	4413      	add	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	440b      	add	r3, r1
 80012f4:	3301      	adds	r3, #1
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	3b10      	subs	r3, #16
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fcaf 	bl	8000c64 <MGPIO_u8SetPinVal>

		}

		enuErrorStateLoc = LCD_enuHelp(u8LcdNumCpy , u8CmdCpy );
 8001306:	79ba      	ldrb	r2, [r7, #6]
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe87 	bl	8001020 <LCD_enuHelp>
 8001312:	4603      	mov	r3, r0
 8001314:	73fb      	strb	r3, [r7, #15]
 8001316:	e001      	b.n	800131c <LCD_enuWriteCmd+0x84>
	}
	else
	{

		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
 8001318:	2302      	movs	r3, #2
 800131a:	73fb      	strb	r3, [r7, #15]
	}


	return enuErrorStateLoc ;
 800131c:	7bfb      	ldrb	r3, [r7, #15]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000

0800132c <LCD_enuWriteChar>:


tenuErrorStatus LCD_enuWriteChar (uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	460a      	mov	r2, r1
 8001336:	71fb      	strb	r3, [r7, #7]
 8001338:	4613      	mov	r3, r2
 800133a:	71bb      	strb	r3, [r7, #6]
	tenuErrorStatus enuErrorStateLoc = E_OK ;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]


	if (u8LcdNumCpy < LCD_MAX_NUM )
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d130      	bne.n	80013a8 <LCD_enuWriteChar+0x7c>
	{
		if(LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect>=0 && LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect<=15){
 8001346:	79fa      	ldrb	r2, [r7, #7]
 8001348:	491b      	ldr	r1, [pc, #108]	; (80013b8 <LCD_enuWriteChar+0x8c>)
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	440b      	add	r3, r1
 8001354:	3301      	adds	r3, #1
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b0f      	cmp	r3, #15
 800135a:	d80e      	bhi.n	800137a <LCD_enuWriteChar+0x4e>

			MGPIO_u8SetPinVal(GPIO_PORTA,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect, GPIO_HIGH );
 800135c:	79fa      	ldrb	r2, [r7, #7]
 800135e:	4916      	ldr	r1, [pc, #88]	; (80013b8 <LCD_enuWriteChar+0x8c>)
 8001360:	4613      	mov	r3, r2
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	3301      	adds	r3, #1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2201      	movs	r2, #1
 8001370:	4619      	mov	r1, r3
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc76 	bl	8000c64 <MGPIO_u8SetPinVal>
 8001378:	e00f      	b.n	800139a <LCD_enuWriteChar+0x6e>
		}

		else{
			MGPIO_u8SetPinVal(GPIO_PORTB,LCD_astrCfg[u8LcdNumCpy].strLcdPinCfg.u8RegisterSelect-16, GPIO_HIGH );
 800137a:	79fa      	ldrb	r2, [r7, #7]
 800137c:	490e      	ldr	r1, [pc, #56]	; (80013b8 <LCD_enuWriteChar+0x8c>)
 800137e:	4613      	mov	r3, r2
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	4413      	add	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	3301      	adds	r3, #1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	3b10      	subs	r3, #16
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2201      	movs	r2, #1
 8001392:	4619      	mov	r1, r3
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fc65 	bl	8000c64 <MGPIO_u8SetPinVal>
		}
		LCD_enuHelp(u8LcdNumCpy, u8DataCpy);
 800139a:	79ba      	ldrb	r2, [r7, #6]
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4611      	mov	r1, r2
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fe3d 	bl	8001020 <LCD_enuHelp>
 80013a6:	e001      	b.n	80013ac <LCD_enuWriteChar+0x80>

	}
	else
	{
		enuErrorStateLoc = E_NOK_PARAM_OUT_OF_RANGE ;
 80013a8:	2302      	movs	r3, #2
 80013aa:	73fb      	strb	r3, [r7, #15]
	}

	return enuErrorStateLoc ;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]

}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000000 	.word	0x20000000

080013bc <LCD_enuWritenumber>:
}



void LCD_enuWritenumber(uint8 u8LcdNumCpy, float32 pu8DataCpy)
{
 80013bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013c0:	b08d      	sub	sp, #52	; 0x34
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	ed87 0a00 	vstr	s0, [r7]
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	466b      	mov	r3, sp
 80013ce:	461e      	mov	r6, r3
    // Check if the number is negative
    int isNegative = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (pu8DataCpy < 0)
 80013d4:	edd7 7a00 	vldr	s15, [r7]
 80013d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e0:	d507      	bpl.n	80013f2 <LCD_enuWritenumber+0x36>
    {
        isNegative = 1;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        pu8DataCpy = -pu8DataCpy; // Use the absolute value
 80013e6:	edd7 7a00 	vldr	s15, [r7]
 80013ea:	eef1 7a67 	vneg.f32	s15, s15
 80013ee:	edc7 7a00 	vstr	s15, [r7]
    }

    // Count digits in the integer part of the number
    int integerPart = (int)pu8DataCpy;
 80013f2:	edd7 7a00 	vldr	s15, [r7]
 80013f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013fa:	ee17 3a90 	vmov	r3, s15
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
    int digitCount = 1;
 8001400:	2301      	movs	r3, #1
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    while (integerPart / 10 != 0)
 8001404:	e00a      	b.n	800141c <LCD_enuWritenumber+0x60>
    {
        digitCount++;
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	3301      	adds	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
        integerPart /= 10;
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	4a52      	ldr	r2, [pc, #328]	; (8001558 <LCD_enuWritenumber+0x19c>)
 8001410:	fb82 1203 	smull	r1, r2, r2, r3
 8001414:	1092      	asrs	r2, r2, #2
 8001416:	17db      	asrs	r3, r3, #31
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
    while (integerPart / 10 != 0)
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	3309      	adds	r3, #9
 8001420:	2b12      	cmp	r3, #18
 8001422:	d8f0      	bhi.n	8001406 <LCD_enuWritenumber+0x4a>
    }

    // Add one more for the negative sign if applicable
    if (isNegative)
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	2b00      	cmp	r3, #0
 8001428:	d002      	beq.n	8001430 <LCD_enuWritenumber+0x74>
    {
        digitCount++;
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	3301      	adds	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    }

    // Declare a character array to store the result
    char arr[digitCount];
 8001430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001432:	1e4b      	subs	r3, r1, #1
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	460a      	mov	r2, r1
 8001438:	2300      	movs	r3, #0
 800143a:	4690      	mov	r8, r2
 800143c:	4699      	mov	r9, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 0300 	mov.w	r3, #0
 8001446:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800144a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800144e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001452:	460a      	mov	r2, r1
 8001454:	2300      	movs	r3, #0
 8001456:	4614      	mov	r4, r2
 8001458:	461d      	mov	r5, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	00eb      	lsls	r3, r5, #3
 8001464:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001468:	00e2      	lsls	r2, r4, #3
 800146a:	460b      	mov	r3, r1
 800146c:	3307      	adds	r3, #7
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	ebad 0d03 	sub.w	sp, sp, r3
 8001476:	466b      	mov	r3, sp
 8001478:	3300      	adds	r3, #0
 800147a:	613b      	str	r3, [r7, #16]

    // Separate integer into digits and store them in the array
    int index = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
    do
    {
        arr[index++] = (char)((int)pu8DataCpy % 10 + '0');
 8001480:	edd7 7a00 	vldr	s15, [r7]
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 1a90 	vmov	r1, s15
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <LCD_enuWritenumber+0x19c>)
 800148e:	fb83 2301 	smull	r2, r3, r3, r1
 8001492:	109a      	asrs	r2, r3, #2
 8001494:	17cb      	asrs	r3, r1, #31
 8001496:	1ad2      	subs	r2, r2, r3
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	1aca      	subs	r2, r1, r3
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	1c59      	adds	r1, r3, #1
 80014a8:	6239      	str	r1, [r7, #32]
 80014aa:	3230      	adds	r2, #48	; 0x30
 80014ac:	b2d1      	uxtb	r1, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	54d1      	strb	r1, [r2, r3]
        pu8DataCpy /= 10;
 80014b2:	ed97 7a00 	vldr	s14, [r7]
 80014b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80014ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014be:	edc7 7a00 	vstr	s15, [r7]
    } while ((int)pu8DataCpy != 0);
 80014c2:	edd7 7a00 	vldr	s15, [r7]
 80014c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ca:	ee17 3a90 	vmov	r3, s15
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1d6      	bne.n	8001480 <LCD_enuWritenumber+0xc4>

    // Add the negative sign if applicable
    if (isNegative)
 80014d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d004      	beq.n	80014e2 <LCD_enuWritenumber+0x126>
    {
        arr[index] = '-';
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	4413      	add	r3, r2
 80014de:	222d      	movs	r2, #45	; 0x2d
 80014e0:	701a      	strb	r2, [r3, #0]
    }

    // Reverse the array
    int i, j;
    char temp;
    for (i = 0, j = index; i < j; i++, j--)
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	e018      	b.n	800151e <LCD_enuWritenumber+0x162>
    {
        temp = arr[i];
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	73fb      	strb	r3, [r7, #15]
        arr[i] = arr[j];
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	4413      	add	r3, r2
 80014fc:	7819      	ldrb	r1, [r3, #0]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	4413      	add	r3, r2
 8001504:	460a      	mov	r2, r1
 8001506:	701a      	strb	r2, [r3, #0]
        arr[j] = temp;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4413      	add	r3, r2
 800150e:	7bfa      	ldrb	r2, [r7, #15]
 8001510:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = index; i < j; i++, j--)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	3b01      	subs	r3, #1
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbe2      	blt.n	80014ec <LCD_enuWritenumber+0x130>
    }

    // Display the characters on the LCD
    for (i = 0; i <= index; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e00b      	b.n	8001544 <LCD_enuWritenumber+0x188>
    {
        LCD_enuWriteChar(u8LcdNumCpy, arr[i]);
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	781a      	ldrb	r2, [r3, #0]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fef7 	bl	800132c <LCD_enuWriteChar>
    for (i = 0; i <= index; i++)
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3301      	adds	r3, #1
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	429a      	cmp	r2, r3
 800154a:	ddef      	ble.n	800152c <LCD_enuWritenumber+0x170>
 800154c:	46b5      	mov	sp, r6
    }
}
 800154e:	bf00      	nop
 8001550:	3734      	adds	r7, #52	; 0x34
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001558:	66666667 	.word	0x66666667
 800155c:	00000000 	.word	0x00000000

08001560 <ADC_to_Temperature>:
#include "LM35_PRIV.h"
#include "LM35_CONFG.h"
#include "LM35.h"


float32 ADC_to_Temperature(uint16 adcValue) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
    // and LM35 sensitivity is 10 mV/°C
//    float32 voltage = (adcValue / (STEPS*1.0)) * Vref; // Convert ADC reading to voltage
//    float32 temperature = (voltage - 0.5) * 100.0; // Convert voltage to temperature in Celsius
    float32 output_temp=((float) adcValue /STEPS) * Vref;
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001574:	eddf 6a12 	vldr	s13, [pc, #72]	; 80015c0 <ADC_to_Temperature+0x60>
 8001578:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800157c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001584:	edc7 7a03 	vstr	s15, [r7, #12]
	output_temp=output_temp/0.01;
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7fe ffdd 	bl	8000548 <__aeabi_f2d>
 800158e:	a30a      	add	r3, pc, #40	; (adr r3, 80015b8 <ADC_to_Temperature+0x58>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	f7ff f95a 	bl	800084c <__aeabi_ddiv>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f7ff fa3c 	bl	8000a1c <__aeabi_d2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	60fb      	str	r3, [r7, #12]
    return output_temp;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	ee07 3a90 	vmov	s15, r3
}
 80015ae:	eeb0 0a67 	vmov.f32	s0, s15
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	47ae147b 	.word	0x47ae147b
 80015bc:	3f847ae1 	.word	0x3f847ae1
 80015c0:	45800000 	.word	0x45800000

080015c4 <Init_Rcc>:


#include  "RCC_cfg.h"
#include  "RCC.h"

void Init_Rcc(void){
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
 #if RCC_SYSCLK == RCC_HSI
    SET_BIT(RCC->RCC_CR , RCC_HSI);
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <Init_Rcc+0x5c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <Init_Rcc+0x5c>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]
    while (GET_BIT(RCC->RCC_CR , 1)!=1);
 80015d4:	bf00      	nop
 80015d6:	4b12      	ldr	r3, [pc, #72]	; (8001620 <Init_Rcc+0x5c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f9      	beq.n	80015d6 <Init_Rcc+0x12>
    CLR_BIT(RCC->RCC_CFGR,0);
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <Init_Rcc+0x5c>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	4a0e      	ldr	r2, [pc, #56]	; (8001620 <Init_Rcc+0x5c>)
 80015e8:	f023 0301 	bic.w	r3, r3, #1
 80015ec:	6093      	str	r3, [r2, #8]
    CLR_BIT(RCC->RCC_CFGR,1);
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <Init_Rcc+0x5c>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <Init_Rcc+0x5c>)
 80015f4:	f023 0302 	bic.w	r3, r3, #2
 80015f8:	6093      	str	r3, [r2, #8]
    while ((GET_BIT(RCC->RCC_CR , 2)!=0) || (GET_BIT(RCC->RCC_CR , 3)!=0) );
 80015fa:	bf00      	nop
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <Init_Rcc+0x5c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f9      	bne.n	80015fc <Init_Rcc+0x38>
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <Init_Rcc+0x5c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f3      	bne.n	80015fc <Init_Rcc+0x38>
		CLR_BIT(RCC->RCC_CFGR , 0);
		while(RCC->RCC_CFGR&&0x0c != 0x10);	
 #else
  #error " not allowed RCC_SYSCLK"
 #endif
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40023800 	.word	0x40023800

08001624 <Enable_peripheral>:

void Enable_peripheral(uint8 RCC_PERIPHERAL, uint8 RCC_BUS) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	460a      	mov	r2, r1
 800162e:	71fb      	strb	r3, [r7, #7]
 8001630:	4613      	mov	r3, r2
 8001632:	71bb      	strb	r3, [r7, #6]
    switch (RCC_BUS) {  // Fixed to use RCC_BUS instead of RCC_PERIPHERAL
 8001634:	79bb      	ldrb	r3, [r7, #6]
 8001636:	2b03      	cmp	r3, #3
 8001638:	d836      	bhi.n	80016a8 <Enable_peripheral+0x84>
 800163a:	a201      	add	r2, pc, #4	; (adr r2, 8001640 <Enable_peripheral+0x1c>)
 800163c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001640:	08001651 	.word	0x08001651
 8001644:	08001667 	.word	0x08001667
 8001648:	0800167d 	.word	0x0800167d
 800164c:	08001693 	.word	0x08001693
        case RCC_AHB1:
            SET_BIT(RCC->RCC_AHB1ENR, RCC_PERIPHERAL);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <Enable_peripheral+0x94>)
 8001652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001654:	79fa      	ldrb	r2, [r7, #7]
 8001656:	2101      	movs	r1, #1
 8001658:	fa01 f202 	lsl.w	r2, r1, r2
 800165c:	4611      	mov	r1, r2
 800165e:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <Enable_peripheral+0x94>)
 8001660:	430b      	orrs	r3, r1
 8001662:	6313      	str	r3, [r2, #48]	; 0x30
            break;
 8001664:	e024      	b.n	80016b0 <Enable_peripheral+0x8c>
        case RCC_AHB2:
            SET_BIT(RCC->RCC_AHB2ENR, RCC_PERIPHERAL);
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <Enable_peripheral+0x94>)
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f202 	lsl.w	r2, r1, r2
 8001672:	4611      	mov	r1, r2
 8001674:	4a10      	ldr	r2, [pc, #64]	; (80016b8 <Enable_peripheral+0x94>)
 8001676:	430b      	orrs	r3, r1
 8001678:	6353      	str	r3, [r2, #52]	; 0x34
            break;
 800167a:	e019      	b.n	80016b0 <Enable_peripheral+0x8c>
        case RCC_APB1:
            SET_BIT(RCC->RCC_APB1ENR, RCC_PERIPHERAL);
 800167c:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <Enable_peripheral+0x94>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	79fa      	ldrb	r2, [r7, #7]
 8001682:	2101      	movs	r1, #1
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	4611      	mov	r1, r2
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <Enable_peripheral+0x94>)
 800168c:	430b      	orrs	r3, r1
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
            break;
 8001690:	e00e      	b.n	80016b0 <Enable_peripheral+0x8c>
        case RCC_APB2:
            SET_BIT(RCC->RCC_APB2ENR, RCC_PERIPHERAL);
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <Enable_peripheral+0x94>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	2101      	movs	r1, #1
 800169a:	fa01 f202 	lsl.w	r2, r1, r2
 800169e:	4611      	mov	r1, r2
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <Enable_peripheral+0x94>)
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80016a6:	e003      	b.n	80016b0 <Enable_peripheral+0x8c>
        default:
		printf("invaild bus");
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <Enable_peripheral+0x98>)
 80016aa:	f000 fa87 	bl	8001bbc <iprintf>


            break;
 80016ae:	bf00      	nop
    }
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	080028bc 	.word	0x080028bc

080016c0 <MSTK_voidInit>:
#include  "SYSTICK.h"
#include  "SYSTICK_cfg.h"

static void(*Global_Systick_PTR)(void)=NULL_PTR;

void MSTK_voidInit(void){
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
    if (CLK_SCR== AHB_DIV_8_CLK_CS){
        CLR_BIT(SYSTICK->STK_CTRL,2); //0.5 Ms
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <MSTK_voidInit+0x1c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a04      	ldr	r2, [pc, #16]	; (80016dc <MSTK_voidInit+0x1c>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	6013      	str	r3, [r2, #0]
    }
    else{
        SET_BIT(SYSTICK->STK_CTRL,2); //0.0625Ms
    }
    
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <MSTK_voidIntState>:

void MSTK_voidIntState(void){
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
SET_BIT(SYSTICK->STK_CTRL,1);
 80016e4:	4b05      	ldr	r3, [pc, #20]	; (80016fc <MSTK_voidIntState+0x1c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <MSTK_voidIntState+0x1c>)
 80016ea:	f043 0302 	orr.w	r3, r3, #2
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e010 	.word	0xe000e010

08001700 <MSTK_voidStart>:

void MSTK_voidStart(uint32 Copy_u8PreloadValue){
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    SYSTICK->STK_LOAD= Copy_u8PreloadValue;
 8001708:	4a08      	ldr	r2, [pc, #32]	; (800172c <MSTK_voidStart+0x2c>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6053      	str	r3, [r2, #4]
    SYSTICK->STK_VAL=0;
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <MSTK_voidStart+0x2c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    SET_BIT(SYSTICK->STK_CTRL,0);
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <MSTK_voidStart+0x2c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <MSTK_voidStart+0x2c>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6013      	str	r3, [r2, #0]


}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e010 	.word	0xe000e010

08001730 <MSTK_u8ReadFlag>:

uint8 MSTK_u8ReadFlag(void){
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
    return GET_BIT(SYSTICK->STK_CTRL,16);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <MSTK_u8ReadFlag+0x1c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	0c1b      	lsrs	r3, r3, #16
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	b2db      	uxtb	r3, r3
}
 8001742:	4618      	mov	r0, r3
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e010 	.word	0xe000e010

08001750 <MSTK_voidDelayMsec>:
    if( GET_BIT(temp_loc,1)==1){
        MSTK_voidIntState();
    }
}

void MSTK_voidDelayMsec(uint32 Copy_u8DelayMsec){
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
    uint32 temp_loc=SYSTICK->STK_CTRL;
 8001758:	4b10      	ldr	r3, [pc, #64]	; (800179c <MSTK_voidDelayMsec+0x4c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
    CLR_BIT(SYSTICK->STK_CTRL,1);
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MSTK_voidDelayMsec+0x4c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <MSTK_voidDelayMsec+0x4c>)
 8001764:	f023 0302 	bic.w	r3, r3, #2
 8001768:	6013      	str	r3, [r2, #0]
    if (CLK_SCR== AHB_DIV_8_CLK_CS){
         MSTK_voidStart(Copy_u8DelayMsec*2000);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ffc3 	bl	8001700 <MSTK_voidStart>
         while (MSTK_u8ReadFlag()==0);
 800177a:	bf00      	nop
 800177c:	f7ff ffd8 	bl	8001730 <MSTK_u8ReadFlag>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0fa      	beq.n	800177c <MSTK_voidDelayMsec+0x2c>
    }
    else{
         MSTK_voidStart(Copy_u8DelayMsec*16000);
         while (MSTK_u8ReadFlag()==0);
    }
    if( GET_BIT(temp_loc,1)==1){
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MSTK_voidDelayMsec+0x44>
        MSTK_voidIntState();
 8001790:	f7ff ffa6 	bl	80016e0 <MSTK_voidIntState>
    }

}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	e000e010 	.word	0xe000e010

080017a0 <main>:
#include "LCD.h"
#include "ADC.h"
#include "LM35.h"


int main(void){
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
	 Init_Rcc();
 80017a6:	f7ff ff0d 	bl	80015c4 <Init_Rcc>
	 Enable_peripheral(  RCC_AHB1ENR_GPIOA	,RCC_AHB1 );
 80017aa:	2100      	movs	r1, #0
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ff39 	bl	8001624 <Enable_peripheral>
	 ADC_Init() ;
 80017b2:	f7ff f983 	bl	8000abc <ADC_Init>
	 MSTK_voidInit();
 80017b6:	f7ff ff83 	bl	80016c0 <MSTK_voidInit>
//	 MSTK_voidIntState();
	 int i;
	 for(i=1;i<=11;i++){
 80017ba:	2301      	movs	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	e009      	b.n	80017d4 <main+0x34>
		 MGPIO_vSetPinMode(GPIO_PORTA, i, GPIO_MODE_OUTPUT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	2201      	movs	r2, #1
 80017c6:	4619      	mov	r1, r3
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff f9d5 	bl	8000b78 <MGPIO_vSetPinMode>
	 for(i=1;i<=11;i++){
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3301      	adds	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b0b      	cmp	r3, #11
 80017d8:	ddf2      	ble.n	80017c0 <main+0x20>
	 }

	 LCD_voidInit();
 80017da:	f7ff fab3 	bl	8000d44 <LCD_voidInit>
	 float32 tempr=0;
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	603b      	str	r3, [r7, #0]
    while (1)

    {


      	tempr = ADC_ReadChannel(0);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff f9a1 	bl	8000b2c <ADC_ReadChannel>
 80017ea:	ed87 0a00 	vstr	s0, [r7]
      	LCD_enuWritenumber(LCD_u8NUM_0,ADC_to_Temperature(tempr));
 80017ee:	edd7 7a00 	vldr	s15, [r7]
 80017f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f6:	ee17 3a90 	vmov	r3, s15
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff feaf 	bl	8001560 <ADC_to_Temperature>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fdd6 	bl	80013bc <LCD_enuWritenumber>
      	MSTK_voidDelayMsec(500);
 8001810:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001814:	f7ff ff9c 	bl	8001750 <MSTK_voidDelayMsec>
      	LCD_enuWriteCmd (LCD_u8NUM_0 ,LCD_u8CLEAR);
 8001818:	2101      	movs	r1, #1
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff fd3c 	bl	8001298 <LCD_enuWriteCmd>
      	tempr = ADC_ReadChannel(0);
 8001820:	e7e0      	b.n	80017e4 <main+0x44>

08001822 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001822:	b480      	push	{r7}
 8001824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001826:	e7fe      	b.n	8001826 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <HardFault_Handler+0x4>

0800182e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001832:	e7fe      	b.n	8001832 <MemManage_Handler+0x4>

08001834 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001838:	e7fe      	b.n	8001838 <BusFault_Handler+0x4>

0800183a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183e:	e7fe      	b.n	800183e <UsageFault_Handler+0x4>

08001840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186e:	f000 f8e1 	bl	8001a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}

08001876 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e00a      	b.n	800189e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001888:	f3af 8000 	nop.w
 800188c:	4601      	mov	r1, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1c5a      	adds	r2, r3, #1
 8001892:	60ba      	str	r2, [r7, #8]
 8001894:	b2ca      	uxtb	r2, r1
 8001896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	dbf0      	blt.n	8001888 <_read+0x12>
  }

  return len;
 80018a6:	687b      	ldr	r3, [r7, #4]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e009      	b.n	80018d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1c5a      	adds	r2, r3, #1
 80018c6:	60ba      	str	r2, [r7, #8]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbf1      	blt.n	80018c2 <_write+0x12>
  }
  return len;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_close>:

int _close(int file)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001910:	605a      	str	r2, [r3, #4]
  return 0;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_isatty>:

int _isatty(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001928:	2301      	movs	r3, #1
}
 800192a:	4618      	mov	r0, r3
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	60f8      	str	r0, [r7, #12]
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f000 f9c0 	bl	8001d04 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20010000 	.word	0x20010000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	20000088 	.word	0x20000088
 80019b8:	200001e0 	.word	0x200001e0

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c0:	4b06      	ldr	r3, [pc, #24]	; (80019dc <SystemInit+0x20>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <SystemInit+0x20>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e4:	480d      	ldr	r0, [pc, #52]	; (8001a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e6:	490e      	ldr	r1, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ec:	e002      	b.n	80019f4 <LoopCopyDataInit>

080019ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f2:	3304      	adds	r3, #4

080019f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f8:	d3f9      	bcc.n	80019ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019fc:	4c0b      	ldr	r4, [pc, #44]	; (8001a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a00:	e001      	b.n	8001a06 <LoopFillZerobss>

08001a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a04:	3204      	adds	r2, #4

08001a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a08:	d3fb      	bcc.n	8001a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a0a:	f7ff ffd7 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f000 f97f 	bl	8001d10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a12:	f7ff fec5 	bl	80017a0 <main>
  bx  lr    
 8001a16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a18:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a24:	08002918 	.word	0x08002918
  ldr r2, =_sbss
 8001a28:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a2c:	200001dc 	.word	0x200001dc

08001a30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC_IRQHandler>
	...

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	2000008c 	.word	0x2000008c

08001a5c <std>:
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	b510      	push	{r4, lr}
 8001a60:	4604      	mov	r4, r0
 8001a62:	e9c0 3300 	strd	r3, r3, [r0]
 8001a66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001a6a:	6083      	str	r3, [r0, #8]
 8001a6c:	8181      	strh	r1, [r0, #12]
 8001a6e:	6643      	str	r3, [r0, #100]	; 0x64
 8001a70:	81c2      	strh	r2, [r0, #14]
 8001a72:	6183      	str	r3, [r0, #24]
 8001a74:	4619      	mov	r1, r3
 8001a76:	2208      	movs	r2, #8
 8001a78:	305c      	adds	r0, #92	; 0x5c
 8001a7a:	f000 f8f4 	bl	8001c66 <memset>
 8001a7e:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <std+0x38>)
 8001a80:	6263      	str	r3, [r4, #36]	; 0x24
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <std+0x3c>)
 8001a84:	62a3      	str	r3, [r4, #40]	; 0x28
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <std+0x40>)
 8001a88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001a8a:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <std+0x44>)
 8001a8c:	6224      	str	r4, [r4, #32]
 8001a8e:	6323      	str	r3, [r4, #48]	; 0x30
 8001a90:	bd10      	pop	{r4, pc}
 8001a92:	bf00      	nop
 8001a94:	08001be1 	.word	0x08001be1
 8001a98:	08001c03 	.word	0x08001c03
 8001a9c:	08001c3b 	.word	0x08001c3b
 8001aa0:	08001c5f 	.word	0x08001c5f

08001aa4 <stdio_exit_handler>:
 8001aa4:	4a02      	ldr	r2, [pc, #8]	; (8001ab0 <stdio_exit_handler+0xc>)
 8001aa6:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <stdio_exit_handler+0x10>)
 8001aa8:	4803      	ldr	r0, [pc, #12]	; (8001ab8 <stdio_exit_handler+0x14>)
 8001aaa:	f000 b869 	b.w	8001b80 <_fwalk_sglue>
 8001aae:	bf00      	nop
 8001ab0:	20000010 	.word	0x20000010
 8001ab4:	08002601 	.word	0x08002601
 8001ab8:	2000001c 	.word	0x2000001c

08001abc <cleanup_stdio>:
 8001abc:	6841      	ldr	r1, [r0, #4]
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <cleanup_stdio+0x34>)
 8001ac0:	4299      	cmp	r1, r3
 8001ac2:	b510      	push	{r4, lr}
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	d001      	beq.n	8001acc <cleanup_stdio+0x10>
 8001ac8:	f000 fd9a 	bl	8002600 <_fflush_r>
 8001acc:	68a1      	ldr	r1, [r4, #8]
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <cleanup_stdio+0x38>)
 8001ad0:	4299      	cmp	r1, r3
 8001ad2:	d002      	beq.n	8001ada <cleanup_stdio+0x1e>
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	f000 fd93 	bl	8002600 <_fflush_r>
 8001ada:	68e1      	ldr	r1, [r4, #12]
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <cleanup_stdio+0x3c>)
 8001ade:	4299      	cmp	r1, r3
 8001ae0:	d004      	beq.n	8001aec <cleanup_stdio+0x30>
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ae8:	f000 bd8a 	b.w	8002600 <_fflush_r>
 8001aec:	bd10      	pop	{r4, pc}
 8001aee:	bf00      	nop
 8001af0:	20000090 	.word	0x20000090
 8001af4:	200000f8 	.word	0x200000f8
 8001af8:	20000160 	.word	0x20000160

08001afc <global_stdio_init.part.0>:
 8001afc:	b510      	push	{r4, lr}
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <global_stdio_init.part.0+0x30>)
 8001b00:	4c0b      	ldr	r4, [pc, #44]	; (8001b30 <global_stdio_init.part.0+0x34>)
 8001b02:	4a0c      	ldr	r2, [pc, #48]	; (8001b34 <global_stdio_init.part.0+0x38>)
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	4620      	mov	r0, r4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	f7ff ffa6 	bl	8001a5c <std>
 8001b10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001b14:	2201      	movs	r2, #1
 8001b16:	2109      	movs	r1, #9
 8001b18:	f7ff ffa0 	bl	8001a5c <std>
 8001b1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001b20:	2202      	movs	r2, #2
 8001b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b26:	2112      	movs	r1, #18
 8001b28:	f7ff bf98 	b.w	8001a5c <std>
 8001b2c:	200001c8 	.word	0x200001c8
 8001b30:	20000090 	.word	0x20000090
 8001b34:	08001aa5 	.word	0x08001aa5

08001b38 <__sfp_lock_acquire>:
 8001b38:	4801      	ldr	r0, [pc, #4]	; (8001b40 <__sfp_lock_acquire+0x8>)
 8001b3a:	f000 b90d 	b.w	8001d58 <__retarget_lock_acquire_recursive>
 8001b3e:	bf00      	nop
 8001b40:	200001d1 	.word	0x200001d1

08001b44 <__sfp_lock_release>:
 8001b44:	4801      	ldr	r0, [pc, #4]	; (8001b4c <__sfp_lock_release+0x8>)
 8001b46:	f000 b908 	b.w	8001d5a <__retarget_lock_release_recursive>
 8001b4a:	bf00      	nop
 8001b4c:	200001d1 	.word	0x200001d1

08001b50 <__sinit>:
 8001b50:	b510      	push	{r4, lr}
 8001b52:	4604      	mov	r4, r0
 8001b54:	f7ff fff0 	bl	8001b38 <__sfp_lock_acquire>
 8001b58:	6a23      	ldr	r3, [r4, #32]
 8001b5a:	b11b      	cbz	r3, 8001b64 <__sinit+0x14>
 8001b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b60:	f7ff bff0 	b.w	8001b44 <__sfp_lock_release>
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__sinit+0x28>)
 8001b66:	6223      	str	r3, [r4, #32]
 8001b68:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <__sinit+0x2c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f5      	bne.n	8001b5c <__sinit+0xc>
 8001b70:	f7ff ffc4 	bl	8001afc <global_stdio_init.part.0>
 8001b74:	e7f2      	b.n	8001b5c <__sinit+0xc>
 8001b76:	bf00      	nop
 8001b78:	08001abd 	.word	0x08001abd
 8001b7c:	200001c8 	.word	0x200001c8

08001b80 <_fwalk_sglue>:
 8001b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b84:	4607      	mov	r7, r0
 8001b86:	4688      	mov	r8, r1
 8001b88:	4614      	mov	r4, r2
 8001b8a:	2600      	movs	r6, #0
 8001b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001b90:	f1b9 0901 	subs.w	r9, r9, #1
 8001b94:	d505      	bpl.n	8001ba2 <_fwalk_sglue+0x22>
 8001b96:	6824      	ldr	r4, [r4, #0]
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	d1f7      	bne.n	8001b8c <_fwalk_sglue+0xc>
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ba2:	89ab      	ldrh	r3, [r5, #12]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d907      	bls.n	8001bb8 <_fwalk_sglue+0x38>
 8001ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001bac:	3301      	adds	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <_fwalk_sglue+0x38>
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	4638      	mov	r0, r7
 8001bb4:	47c0      	blx	r8
 8001bb6:	4306      	orrs	r6, r0
 8001bb8:	3568      	adds	r5, #104	; 0x68
 8001bba:	e7e9      	b.n	8001b90 <_fwalk_sglue+0x10>

08001bbc <iprintf>:
 8001bbc:	b40f      	push	{r0, r1, r2, r3}
 8001bbe:	b507      	push	{r0, r1, r2, lr}
 8001bc0:	4906      	ldr	r1, [pc, #24]	; (8001bdc <iprintf+0x20>)
 8001bc2:	ab04      	add	r3, sp, #16
 8001bc4:	6808      	ldr	r0, [r1, #0]
 8001bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8001bca:	6881      	ldr	r1, [r0, #8]
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	f000 f9e7 	bl	8001fa0 <_vfiprintf_r>
 8001bd2:	b003      	add	sp, #12
 8001bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bd8:	b004      	add	sp, #16
 8001bda:	4770      	bx	lr
 8001bdc:	20000068 	.word	0x20000068

08001be0 <__sread>:
 8001be0:	b510      	push	{r4, lr}
 8001be2:	460c      	mov	r4, r1
 8001be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001be8:	f000 f868 	bl	8001cbc <_read_r>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	bfab      	itete	ge
 8001bf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bf2:	89a3      	ldrhlt	r3, [r4, #12]
 8001bf4:	181b      	addge	r3, r3, r0
 8001bf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bfa:	bfac      	ite	ge
 8001bfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bfe:	81a3      	strhlt	r3, [r4, #12]
 8001c00:	bd10      	pop	{r4, pc}

08001c02 <__swrite>:
 8001c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c06:	461f      	mov	r7, r3
 8001c08:	898b      	ldrh	r3, [r1, #12]
 8001c0a:	05db      	lsls	r3, r3, #23
 8001c0c:	4605      	mov	r5, r0
 8001c0e:	460c      	mov	r4, r1
 8001c10:	4616      	mov	r6, r2
 8001c12:	d505      	bpl.n	8001c20 <__swrite+0x1e>
 8001c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f000 f83c 	bl	8001c98 <_lseek_r>
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c2a:	81a3      	strh	r3, [r4, #12]
 8001c2c:	4632      	mov	r2, r6
 8001c2e:	463b      	mov	r3, r7
 8001c30:	4628      	mov	r0, r5
 8001c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c36:	f000 b853 	b.w	8001ce0 <_write_r>

08001c3a <__sseek>:
 8001c3a:	b510      	push	{r4, lr}
 8001c3c:	460c      	mov	r4, r1
 8001c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c42:	f000 f829 	bl	8001c98 <_lseek_r>
 8001c46:	1c43      	adds	r3, r0, #1
 8001c48:	89a3      	ldrh	r3, [r4, #12]
 8001c4a:	bf15      	itete	ne
 8001c4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c56:	81a3      	strheq	r3, [r4, #12]
 8001c58:	bf18      	it	ne
 8001c5a:	81a3      	strhne	r3, [r4, #12]
 8001c5c:	bd10      	pop	{r4, pc}

08001c5e <__sclose>:
 8001c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c62:	f000 b809 	b.w	8001c78 <_close_r>

08001c66 <memset>:
 8001c66:	4402      	add	r2, r0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d100      	bne.n	8001c70 <memset+0xa>
 8001c6e:	4770      	bx	lr
 8001c70:	f803 1b01 	strb.w	r1, [r3], #1
 8001c74:	e7f9      	b.n	8001c6a <memset+0x4>
	...

08001c78 <_close_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4d06      	ldr	r5, [pc, #24]	; (8001c94 <_close_r+0x1c>)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	4604      	mov	r4, r0
 8001c80:	4608      	mov	r0, r1
 8001c82:	602b      	str	r3, [r5, #0]
 8001c84:	f7ff fe30 	bl	80018e8 <_close>
 8001c88:	1c43      	adds	r3, r0, #1
 8001c8a:	d102      	bne.n	8001c92 <_close_r+0x1a>
 8001c8c:	682b      	ldr	r3, [r5, #0]
 8001c8e:	b103      	cbz	r3, 8001c92 <_close_r+0x1a>
 8001c90:	6023      	str	r3, [r4, #0]
 8001c92:	bd38      	pop	{r3, r4, r5, pc}
 8001c94:	200001cc 	.word	0x200001cc

08001c98 <_lseek_r>:
 8001c98:	b538      	push	{r3, r4, r5, lr}
 8001c9a:	4d07      	ldr	r5, [pc, #28]	; (8001cb8 <_lseek_r+0x20>)
 8001c9c:	4604      	mov	r4, r0
 8001c9e:	4608      	mov	r0, r1
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	602a      	str	r2, [r5, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f7ff fe45 	bl	8001936 <_lseek>
 8001cac:	1c43      	adds	r3, r0, #1
 8001cae:	d102      	bne.n	8001cb6 <_lseek_r+0x1e>
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	b103      	cbz	r3, 8001cb6 <_lseek_r+0x1e>
 8001cb4:	6023      	str	r3, [r4, #0]
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	200001cc 	.word	0x200001cc

08001cbc <_read_r>:
 8001cbc:	b538      	push	{r3, r4, r5, lr}
 8001cbe:	4d07      	ldr	r5, [pc, #28]	; (8001cdc <_read_r+0x20>)
 8001cc0:	4604      	mov	r4, r0
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	602a      	str	r2, [r5, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f7ff fdd3 	bl	8001876 <_read>
 8001cd0:	1c43      	adds	r3, r0, #1
 8001cd2:	d102      	bne.n	8001cda <_read_r+0x1e>
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	b103      	cbz	r3, 8001cda <_read_r+0x1e>
 8001cd8:	6023      	str	r3, [r4, #0]
 8001cda:	bd38      	pop	{r3, r4, r5, pc}
 8001cdc:	200001cc 	.word	0x200001cc

08001ce0 <_write_r>:
 8001ce0:	b538      	push	{r3, r4, r5, lr}
 8001ce2:	4d07      	ldr	r5, [pc, #28]	; (8001d00 <_write_r+0x20>)
 8001ce4:	4604      	mov	r4, r0
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	4611      	mov	r1, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	602a      	str	r2, [r5, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f7ff fdde 	bl	80018b0 <_write>
 8001cf4:	1c43      	adds	r3, r0, #1
 8001cf6:	d102      	bne.n	8001cfe <_write_r+0x1e>
 8001cf8:	682b      	ldr	r3, [r5, #0]
 8001cfa:	b103      	cbz	r3, 8001cfe <_write_r+0x1e>
 8001cfc:	6023      	str	r3, [r4, #0]
 8001cfe:	bd38      	pop	{r3, r4, r5, pc}
 8001d00:	200001cc 	.word	0x200001cc

08001d04 <__errno>:
 8001d04:	4b01      	ldr	r3, [pc, #4]	; (8001d0c <__errno+0x8>)
 8001d06:	6818      	ldr	r0, [r3, #0]
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000068 	.word	0x20000068

08001d10 <__libc_init_array>:
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	4d0d      	ldr	r5, [pc, #52]	; (8001d48 <__libc_init_array+0x38>)
 8001d14:	4c0d      	ldr	r4, [pc, #52]	; (8001d4c <__libc_init_array+0x3c>)
 8001d16:	1b64      	subs	r4, r4, r5
 8001d18:	10a4      	asrs	r4, r4, #2
 8001d1a:	2600      	movs	r6, #0
 8001d1c:	42a6      	cmp	r6, r4
 8001d1e:	d109      	bne.n	8001d34 <__libc_init_array+0x24>
 8001d20:	4d0b      	ldr	r5, [pc, #44]	; (8001d50 <__libc_init_array+0x40>)
 8001d22:	4c0c      	ldr	r4, [pc, #48]	; (8001d54 <__libc_init_array+0x44>)
 8001d24:	f000 fdbe 	bl	80028a4 <_init>
 8001d28:	1b64      	subs	r4, r4, r5
 8001d2a:	10a4      	asrs	r4, r4, #2
 8001d2c:	2600      	movs	r6, #0
 8001d2e:	42a6      	cmp	r6, r4
 8001d30:	d105      	bne.n	8001d3e <__libc_init_array+0x2e>
 8001d32:	bd70      	pop	{r4, r5, r6, pc}
 8001d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d38:	4798      	blx	r3
 8001d3a:	3601      	adds	r6, #1
 8001d3c:	e7ee      	b.n	8001d1c <__libc_init_array+0xc>
 8001d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d42:	4798      	blx	r3
 8001d44:	3601      	adds	r6, #1
 8001d46:	e7f2      	b.n	8001d2e <__libc_init_array+0x1e>
 8001d48:	08002910 	.word	0x08002910
 8001d4c:	08002910 	.word	0x08002910
 8001d50:	08002910 	.word	0x08002910
 8001d54:	08002914 	.word	0x08002914

08001d58 <__retarget_lock_acquire_recursive>:
 8001d58:	4770      	bx	lr

08001d5a <__retarget_lock_release_recursive>:
 8001d5a:	4770      	bx	lr

08001d5c <_free_r>:
 8001d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d5e:	2900      	cmp	r1, #0
 8001d60:	d044      	beq.n	8001dec <_free_r+0x90>
 8001d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d66:	9001      	str	r0, [sp, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8001d6e:	bfb8      	it	lt
 8001d70:	18e4      	addlt	r4, r4, r3
 8001d72:	f000 f8df 	bl	8001f34 <__malloc_lock>
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <_free_r+0x94>)
 8001d78:	9801      	ldr	r0, [sp, #4]
 8001d7a:	6813      	ldr	r3, [r2, #0]
 8001d7c:	b933      	cbnz	r3, 8001d8c <_free_r+0x30>
 8001d7e:	6063      	str	r3, [r4, #4]
 8001d80:	6014      	str	r4, [r2, #0]
 8001d82:	b003      	add	sp, #12
 8001d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001d88:	f000 b8da 	b.w	8001f40 <__malloc_unlock>
 8001d8c:	42a3      	cmp	r3, r4
 8001d8e:	d908      	bls.n	8001da2 <_free_r+0x46>
 8001d90:	6825      	ldr	r5, [r4, #0]
 8001d92:	1961      	adds	r1, r4, r5
 8001d94:	428b      	cmp	r3, r1
 8001d96:	bf01      	itttt	eq
 8001d98:	6819      	ldreq	r1, [r3, #0]
 8001d9a:	685b      	ldreq	r3, [r3, #4]
 8001d9c:	1949      	addeq	r1, r1, r5
 8001d9e:	6021      	streq	r1, [r4, #0]
 8001da0:	e7ed      	b.n	8001d7e <_free_r+0x22>
 8001da2:	461a      	mov	r2, r3
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	b10b      	cbz	r3, 8001dac <_free_r+0x50>
 8001da8:	42a3      	cmp	r3, r4
 8001daa:	d9fa      	bls.n	8001da2 <_free_r+0x46>
 8001dac:	6811      	ldr	r1, [r2, #0]
 8001dae:	1855      	adds	r5, r2, r1
 8001db0:	42a5      	cmp	r5, r4
 8001db2:	d10b      	bne.n	8001dcc <_free_r+0x70>
 8001db4:	6824      	ldr	r4, [r4, #0]
 8001db6:	4421      	add	r1, r4
 8001db8:	1854      	adds	r4, r2, r1
 8001dba:	42a3      	cmp	r3, r4
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	d1e0      	bne.n	8001d82 <_free_r+0x26>
 8001dc0:	681c      	ldr	r4, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	6053      	str	r3, [r2, #4]
 8001dc6:	440c      	add	r4, r1
 8001dc8:	6014      	str	r4, [r2, #0]
 8001dca:	e7da      	b.n	8001d82 <_free_r+0x26>
 8001dcc:	d902      	bls.n	8001dd4 <_free_r+0x78>
 8001dce:	230c      	movs	r3, #12
 8001dd0:	6003      	str	r3, [r0, #0]
 8001dd2:	e7d6      	b.n	8001d82 <_free_r+0x26>
 8001dd4:	6825      	ldr	r5, [r4, #0]
 8001dd6:	1961      	adds	r1, r4, r5
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	bf04      	itt	eq
 8001ddc:	6819      	ldreq	r1, [r3, #0]
 8001dde:	685b      	ldreq	r3, [r3, #4]
 8001de0:	6063      	str	r3, [r4, #4]
 8001de2:	bf04      	itt	eq
 8001de4:	1949      	addeq	r1, r1, r5
 8001de6:	6021      	streq	r1, [r4, #0]
 8001de8:	6054      	str	r4, [r2, #4]
 8001dea:	e7ca      	b.n	8001d82 <_free_r+0x26>
 8001dec:	b003      	add	sp, #12
 8001dee:	bd30      	pop	{r4, r5, pc}
 8001df0:	200001d4 	.word	0x200001d4

08001df4 <sbrk_aligned>:
 8001df4:	b570      	push	{r4, r5, r6, lr}
 8001df6:	4e0e      	ldr	r6, [pc, #56]	; (8001e30 <sbrk_aligned+0x3c>)
 8001df8:	460c      	mov	r4, r1
 8001dfa:	6831      	ldr	r1, [r6, #0]
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	b911      	cbnz	r1, 8001e06 <sbrk_aligned+0x12>
 8001e00:	f000 fcbc 	bl	800277c <_sbrk_r>
 8001e04:	6030      	str	r0, [r6, #0]
 8001e06:	4621      	mov	r1, r4
 8001e08:	4628      	mov	r0, r5
 8001e0a:	f000 fcb7 	bl	800277c <_sbrk_r>
 8001e0e:	1c43      	adds	r3, r0, #1
 8001e10:	d00a      	beq.n	8001e28 <sbrk_aligned+0x34>
 8001e12:	1cc4      	adds	r4, r0, #3
 8001e14:	f024 0403 	bic.w	r4, r4, #3
 8001e18:	42a0      	cmp	r0, r4
 8001e1a:	d007      	beq.n	8001e2c <sbrk_aligned+0x38>
 8001e1c:	1a21      	subs	r1, r4, r0
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f000 fcac 	bl	800277c <_sbrk_r>
 8001e24:	3001      	adds	r0, #1
 8001e26:	d101      	bne.n	8001e2c <sbrk_aligned+0x38>
 8001e28:	f04f 34ff 	mov.w	r4, #4294967295
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
 8001e30:	200001d8 	.word	0x200001d8

08001e34 <_malloc_r>:
 8001e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e38:	1ccd      	adds	r5, r1, #3
 8001e3a:	f025 0503 	bic.w	r5, r5, #3
 8001e3e:	3508      	adds	r5, #8
 8001e40:	2d0c      	cmp	r5, #12
 8001e42:	bf38      	it	cc
 8001e44:	250c      	movcc	r5, #12
 8001e46:	2d00      	cmp	r5, #0
 8001e48:	4607      	mov	r7, r0
 8001e4a:	db01      	blt.n	8001e50 <_malloc_r+0x1c>
 8001e4c:	42a9      	cmp	r1, r5
 8001e4e:	d905      	bls.n	8001e5c <_malloc_r+0x28>
 8001e50:	230c      	movs	r3, #12
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	2600      	movs	r6, #0
 8001e56:	4630      	mov	r0, r6
 8001e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001f30 <_malloc_r+0xfc>
 8001e60:	f000 f868 	bl	8001f34 <__malloc_lock>
 8001e64:	f8d8 3000 	ldr.w	r3, [r8]
 8001e68:	461c      	mov	r4, r3
 8001e6a:	bb5c      	cbnz	r4, 8001ec4 <_malloc_r+0x90>
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	4638      	mov	r0, r7
 8001e70:	f7ff ffc0 	bl	8001df4 <sbrk_aligned>
 8001e74:	1c43      	adds	r3, r0, #1
 8001e76:	4604      	mov	r4, r0
 8001e78:	d155      	bne.n	8001f26 <_malloc_r+0xf2>
 8001e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8001e7e:	4626      	mov	r6, r4
 8001e80:	2e00      	cmp	r6, #0
 8001e82:	d145      	bne.n	8001f10 <_malloc_r+0xdc>
 8001e84:	2c00      	cmp	r4, #0
 8001e86:	d048      	beq.n	8001f1a <_malloc_r+0xe6>
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	4631      	mov	r1, r6
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	eb04 0903 	add.w	r9, r4, r3
 8001e92:	f000 fc73 	bl	800277c <_sbrk_r>
 8001e96:	4581      	cmp	r9, r0
 8001e98:	d13f      	bne.n	8001f1a <_malloc_r+0xe6>
 8001e9a:	6821      	ldr	r1, [r4, #0]
 8001e9c:	1a6d      	subs	r5, r5, r1
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	4638      	mov	r0, r7
 8001ea2:	f7ff ffa7 	bl	8001df4 <sbrk_aligned>
 8001ea6:	3001      	adds	r0, #1
 8001ea8:	d037      	beq.n	8001f1a <_malloc_r+0xe6>
 8001eaa:	6823      	ldr	r3, [r4, #0]
 8001eac:	442b      	add	r3, r5
 8001eae:	6023      	str	r3, [r4, #0]
 8001eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d038      	beq.n	8001f2a <_malloc_r+0xf6>
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	42a2      	cmp	r2, r4
 8001ebc:	d12b      	bne.n	8001f16 <_malloc_r+0xe2>
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	e00f      	b.n	8001ee4 <_malloc_r+0xb0>
 8001ec4:	6822      	ldr	r2, [r4, #0]
 8001ec6:	1b52      	subs	r2, r2, r5
 8001ec8:	d41f      	bmi.n	8001f0a <_malloc_r+0xd6>
 8001eca:	2a0b      	cmp	r2, #11
 8001ecc:	d917      	bls.n	8001efe <_malloc_r+0xca>
 8001ece:	1961      	adds	r1, r4, r5
 8001ed0:	42a3      	cmp	r3, r4
 8001ed2:	6025      	str	r5, [r4, #0]
 8001ed4:	bf18      	it	ne
 8001ed6:	6059      	strne	r1, [r3, #4]
 8001ed8:	6863      	ldr	r3, [r4, #4]
 8001eda:	bf08      	it	eq
 8001edc:	f8c8 1000 	streq.w	r1, [r8]
 8001ee0:	5162      	str	r2, [r4, r5]
 8001ee2:	604b      	str	r3, [r1, #4]
 8001ee4:	4638      	mov	r0, r7
 8001ee6:	f104 060b 	add.w	r6, r4, #11
 8001eea:	f000 f829 	bl	8001f40 <__malloc_unlock>
 8001eee:	f026 0607 	bic.w	r6, r6, #7
 8001ef2:	1d23      	adds	r3, r4, #4
 8001ef4:	1af2      	subs	r2, r6, r3
 8001ef6:	d0ae      	beq.n	8001e56 <_malloc_r+0x22>
 8001ef8:	1b9b      	subs	r3, r3, r6
 8001efa:	50a3      	str	r3, [r4, r2]
 8001efc:	e7ab      	b.n	8001e56 <_malloc_r+0x22>
 8001efe:	42a3      	cmp	r3, r4
 8001f00:	6862      	ldr	r2, [r4, #4]
 8001f02:	d1dd      	bne.n	8001ec0 <_malloc_r+0x8c>
 8001f04:	f8c8 2000 	str.w	r2, [r8]
 8001f08:	e7ec      	b.n	8001ee4 <_malloc_r+0xb0>
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	6864      	ldr	r4, [r4, #4]
 8001f0e:	e7ac      	b.n	8001e6a <_malloc_r+0x36>
 8001f10:	4634      	mov	r4, r6
 8001f12:	6876      	ldr	r6, [r6, #4]
 8001f14:	e7b4      	b.n	8001e80 <_malloc_r+0x4c>
 8001f16:	4613      	mov	r3, r2
 8001f18:	e7cc      	b.n	8001eb4 <_malloc_r+0x80>
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4638      	mov	r0, r7
 8001f20:	f000 f80e 	bl	8001f40 <__malloc_unlock>
 8001f24:	e797      	b.n	8001e56 <_malloc_r+0x22>
 8001f26:	6025      	str	r5, [r4, #0]
 8001f28:	e7dc      	b.n	8001ee4 <_malloc_r+0xb0>
 8001f2a:	605b      	str	r3, [r3, #4]
 8001f2c:	deff      	udf	#255	; 0xff
 8001f2e:	bf00      	nop
 8001f30:	200001d4 	.word	0x200001d4

08001f34 <__malloc_lock>:
 8001f34:	4801      	ldr	r0, [pc, #4]	; (8001f3c <__malloc_lock+0x8>)
 8001f36:	f7ff bf0f 	b.w	8001d58 <__retarget_lock_acquire_recursive>
 8001f3a:	bf00      	nop
 8001f3c:	200001d0 	.word	0x200001d0

08001f40 <__malloc_unlock>:
 8001f40:	4801      	ldr	r0, [pc, #4]	; (8001f48 <__malloc_unlock+0x8>)
 8001f42:	f7ff bf0a 	b.w	8001d5a <__retarget_lock_release_recursive>
 8001f46:	bf00      	nop
 8001f48:	200001d0 	.word	0x200001d0

08001f4c <__sfputc_r>:
 8001f4c:	6893      	ldr	r3, [r2, #8]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	b410      	push	{r4}
 8001f54:	6093      	str	r3, [r2, #8]
 8001f56:	da08      	bge.n	8001f6a <__sfputc_r+0x1e>
 8001f58:	6994      	ldr	r4, [r2, #24]
 8001f5a:	42a3      	cmp	r3, r4
 8001f5c:	db01      	blt.n	8001f62 <__sfputc_r+0x16>
 8001f5e:	290a      	cmp	r1, #10
 8001f60:	d103      	bne.n	8001f6a <__sfputc_r+0x1e>
 8001f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f66:	f000 bb73 	b.w	8002650 <__swbuf_r>
 8001f6a:	6813      	ldr	r3, [r2, #0]
 8001f6c:	1c58      	adds	r0, r3, #1
 8001f6e:	6010      	str	r0, [r2, #0]
 8001f70:	7019      	strb	r1, [r3, #0]
 8001f72:	4608      	mov	r0, r1
 8001f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <__sfputs_r>:
 8001f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7c:	4606      	mov	r6, r0
 8001f7e:	460f      	mov	r7, r1
 8001f80:	4614      	mov	r4, r2
 8001f82:	18d5      	adds	r5, r2, r3
 8001f84:	42ac      	cmp	r4, r5
 8001f86:	d101      	bne.n	8001f8c <__sfputs_r+0x12>
 8001f88:	2000      	movs	r0, #0
 8001f8a:	e007      	b.n	8001f9c <__sfputs_r+0x22>
 8001f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f90:	463a      	mov	r2, r7
 8001f92:	4630      	mov	r0, r6
 8001f94:	f7ff ffda 	bl	8001f4c <__sfputc_r>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d1f3      	bne.n	8001f84 <__sfputs_r+0xa>
 8001f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001fa0 <_vfiprintf_r>:
 8001fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fa4:	460d      	mov	r5, r1
 8001fa6:	b09d      	sub	sp, #116	; 0x74
 8001fa8:	4614      	mov	r4, r2
 8001faa:	4698      	mov	r8, r3
 8001fac:	4606      	mov	r6, r0
 8001fae:	b118      	cbz	r0, 8001fb8 <_vfiprintf_r+0x18>
 8001fb0:	6a03      	ldr	r3, [r0, #32]
 8001fb2:	b90b      	cbnz	r3, 8001fb8 <_vfiprintf_r+0x18>
 8001fb4:	f7ff fdcc 	bl	8001b50 <__sinit>
 8001fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fba:	07d9      	lsls	r1, r3, #31
 8001fbc:	d405      	bmi.n	8001fca <_vfiprintf_r+0x2a>
 8001fbe:	89ab      	ldrh	r3, [r5, #12]
 8001fc0:	059a      	lsls	r2, r3, #22
 8001fc2:	d402      	bmi.n	8001fca <_vfiprintf_r+0x2a>
 8001fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001fc6:	f7ff fec7 	bl	8001d58 <__retarget_lock_acquire_recursive>
 8001fca:	89ab      	ldrh	r3, [r5, #12]
 8001fcc:	071b      	lsls	r3, r3, #28
 8001fce:	d501      	bpl.n	8001fd4 <_vfiprintf_r+0x34>
 8001fd0:	692b      	ldr	r3, [r5, #16]
 8001fd2:	b99b      	cbnz	r3, 8001ffc <_vfiprintf_r+0x5c>
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	4630      	mov	r0, r6
 8001fd8:	f000 fb78 	bl	80026cc <__swsetup_r>
 8001fdc:	b170      	cbz	r0, 8001ffc <_vfiprintf_r+0x5c>
 8001fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001fe0:	07dc      	lsls	r4, r3, #31
 8001fe2:	d504      	bpl.n	8001fee <_vfiprintf_r+0x4e>
 8001fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe8:	b01d      	add	sp, #116	; 0x74
 8001fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fee:	89ab      	ldrh	r3, [r5, #12]
 8001ff0:	0598      	lsls	r0, r3, #22
 8001ff2:	d4f7      	bmi.n	8001fe4 <_vfiprintf_r+0x44>
 8001ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ff6:	f7ff feb0 	bl	8001d5a <__retarget_lock_release_recursive>
 8001ffa:	e7f3      	b.n	8001fe4 <_vfiprintf_r+0x44>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8002000:	2320      	movs	r3, #32
 8002002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002006:	f8cd 800c 	str.w	r8, [sp, #12]
 800200a:	2330      	movs	r3, #48	; 0x30
 800200c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80021c0 <_vfiprintf_r+0x220>
 8002010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002014:	f04f 0901 	mov.w	r9, #1
 8002018:	4623      	mov	r3, r4
 800201a:	469a      	mov	sl, r3
 800201c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002020:	b10a      	cbz	r2, 8002026 <_vfiprintf_r+0x86>
 8002022:	2a25      	cmp	r2, #37	; 0x25
 8002024:	d1f9      	bne.n	800201a <_vfiprintf_r+0x7a>
 8002026:	ebba 0b04 	subs.w	fp, sl, r4
 800202a:	d00b      	beq.n	8002044 <_vfiprintf_r+0xa4>
 800202c:	465b      	mov	r3, fp
 800202e:	4622      	mov	r2, r4
 8002030:	4629      	mov	r1, r5
 8002032:	4630      	mov	r0, r6
 8002034:	f7ff ffa1 	bl	8001f7a <__sfputs_r>
 8002038:	3001      	adds	r0, #1
 800203a:	f000 80a9 	beq.w	8002190 <_vfiprintf_r+0x1f0>
 800203e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002040:	445a      	add	r2, fp
 8002042:	9209      	str	r2, [sp, #36]	; 0x24
 8002044:	f89a 3000 	ldrb.w	r3, [sl]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a1 	beq.w	8002190 <_vfiprintf_r+0x1f0>
 800204e:	2300      	movs	r3, #0
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002058:	f10a 0a01 	add.w	sl, sl, #1
 800205c:	9304      	str	r3, [sp, #16]
 800205e:	9307      	str	r3, [sp, #28]
 8002060:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002064:	931a      	str	r3, [sp, #104]	; 0x68
 8002066:	4654      	mov	r4, sl
 8002068:	2205      	movs	r2, #5
 800206a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800206e:	4854      	ldr	r0, [pc, #336]	; (80021c0 <_vfiprintf_r+0x220>)
 8002070:	f7fe f8b6 	bl	80001e0 <memchr>
 8002074:	9a04      	ldr	r2, [sp, #16]
 8002076:	b9d8      	cbnz	r0, 80020b0 <_vfiprintf_r+0x110>
 8002078:	06d1      	lsls	r1, r2, #27
 800207a:	bf44      	itt	mi
 800207c:	2320      	movmi	r3, #32
 800207e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002082:	0713      	lsls	r3, r2, #28
 8002084:	bf44      	itt	mi
 8002086:	232b      	movmi	r3, #43	; 0x2b
 8002088:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800208c:	f89a 3000 	ldrb.w	r3, [sl]
 8002090:	2b2a      	cmp	r3, #42	; 0x2a
 8002092:	d015      	beq.n	80020c0 <_vfiprintf_r+0x120>
 8002094:	9a07      	ldr	r2, [sp, #28]
 8002096:	4654      	mov	r4, sl
 8002098:	2000      	movs	r0, #0
 800209a:	f04f 0c0a 	mov.w	ip, #10
 800209e:	4621      	mov	r1, r4
 80020a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020a4:	3b30      	subs	r3, #48	; 0x30
 80020a6:	2b09      	cmp	r3, #9
 80020a8:	d94d      	bls.n	8002146 <_vfiprintf_r+0x1a6>
 80020aa:	b1b0      	cbz	r0, 80020da <_vfiprintf_r+0x13a>
 80020ac:	9207      	str	r2, [sp, #28]
 80020ae:	e014      	b.n	80020da <_vfiprintf_r+0x13a>
 80020b0:	eba0 0308 	sub.w	r3, r0, r8
 80020b4:	fa09 f303 	lsl.w	r3, r9, r3
 80020b8:	4313      	orrs	r3, r2
 80020ba:	9304      	str	r3, [sp, #16]
 80020bc:	46a2      	mov	sl, r4
 80020be:	e7d2      	b.n	8002066 <_vfiprintf_r+0xc6>
 80020c0:	9b03      	ldr	r3, [sp, #12]
 80020c2:	1d19      	adds	r1, r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	9103      	str	r1, [sp, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bfbb      	ittet	lt
 80020cc:	425b      	neglt	r3, r3
 80020ce:	f042 0202 	orrlt.w	r2, r2, #2
 80020d2:	9307      	strge	r3, [sp, #28]
 80020d4:	9307      	strlt	r3, [sp, #28]
 80020d6:	bfb8      	it	lt
 80020d8:	9204      	strlt	r2, [sp, #16]
 80020da:	7823      	ldrb	r3, [r4, #0]
 80020dc:	2b2e      	cmp	r3, #46	; 0x2e
 80020de:	d10c      	bne.n	80020fa <_vfiprintf_r+0x15a>
 80020e0:	7863      	ldrb	r3, [r4, #1]
 80020e2:	2b2a      	cmp	r3, #42	; 0x2a
 80020e4:	d134      	bne.n	8002150 <_vfiprintf_r+0x1b0>
 80020e6:	9b03      	ldr	r3, [sp, #12]
 80020e8:	1d1a      	adds	r2, r3, #4
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	9203      	str	r2, [sp, #12]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	bfb8      	it	lt
 80020f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80020f6:	3402      	adds	r4, #2
 80020f8:	9305      	str	r3, [sp, #20]
 80020fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80021d0 <_vfiprintf_r+0x230>
 80020fe:	7821      	ldrb	r1, [r4, #0]
 8002100:	2203      	movs	r2, #3
 8002102:	4650      	mov	r0, sl
 8002104:	f7fe f86c 	bl	80001e0 <memchr>
 8002108:	b138      	cbz	r0, 800211a <_vfiprintf_r+0x17a>
 800210a:	9b04      	ldr	r3, [sp, #16]
 800210c:	eba0 000a 	sub.w	r0, r0, sl
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	4082      	lsls	r2, r0
 8002114:	4313      	orrs	r3, r2
 8002116:	3401      	adds	r4, #1
 8002118:	9304      	str	r3, [sp, #16]
 800211a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800211e:	4829      	ldr	r0, [pc, #164]	; (80021c4 <_vfiprintf_r+0x224>)
 8002120:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002124:	2206      	movs	r2, #6
 8002126:	f7fe f85b 	bl	80001e0 <memchr>
 800212a:	2800      	cmp	r0, #0
 800212c:	d03f      	beq.n	80021ae <_vfiprintf_r+0x20e>
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <_vfiprintf_r+0x228>)
 8002130:	bb1b      	cbnz	r3, 800217a <_vfiprintf_r+0x1da>
 8002132:	9b03      	ldr	r3, [sp, #12]
 8002134:	3307      	adds	r3, #7
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	3308      	adds	r3, #8
 800213c:	9303      	str	r3, [sp, #12]
 800213e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002140:	443b      	add	r3, r7
 8002142:	9309      	str	r3, [sp, #36]	; 0x24
 8002144:	e768      	b.n	8002018 <_vfiprintf_r+0x78>
 8002146:	fb0c 3202 	mla	r2, ip, r2, r3
 800214a:	460c      	mov	r4, r1
 800214c:	2001      	movs	r0, #1
 800214e:	e7a6      	b.n	800209e <_vfiprintf_r+0xfe>
 8002150:	2300      	movs	r3, #0
 8002152:	3401      	adds	r4, #1
 8002154:	9305      	str	r3, [sp, #20]
 8002156:	4619      	mov	r1, r3
 8002158:	f04f 0c0a 	mov.w	ip, #10
 800215c:	4620      	mov	r0, r4
 800215e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002162:	3a30      	subs	r2, #48	; 0x30
 8002164:	2a09      	cmp	r2, #9
 8002166:	d903      	bls.n	8002170 <_vfiprintf_r+0x1d0>
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0c6      	beq.n	80020fa <_vfiprintf_r+0x15a>
 800216c:	9105      	str	r1, [sp, #20]
 800216e:	e7c4      	b.n	80020fa <_vfiprintf_r+0x15a>
 8002170:	fb0c 2101 	mla	r1, ip, r1, r2
 8002174:	4604      	mov	r4, r0
 8002176:	2301      	movs	r3, #1
 8002178:	e7f0      	b.n	800215c <_vfiprintf_r+0x1bc>
 800217a:	ab03      	add	r3, sp, #12
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	462a      	mov	r2, r5
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <_vfiprintf_r+0x22c>)
 8002182:	a904      	add	r1, sp, #16
 8002184:	4630      	mov	r0, r6
 8002186:	f3af 8000 	nop.w
 800218a:	4607      	mov	r7, r0
 800218c:	1c78      	adds	r0, r7, #1
 800218e:	d1d6      	bne.n	800213e <_vfiprintf_r+0x19e>
 8002190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002192:	07d9      	lsls	r1, r3, #31
 8002194:	d405      	bmi.n	80021a2 <_vfiprintf_r+0x202>
 8002196:	89ab      	ldrh	r3, [r5, #12]
 8002198:	059a      	lsls	r2, r3, #22
 800219a:	d402      	bmi.n	80021a2 <_vfiprintf_r+0x202>
 800219c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800219e:	f7ff fddc 	bl	8001d5a <__retarget_lock_release_recursive>
 80021a2:	89ab      	ldrh	r3, [r5, #12]
 80021a4:	065b      	lsls	r3, r3, #25
 80021a6:	f53f af1d 	bmi.w	8001fe4 <_vfiprintf_r+0x44>
 80021aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021ac:	e71c      	b.n	8001fe8 <_vfiprintf_r+0x48>
 80021ae:	ab03      	add	r3, sp, #12
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	462a      	mov	r2, r5
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <_vfiprintf_r+0x22c>)
 80021b6:	a904      	add	r1, sp, #16
 80021b8:	4630      	mov	r0, r6
 80021ba:	f000 f879 	bl	80022b0 <_printf_i>
 80021be:	e7e4      	b.n	800218a <_vfiprintf_r+0x1ea>
 80021c0:	080028da 	.word	0x080028da
 80021c4:	080028e4 	.word	0x080028e4
 80021c8:	00000000 	.word	0x00000000
 80021cc:	08001f7b 	.word	0x08001f7b
 80021d0:	080028e0 	.word	0x080028e0

080021d4 <_printf_common>:
 80021d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021d8:	4616      	mov	r6, r2
 80021da:	4699      	mov	r9, r3
 80021dc:	688a      	ldr	r2, [r1, #8]
 80021de:	690b      	ldr	r3, [r1, #16]
 80021e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80021e4:	4293      	cmp	r3, r2
 80021e6:	bfb8      	it	lt
 80021e8:	4613      	movlt	r3, r2
 80021ea:	6033      	str	r3, [r6, #0]
 80021ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80021f0:	4607      	mov	r7, r0
 80021f2:	460c      	mov	r4, r1
 80021f4:	b10a      	cbz	r2, 80021fa <_printf_common+0x26>
 80021f6:	3301      	adds	r3, #1
 80021f8:	6033      	str	r3, [r6, #0]
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	0699      	lsls	r1, r3, #26
 80021fe:	bf42      	ittt	mi
 8002200:	6833      	ldrmi	r3, [r6, #0]
 8002202:	3302      	addmi	r3, #2
 8002204:	6033      	strmi	r3, [r6, #0]
 8002206:	6825      	ldr	r5, [r4, #0]
 8002208:	f015 0506 	ands.w	r5, r5, #6
 800220c:	d106      	bne.n	800221c <_printf_common+0x48>
 800220e:	f104 0a19 	add.w	sl, r4, #25
 8002212:	68e3      	ldr	r3, [r4, #12]
 8002214:	6832      	ldr	r2, [r6, #0]
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	42ab      	cmp	r3, r5
 800221a:	dc26      	bgt.n	800226a <_printf_common+0x96>
 800221c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002220:	1e13      	subs	r3, r2, #0
 8002222:	6822      	ldr	r2, [r4, #0]
 8002224:	bf18      	it	ne
 8002226:	2301      	movne	r3, #1
 8002228:	0692      	lsls	r2, r2, #26
 800222a:	d42b      	bmi.n	8002284 <_printf_common+0xb0>
 800222c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002230:	4649      	mov	r1, r9
 8002232:	4638      	mov	r0, r7
 8002234:	47c0      	blx	r8
 8002236:	3001      	adds	r0, #1
 8002238:	d01e      	beq.n	8002278 <_printf_common+0xa4>
 800223a:	6823      	ldr	r3, [r4, #0]
 800223c:	6922      	ldr	r2, [r4, #16]
 800223e:	f003 0306 	and.w	r3, r3, #6
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf02      	ittt	eq
 8002246:	68e5      	ldreq	r5, [r4, #12]
 8002248:	6833      	ldreq	r3, [r6, #0]
 800224a:	1aed      	subeq	r5, r5, r3
 800224c:	68a3      	ldr	r3, [r4, #8]
 800224e:	bf0c      	ite	eq
 8002250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002254:	2500      	movne	r5, #0
 8002256:	4293      	cmp	r3, r2
 8002258:	bfc4      	itt	gt
 800225a:	1a9b      	subgt	r3, r3, r2
 800225c:	18ed      	addgt	r5, r5, r3
 800225e:	2600      	movs	r6, #0
 8002260:	341a      	adds	r4, #26
 8002262:	42b5      	cmp	r5, r6
 8002264:	d11a      	bne.n	800229c <_printf_common+0xc8>
 8002266:	2000      	movs	r0, #0
 8002268:	e008      	b.n	800227c <_printf_common+0xa8>
 800226a:	2301      	movs	r3, #1
 800226c:	4652      	mov	r2, sl
 800226e:	4649      	mov	r1, r9
 8002270:	4638      	mov	r0, r7
 8002272:	47c0      	blx	r8
 8002274:	3001      	adds	r0, #1
 8002276:	d103      	bne.n	8002280 <_printf_common+0xac>
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002280:	3501      	adds	r5, #1
 8002282:	e7c6      	b.n	8002212 <_printf_common+0x3e>
 8002284:	18e1      	adds	r1, r4, r3
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	2030      	movs	r0, #48	; 0x30
 800228a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800228e:	4422      	add	r2, r4
 8002290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002298:	3302      	adds	r3, #2
 800229a:	e7c7      	b.n	800222c <_printf_common+0x58>
 800229c:	2301      	movs	r3, #1
 800229e:	4622      	mov	r2, r4
 80022a0:	4649      	mov	r1, r9
 80022a2:	4638      	mov	r0, r7
 80022a4:	47c0      	blx	r8
 80022a6:	3001      	adds	r0, #1
 80022a8:	d0e6      	beq.n	8002278 <_printf_common+0xa4>
 80022aa:	3601      	adds	r6, #1
 80022ac:	e7d9      	b.n	8002262 <_printf_common+0x8e>
	...

080022b0 <_printf_i>:
 80022b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80022b4:	7e0f      	ldrb	r7, [r1, #24]
 80022b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80022b8:	2f78      	cmp	r7, #120	; 0x78
 80022ba:	4691      	mov	r9, r2
 80022bc:	4680      	mov	r8, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	469a      	mov	sl, r3
 80022c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80022c6:	d807      	bhi.n	80022d8 <_printf_i+0x28>
 80022c8:	2f62      	cmp	r7, #98	; 0x62
 80022ca:	d80a      	bhi.n	80022e2 <_printf_i+0x32>
 80022cc:	2f00      	cmp	r7, #0
 80022ce:	f000 80d4 	beq.w	800247a <_printf_i+0x1ca>
 80022d2:	2f58      	cmp	r7, #88	; 0x58
 80022d4:	f000 80c0 	beq.w	8002458 <_printf_i+0x1a8>
 80022d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80022e0:	e03a      	b.n	8002358 <_printf_i+0xa8>
 80022e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80022e6:	2b15      	cmp	r3, #21
 80022e8:	d8f6      	bhi.n	80022d8 <_printf_i+0x28>
 80022ea:	a101      	add	r1, pc, #4	; (adr r1, 80022f0 <_printf_i+0x40>)
 80022ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80022f0:	08002349 	.word	0x08002349
 80022f4:	0800235d 	.word	0x0800235d
 80022f8:	080022d9 	.word	0x080022d9
 80022fc:	080022d9 	.word	0x080022d9
 8002300:	080022d9 	.word	0x080022d9
 8002304:	080022d9 	.word	0x080022d9
 8002308:	0800235d 	.word	0x0800235d
 800230c:	080022d9 	.word	0x080022d9
 8002310:	080022d9 	.word	0x080022d9
 8002314:	080022d9 	.word	0x080022d9
 8002318:	080022d9 	.word	0x080022d9
 800231c:	08002461 	.word	0x08002461
 8002320:	08002389 	.word	0x08002389
 8002324:	0800241b 	.word	0x0800241b
 8002328:	080022d9 	.word	0x080022d9
 800232c:	080022d9 	.word	0x080022d9
 8002330:	08002483 	.word	0x08002483
 8002334:	080022d9 	.word	0x080022d9
 8002338:	08002389 	.word	0x08002389
 800233c:	080022d9 	.word	0x080022d9
 8002340:	080022d9 	.word	0x080022d9
 8002344:	08002423 	.word	0x08002423
 8002348:	682b      	ldr	r3, [r5, #0]
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	602a      	str	r2, [r5, #0]
 8002350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002358:	2301      	movs	r3, #1
 800235a:	e09f      	b.n	800249c <_printf_i+0x1ec>
 800235c:	6820      	ldr	r0, [r4, #0]
 800235e:	682b      	ldr	r3, [r5, #0]
 8002360:	0607      	lsls	r7, r0, #24
 8002362:	f103 0104 	add.w	r1, r3, #4
 8002366:	6029      	str	r1, [r5, #0]
 8002368:	d501      	bpl.n	800236e <_printf_i+0xbe>
 800236a:	681e      	ldr	r6, [r3, #0]
 800236c:	e003      	b.n	8002376 <_printf_i+0xc6>
 800236e:	0646      	lsls	r6, r0, #25
 8002370:	d5fb      	bpl.n	800236a <_printf_i+0xba>
 8002372:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002376:	2e00      	cmp	r6, #0
 8002378:	da03      	bge.n	8002382 <_printf_i+0xd2>
 800237a:	232d      	movs	r3, #45	; 0x2d
 800237c:	4276      	negs	r6, r6
 800237e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002382:	485a      	ldr	r0, [pc, #360]	; (80024ec <_printf_i+0x23c>)
 8002384:	230a      	movs	r3, #10
 8002386:	e012      	b.n	80023ae <_printf_i+0xfe>
 8002388:	682b      	ldr	r3, [r5, #0]
 800238a:	6820      	ldr	r0, [r4, #0]
 800238c:	1d19      	adds	r1, r3, #4
 800238e:	6029      	str	r1, [r5, #0]
 8002390:	0605      	lsls	r5, r0, #24
 8002392:	d501      	bpl.n	8002398 <_printf_i+0xe8>
 8002394:	681e      	ldr	r6, [r3, #0]
 8002396:	e002      	b.n	800239e <_printf_i+0xee>
 8002398:	0641      	lsls	r1, r0, #25
 800239a:	d5fb      	bpl.n	8002394 <_printf_i+0xe4>
 800239c:	881e      	ldrh	r6, [r3, #0]
 800239e:	4853      	ldr	r0, [pc, #332]	; (80024ec <_printf_i+0x23c>)
 80023a0:	2f6f      	cmp	r7, #111	; 0x6f
 80023a2:	bf0c      	ite	eq
 80023a4:	2308      	moveq	r3, #8
 80023a6:	230a      	movne	r3, #10
 80023a8:	2100      	movs	r1, #0
 80023aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023ae:	6865      	ldr	r5, [r4, #4]
 80023b0:	60a5      	str	r5, [r4, #8]
 80023b2:	2d00      	cmp	r5, #0
 80023b4:	bfa2      	ittt	ge
 80023b6:	6821      	ldrge	r1, [r4, #0]
 80023b8:	f021 0104 	bicge.w	r1, r1, #4
 80023bc:	6021      	strge	r1, [r4, #0]
 80023be:	b90e      	cbnz	r6, 80023c4 <_printf_i+0x114>
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	d04b      	beq.n	800245c <_printf_i+0x1ac>
 80023c4:	4615      	mov	r5, r2
 80023c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80023ca:	fb03 6711 	mls	r7, r3, r1, r6
 80023ce:	5dc7      	ldrb	r7, [r0, r7]
 80023d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80023d4:	4637      	mov	r7, r6
 80023d6:	42bb      	cmp	r3, r7
 80023d8:	460e      	mov	r6, r1
 80023da:	d9f4      	bls.n	80023c6 <_printf_i+0x116>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d10b      	bne.n	80023f8 <_printf_i+0x148>
 80023e0:	6823      	ldr	r3, [r4, #0]
 80023e2:	07de      	lsls	r6, r3, #31
 80023e4:	d508      	bpl.n	80023f8 <_printf_i+0x148>
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	6861      	ldr	r1, [r4, #4]
 80023ea:	4299      	cmp	r1, r3
 80023ec:	bfde      	ittt	le
 80023ee:	2330      	movle	r3, #48	; 0x30
 80023f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80023f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80023f8:	1b52      	subs	r2, r2, r5
 80023fa:	6122      	str	r2, [r4, #16]
 80023fc:	f8cd a000 	str.w	sl, [sp]
 8002400:	464b      	mov	r3, r9
 8002402:	aa03      	add	r2, sp, #12
 8002404:	4621      	mov	r1, r4
 8002406:	4640      	mov	r0, r8
 8002408:	f7ff fee4 	bl	80021d4 <_printf_common>
 800240c:	3001      	adds	r0, #1
 800240e:	d14a      	bne.n	80024a6 <_printf_i+0x1f6>
 8002410:	f04f 30ff 	mov.w	r0, #4294967295
 8002414:	b004      	add	sp, #16
 8002416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800241a:	6823      	ldr	r3, [r4, #0]
 800241c:	f043 0320 	orr.w	r3, r3, #32
 8002420:	6023      	str	r3, [r4, #0]
 8002422:	4833      	ldr	r0, [pc, #204]	; (80024f0 <_printf_i+0x240>)
 8002424:	2778      	movs	r7, #120	; 0x78
 8002426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	6829      	ldr	r1, [r5, #0]
 800242e:	061f      	lsls	r7, r3, #24
 8002430:	f851 6b04 	ldr.w	r6, [r1], #4
 8002434:	d402      	bmi.n	800243c <_printf_i+0x18c>
 8002436:	065f      	lsls	r7, r3, #25
 8002438:	bf48      	it	mi
 800243a:	b2b6      	uxthmi	r6, r6
 800243c:	07df      	lsls	r7, r3, #31
 800243e:	bf48      	it	mi
 8002440:	f043 0320 	orrmi.w	r3, r3, #32
 8002444:	6029      	str	r1, [r5, #0]
 8002446:	bf48      	it	mi
 8002448:	6023      	strmi	r3, [r4, #0]
 800244a:	b91e      	cbnz	r6, 8002454 <_printf_i+0x1a4>
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	f023 0320 	bic.w	r3, r3, #32
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	2310      	movs	r3, #16
 8002456:	e7a7      	b.n	80023a8 <_printf_i+0xf8>
 8002458:	4824      	ldr	r0, [pc, #144]	; (80024ec <_printf_i+0x23c>)
 800245a:	e7e4      	b.n	8002426 <_printf_i+0x176>
 800245c:	4615      	mov	r5, r2
 800245e:	e7bd      	b.n	80023dc <_printf_i+0x12c>
 8002460:	682b      	ldr	r3, [r5, #0]
 8002462:	6826      	ldr	r6, [r4, #0]
 8002464:	6961      	ldr	r1, [r4, #20]
 8002466:	1d18      	adds	r0, r3, #4
 8002468:	6028      	str	r0, [r5, #0]
 800246a:	0635      	lsls	r5, r6, #24
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	d501      	bpl.n	8002474 <_printf_i+0x1c4>
 8002470:	6019      	str	r1, [r3, #0]
 8002472:	e002      	b.n	800247a <_printf_i+0x1ca>
 8002474:	0670      	lsls	r0, r6, #25
 8002476:	d5fb      	bpl.n	8002470 <_printf_i+0x1c0>
 8002478:	8019      	strh	r1, [r3, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	6123      	str	r3, [r4, #16]
 800247e:	4615      	mov	r5, r2
 8002480:	e7bc      	b.n	80023fc <_printf_i+0x14c>
 8002482:	682b      	ldr	r3, [r5, #0]
 8002484:	1d1a      	adds	r2, r3, #4
 8002486:	602a      	str	r2, [r5, #0]
 8002488:	681d      	ldr	r5, [r3, #0]
 800248a:	6862      	ldr	r2, [r4, #4]
 800248c:	2100      	movs	r1, #0
 800248e:	4628      	mov	r0, r5
 8002490:	f7fd fea6 	bl	80001e0 <memchr>
 8002494:	b108      	cbz	r0, 800249a <_printf_i+0x1ea>
 8002496:	1b40      	subs	r0, r0, r5
 8002498:	6060      	str	r0, [r4, #4]
 800249a:	6863      	ldr	r3, [r4, #4]
 800249c:	6123      	str	r3, [r4, #16]
 800249e:	2300      	movs	r3, #0
 80024a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024a4:	e7aa      	b.n	80023fc <_printf_i+0x14c>
 80024a6:	6923      	ldr	r3, [r4, #16]
 80024a8:	462a      	mov	r2, r5
 80024aa:	4649      	mov	r1, r9
 80024ac:	4640      	mov	r0, r8
 80024ae:	47d0      	blx	sl
 80024b0:	3001      	adds	r0, #1
 80024b2:	d0ad      	beq.n	8002410 <_printf_i+0x160>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	079b      	lsls	r3, r3, #30
 80024b8:	d413      	bmi.n	80024e2 <_printf_i+0x232>
 80024ba:	68e0      	ldr	r0, [r4, #12]
 80024bc:	9b03      	ldr	r3, [sp, #12]
 80024be:	4298      	cmp	r0, r3
 80024c0:	bfb8      	it	lt
 80024c2:	4618      	movlt	r0, r3
 80024c4:	e7a6      	b.n	8002414 <_printf_i+0x164>
 80024c6:	2301      	movs	r3, #1
 80024c8:	4632      	mov	r2, r6
 80024ca:	4649      	mov	r1, r9
 80024cc:	4640      	mov	r0, r8
 80024ce:	47d0      	blx	sl
 80024d0:	3001      	adds	r0, #1
 80024d2:	d09d      	beq.n	8002410 <_printf_i+0x160>
 80024d4:	3501      	adds	r5, #1
 80024d6:	68e3      	ldr	r3, [r4, #12]
 80024d8:	9903      	ldr	r1, [sp, #12]
 80024da:	1a5b      	subs	r3, r3, r1
 80024dc:	42ab      	cmp	r3, r5
 80024de:	dcf2      	bgt.n	80024c6 <_printf_i+0x216>
 80024e0:	e7eb      	b.n	80024ba <_printf_i+0x20a>
 80024e2:	2500      	movs	r5, #0
 80024e4:	f104 0619 	add.w	r6, r4, #25
 80024e8:	e7f5      	b.n	80024d6 <_printf_i+0x226>
 80024ea:	bf00      	nop
 80024ec:	080028eb 	.word	0x080028eb
 80024f0:	080028fc 	.word	0x080028fc

080024f4 <__sflush_r>:
 80024f4:	898a      	ldrh	r2, [r1, #12]
 80024f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024fa:	4605      	mov	r5, r0
 80024fc:	0710      	lsls	r0, r2, #28
 80024fe:	460c      	mov	r4, r1
 8002500:	d458      	bmi.n	80025b4 <__sflush_r+0xc0>
 8002502:	684b      	ldr	r3, [r1, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	dc05      	bgt.n	8002514 <__sflush_r+0x20>
 8002508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800250a:	2b00      	cmp	r3, #0
 800250c:	dc02      	bgt.n	8002514 <__sflush_r+0x20>
 800250e:	2000      	movs	r0, #0
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002516:	2e00      	cmp	r6, #0
 8002518:	d0f9      	beq.n	800250e <__sflush_r+0x1a>
 800251a:	2300      	movs	r3, #0
 800251c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002520:	682f      	ldr	r7, [r5, #0]
 8002522:	6a21      	ldr	r1, [r4, #32]
 8002524:	602b      	str	r3, [r5, #0]
 8002526:	d032      	beq.n	800258e <__sflush_r+0x9a>
 8002528:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	075a      	lsls	r2, r3, #29
 800252e:	d505      	bpl.n	800253c <__sflush_r+0x48>
 8002530:	6863      	ldr	r3, [r4, #4]
 8002532:	1ac0      	subs	r0, r0, r3
 8002534:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002536:	b10b      	cbz	r3, 800253c <__sflush_r+0x48>
 8002538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800253a:	1ac0      	subs	r0, r0, r3
 800253c:	2300      	movs	r3, #0
 800253e:	4602      	mov	r2, r0
 8002540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002542:	6a21      	ldr	r1, [r4, #32]
 8002544:	4628      	mov	r0, r5
 8002546:	47b0      	blx	r6
 8002548:	1c43      	adds	r3, r0, #1
 800254a:	89a3      	ldrh	r3, [r4, #12]
 800254c:	d106      	bne.n	800255c <__sflush_r+0x68>
 800254e:	6829      	ldr	r1, [r5, #0]
 8002550:	291d      	cmp	r1, #29
 8002552:	d82b      	bhi.n	80025ac <__sflush_r+0xb8>
 8002554:	4a29      	ldr	r2, [pc, #164]	; (80025fc <__sflush_r+0x108>)
 8002556:	410a      	asrs	r2, r1
 8002558:	07d6      	lsls	r6, r2, #31
 800255a:	d427      	bmi.n	80025ac <__sflush_r+0xb8>
 800255c:	2200      	movs	r2, #0
 800255e:	6062      	str	r2, [r4, #4]
 8002560:	04d9      	lsls	r1, r3, #19
 8002562:	6922      	ldr	r2, [r4, #16]
 8002564:	6022      	str	r2, [r4, #0]
 8002566:	d504      	bpl.n	8002572 <__sflush_r+0x7e>
 8002568:	1c42      	adds	r2, r0, #1
 800256a:	d101      	bne.n	8002570 <__sflush_r+0x7c>
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	b903      	cbnz	r3, 8002572 <__sflush_r+0x7e>
 8002570:	6560      	str	r0, [r4, #84]	; 0x54
 8002572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002574:	602f      	str	r7, [r5, #0]
 8002576:	2900      	cmp	r1, #0
 8002578:	d0c9      	beq.n	800250e <__sflush_r+0x1a>
 800257a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800257e:	4299      	cmp	r1, r3
 8002580:	d002      	beq.n	8002588 <__sflush_r+0x94>
 8002582:	4628      	mov	r0, r5
 8002584:	f7ff fbea 	bl	8001d5c <_free_r>
 8002588:	2000      	movs	r0, #0
 800258a:	6360      	str	r0, [r4, #52]	; 0x34
 800258c:	e7c0      	b.n	8002510 <__sflush_r+0x1c>
 800258e:	2301      	movs	r3, #1
 8002590:	4628      	mov	r0, r5
 8002592:	47b0      	blx	r6
 8002594:	1c41      	adds	r1, r0, #1
 8002596:	d1c8      	bne.n	800252a <__sflush_r+0x36>
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0c5      	beq.n	800252a <__sflush_r+0x36>
 800259e:	2b1d      	cmp	r3, #29
 80025a0:	d001      	beq.n	80025a6 <__sflush_r+0xb2>
 80025a2:	2b16      	cmp	r3, #22
 80025a4:	d101      	bne.n	80025aa <__sflush_r+0xb6>
 80025a6:	602f      	str	r7, [r5, #0]
 80025a8:	e7b1      	b.n	800250e <__sflush_r+0x1a>
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025b0:	81a3      	strh	r3, [r4, #12]
 80025b2:	e7ad      	b.n	8002510 <__sflush_r+0x1c>
 80025b4:	690f      	ldr	r7, [r1, #16]
 80025b6:	2f00      	cmp	r7, #0
 80025b8:	d0a9      	beq.n	800250e <__sflush_r+0x1a>
 80025ba:	0793      	lsls	r3, r2, #30
 80025bc:	680e      	ldr	r6, [r1, #0]
 80025be:	bf08      	it	eq
 80025c0:	694b      	ldreq	r3, [r1, #20]
 80025c2:	600f      	str	r7, [r1, #0]
 80025c4:	bf18      	it	ne
 80025c6:	2300      	movne	r3, #0
 80025c8:	eba6 0807 	sub.w	r8, r6, r7
 80025cc:	608b      	str	r3, [r1, #8]
 80025ce:	f1b8 0f00 	cmp.w	r8, #0
 80025d2:	dd9c      	ble.n	800250e <__sflush_r+0x1a>
 80025d4:	6a21      	ldr	r1, [r4, #32]
 80025d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80025d8:	4643      	mov	r3, r8
 80025da:	463a      	mov	r2, r7
 80025dc:	4628      	mov	r0, r5
 80025de:	47b0      	blx	r6
 80025e0:	2800      	cmp	r0, #0
 80025e2:	dc06      	bgt.n	80025f2 <__sflush_r+0xfe>
 80025e4:	89a3      	ldrh	r3, [r4, #12]
 80025e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ea:	81a3      	strh	r3, [r4, #12]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	e78e      	b.n	8002510 <__sflush_r+0x1c>
 80025f2:	4407      	add	r7, r0
 80025f4:	eba8 0800 	sub.w	r8, r8, r0
 80025f8:	e7e9      	b.n	80025ce <__sflush_r+0xda>
 80025fa:	bf00      	nop
 80025fc:	dfbffffe 	.word	0xdfbffffe

08002600 <_fflush_r>:
 8002600:	b538      	push	{r3, r4, r5, lr}
 8002602:	690b      	ldr	r3, [r1, #16]
 8002604:	4605      	mov	r5, r0
 8002606:	460c      	mov	r4, r1
 8002608:	b913      	cbnz	r3, 8002610 <_fflush_r+0x10>
 800260a:	2500      	movs	r5, #0
 800260c:	4628      	mov	r0, r5
 800260e:	bd38      	pop	{r3, r4, r5, pc}
 8002610:	b118      	cbz	r0, 800261a <_fflush_r+0x1a>
 8002612:	6a03      	ldr	r3, [r0, #32]
 8002614:	b90b      	cbnz	r3, 800261a <_fflush_r+0x1a>
 8002616:	f7ff fa9b 	bl	8001b50 <__sinit>
 800261a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f3      	beq.n	800260a <_fflush_r+0xa>
 8002622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002624:	07d0      	lsls	r0, r2, #31
 8002626:	d404      	bmi.n	8002632 <_fflush_r+0x32>
 8002628:	0599      	lsls	r1, r3, #22
 800262a:	d402      	bmi.n	8002632 <_fflush_r+0x32>
 800262c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800262e:	f7ff fb93 	bl	8001d58 <__retarget_lock_acquire_recursive>
 8002632:	4628      	mov	r0, r5
 8002634:	4621      	mov	r1, r4
 8002636:	f7ff ff5d 	bl	80024f4 <__sflush_r>
 800263a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800263c:	07da      	lsls	r2, r3, #31
 800263e:	4605      	mov	r5, r0
 8002640:	d4e4      	bmi.n	800260c <_fflush_r+0xc>
 8002642:	89a3      	ldrh	r3, [r4, #12]
 8002644:	059b      	lsls	r3, r3, #22
 8002646:	d4e1      	bmi.n	800260c <_fflush_r+0xc>
 8002648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800264a:	f7ff fb86 	bl	8001d5a <__retarget_lock_release_recursive>
 800264e:	e7dd      	b.n	800260c <_fflush_r+0xc>

08002650 <__swbuf_r>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	460e      	mov	r6, r1
 8002654:	4614      	mov	r4, r2
 8002656:	4605      	mov	r5, r0
 8002658:	b118      	cbz	r0, 8002662 <__swbuf_r+0x12>
 800265a:	6a03      	ldr	r3, [r0, #32]
 800265c:	b90b      	cbnz	r3, 8002662 <__swbuf_r+0x12>
 800265e:	f7ff fa77 	bl	8001b50 <__sinit>
 8002662:	69a3      	ldr	r3, [r4, #24]
 8002664:	60a3      	str	r3, [r4, #8]
 8002666:	89a3      	ldrh	r3, [r4, #12]
 8002668:	071a      	lsls	r2, r3, #28
 800266a:	d525      	bpl.n	80026b8 <__swbuf_r+0x68>
 800266c:	6923      	ldr	r3, [r4, #16]
 800266e:	b31b      	cbz	r3, 80026b8 <__swbuf_r+0x68>
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	6922      	ldr	r2, [r4, #16]
 8002674:	1a98      	subs	r0, r3, r2
 8002676:	6963      	ldr	r3, [r4, #20]
 8002678:	b2f6      	uxtb	r6, r6
 800267a:	4283      	cmp	r3, r0
 800267c:	4637      	mov	r7, r6
 800267e:	dc04      	bgt.n	800268a <__swbuf_r+0x3a>
 8002680:	4621      	mov	r1, r4
 8002682:	4628      	mov	r0, r5
 8002684:	f7ff ffbc 	bl	8002600 <_fflush_r>
 8002688:	b9e0      	cbnz	r0, 80026c4 <__swbuf_r+0x74>
 800268a:	68a3      	ldr	r3, [r4, #8]
 800268c:	3b01      	subs	r3, #1
 800268e:	60a3      	str	r3, [r4, #8]
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	6022      	str	r2, [r4, #0]
 8002696:	701e      	strb	r6, [r3, #0]
 8002698:	6962      	ldr	r2, [r4, #20]
 800269a:	1c43      	adds	r3, r0, #1
 800269c:	429a      	cmp	r2, r3
 800269e:	d004      	beq.n	80026aa <__swbuf_r+0x5a>
 80026a0:	89a3      	ldrh	r3, [r4, #12]
 80026a2:	07db      	lsls	r3, r3, #31
 80026a4:	d506      	bpl.n	80026b4 <__swbuf_r+0x64>
 80026a6:	2e0a      	cmp	r6, #10
 80026a8:	d104      	bne.n	80026b4 <__swbuf_r+0x64>
 80026aa:	4621      	mov	r1, r4
 80026ac:	4628      	mov	r0, r5
 80026ae:	f7ff ffa7 	bl	8002600 <_fflush_r>
 80026b2:	b938      	cbnz	r0, 80026c4 <__swbuf_r+0x74>
 80026b4:	4638      	mov	r0, r7
 80026b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026b8:	4621      	mov	r1, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f806 	bl	80026cc <__swsetup_r>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	d0d5      	beq.n	8002670 <__swbuf_r+0x20>
 80026c4:	f04f 37ff 	mov.w	r7, #4294967295
 80026c8:	e7f4      	b.n	80026b4 <__swbuf_r+0x64>
	...

080026cc <__swsetup_r>:
 80026cc:	b538      	push	{r3, r4, r5, lr}
 80026ce:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <__swsetup_r+0xac>)
 80026d0:	4605      	mov	r5, r0
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	460c      	mov	r4, r1
 80026d6:	b118      	cbz	r0, 80026e0 <__swsetup_r+0x14>
 80026d8:	6a03      	ldr	r3, [r0, #32]
 80026da:	b90b      	cbnz	r3, 80026e0 <__swsetup_r+0x14>
 80026dc:	f7ff fa38 	bl	8001b50 <__sinit>
 80026e0:	89a3      	ldrh	r3, [r4, #12]
 80026e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80026e6:	0718      	lsls	r0, r3, #28
 80026e8:	d422      	bmi.n	8002730 <__swsetup_r+0x64>
 80026ea:	06d9      	lsls	r1, r3, #27
 80026ec:	d407      	bmi.n	80026fe <__swsetup_r+0x32>
 80026ee:	2309      	movs	r3, #9
 80026f0:	602b      	str	r3, [r5, #0]
 80026f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80026f6:	81a3      	strh	r3, [r4, #12]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	e034      	b.n	8002768 <__swsetup_r+0x9c>
 80026fe:	0758      	lsls	r0, r3, #29
 8002700:	d512      	bpl.n	8002728 <__swsetup_r+0x5c>
 8002702:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002704:	b141      	cbz	r1, 8002718 <__swsetup_r+0x4c>
 8002706:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800270a:	4299      	cmp	r1, r3
 800270c:	d002      	beq.n	8002714 <__swsetup_r+0x48>
 800270e:	4628      	mov	r0, r5
 8002710:	f7ff fb24 	bl	8001d5c <_free_r>
 8002714:	2300      	movs	r3, #0
 8002716:	6363      	str	r3, [r4, #52]	; 0x34
 8002718:	89a3      	ldrh	r3, [r4, #12]
 800271a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800271e:	81a3      	strh	r3, [r4, #12]
 8002720:	2300      	movs	r3, #0
 8002722:	6063      	str	r3, [r4, #4]
 8002724:	6923      	ldr	r3, [r4, #16]
 8002726:	6023      	str	r3, [r4, #0]
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	81a3      	strh	r3, [r4, #12]
 8002730:	6923      	ldr	r3, [r4, #16]
 8002732:	b94b      	cbnz	r3, 8002748 <__swsetup_r+0x7c>
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800273a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800273e:	d003      	beq.n	8002748 <__swsetup_r+0x7c>
 8002740:	4621      	mov	r1, r4
 8002742:	4628      	mov	r0, r5
 8002744:	f000 f850 	bl	80027e8 <__smakebuf_r>
 8002748:	89a0      	ldrh	r0, [r4, #12]
 800274a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800274e:	f010 0301 	ands.w	r3, r0, #1
 8002752:	d00a      	beq.n	800276a <__swsetup_r+0x9e>
 8002754:	2300      	movs	r3, #0
 8002756:	60a3      	str	r3, [r4, #8]
 8002758:	6963      	ldr	r3, [r4, #20]
 800275a:	425b      	negs	r3, r3
 800275c:	61a3      	str	r3, [r4, #24]
 800275e:	6923      	ldr	r3, [r4, #16]
 8002760:	b943      	cbnz	r3, 8002774 <__swsetup_r+0xa8>
 8002762:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002766:	d1c4      	bne.n	80026f2 <__swsetup_r+0x26>
 8002768:	bd38      	pop	{r3, r4, r5, pc}
 800276a:	0781      	lsls	r1, r0, #30
 800276c:	bf58      	it	pl
 800276e:	6963      	ldrpl	r3, [r4, #20]
 8002770:	60a3      	str	r3, [r4, #8]
 8002772:	e7f4      	b.n	800275e <__swsetup_r+0x92>
 8002774:	2000      	movs	r0, #0
 8002776:	e7f7      	b.n	8002768 <__swsetup_r+0x9c>
 8002778:	20000068 	.word	0x20000068

0800277c <_sbrk_r>:
 800277c:	b538      	push	{r3, r4, r5, lr}
 800277e:	4d06      	ldr	r5, [pc, #24]	; (8002798 <_sbrk_r+0x1c>)
 8002780:	2300      	movs	r3, #0
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	602b      	str	r3, [r5, #0]
 8002788:	f7ff f8e2 	bl	8001950 <_sbrk>
 800278c:	1c43      	adds	r3, r0, #1
 800278e:	d102      	bne.n	8002796 <_sbrk_r+0x1a>
 8002790:	682b      	ldr	r3, [r5, #0]
 8002792:	b103      	cbz	r3, 8002796 <_sbrk_r+0x1a>
 8002794:	6023      	str	r3, [r4, #0]
 8002796:	bd38      	pop	{r3, r4, r5, pc}
 8002798:	200001cc 	.word	0x200001cc

0800279c <__swhatbuf_r>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	460c      	mov	r4, r1
 80027a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a4:	2900      	cmp	r1, #0
 80027a6:	b096      	sub	sp, #88	; 0x58
 80027a8:	4615      	mov	r5, r2
 80027aa:	461e      	mov	r6, r3
 80027ac:	da0d      	bge.n	80027ca <__swhatbuf_r+0x2e>
 80027ae:	89a3      	ldrh	r3, [r4, #12]
 80027b0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027b4:	f04f 0100 	mov.w	r1, #0
 80027b8:	bf0c      	ite	eq
 80027ba:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80027be:	2340      	movne	r3, #64	; 0x40
 80027c0:	2000      	movs	r0, #0
 80027c2:	6031      	str	r1, [r6, #0]
 80027c4:	602b      	str	r3, [r5, #0]
 80027c6:	b016      	add	sp, #88	; 0x58
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	466a      	mov	r2, sp
 80027cc:	f000 f848 	bl	8002860 <_fstat_r>
 80027d0:	2800      	cmp	r0, #0
 80027d2:	dbec      	blt.n	80027ae <__swhatbuf_r+0x12>
 80027d4:	9901      	ldr	r1, [sp, #4]
 80027d6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80027da:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80027de:	4259      	negs	r1, r3
 80027e0:	4159      	adcs	r1, r3
 80027e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e6:	e7eb      	b.n	80027c0 <__swhatbuf_r+0x24>

080027e8 <__smakebuf_r>:
 80027e8:	898b      	ldrh	r3, [r1, #12]
 80027ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80027ec:	079d      	lsls	r5, r3, #30
 80027ee:	4606      	mov	r6, r0
 80027f0:	460c      	mov	r4, r1
 80027f2:	d507      	bpl.n	8002804 <__smakebuf_r+0x1c>
 80027f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	6123      	str	r3, [r4, #16]
 80027fc:	2301      	movs	r3, #1
 80027fe:	6163      	str	r3, [r4, #20]
 8002800:	b002      	add	sp, #8
 8002802:	bd70      	pop	{r4, r5, r6, pc}
 8002804:	ab01      	add	r3, sp, #4
 8002806:	466a      	mov	r2, sp
 8002808:	f7ff ffc8 	bl	800279c <__swhatbuf_r>
 800280c:	9900      	ldr	r1, [sp, #0]
 800280e:	4605      	mov	r5, r0
 8002810:	4630      	mov	r0, r6
 8002812:	f7ff fb0f 	bl	8001e34 <_malloc_r>
 8002816:	b948      	cbnz	r0, 800282c <__smakebuf_r+0x44>
 8002818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800281c:	059a      	lsls	r2, r3, #22
 800281e:	d4ef      	bmi.n	8002800 <__smakebuf_r+0x18>
 8002820:	f023 0303 	bic.w	r3, r3, #3
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	81a3      	strh	r3, [r4, #12]
 800282a:	e7e3      	b.n	80027f4 <__smakebuf_r+0xc>
 800282c:	89a3      	ldrh	r3, [r4, #12]
 800282e:	6020      	str	r0, [r4, #0]
 8002830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002834:	81a3      	strh	r3, [r4, #12]
 8002836:	9b00      	ldr	r3, [sp, #0]
 8002838:	6163      	str	r3, [r4, #20]
 800283a:	9b01      	ldr	r3, [sp, #4]
 800283c:	6120      	str	r0, [r4, #16]
 800283e:	b15b      	cbz	r3, 8002858 <__smakebuf_r+0x70>
 8002840:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002844:	4630      	mov	r0, r6
 8002846:	f000 f81d 	bl	8002884 <_isatty_r>
 800284a:	b128      	cbz	r0, 8002858 <__smakebuf_r+0x70>
 800284c:	89a3      	ldrh	r3, [r4, #12]
 800284e:	f023 0303 	bic.w	r3, r3, #3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	81a3      	strh	r3, [r4, #12]
 8002858:	89a3      	ldrh	r3, [r4, #12]
 800285a:	431d      	orrs	r5, r3
 800285c:	81a5      	strh	r5, [r4, #12]
 800285e:	e7cf      	b.n	8002800 <__smakebuf_r+0x18>

08002860 <_fstat_r>:
 8002860:	b538      	push	{r3, r4, r5, lr}
 8002862:	4d07      	ldr	r5, [pc, #28]	; (8002880 <_fstat_r+0x20>)
 8002864:	2300      	movs	r3, #0
 8002866:	4604      	mov	r4, r0
 8002868:	4608      	mov	r0, r1
 800286a:	4611      	mov	r1, r2
 800286c:	602b      	str	r3, [r5, #0]
 800286e:	f7ff f847 	bl	8001900 <_fstat>
 8002872:	1c43      	adds	r3, r0, #1
 8002874:	d102      	bne.n	800287c <_fstat_r+0x1c>
 8002876:	682b      	ldr	r3, [r5, #0]
 8002878:	b103      	cbz	r3, 800287c <_fstat_r+0x1c>
 800287a:	6023      	str	r3, [r4, #0]
 800287c:	bd38      	pop	{r3, r4, r5, pc}
 800287e:	bf00      	nop
 8002880:	200001cc 	.word	0x200001cc

08002884 <_isatty_r>:
 8002884:	b538      	push	{r3, r4, r5, lr}
 8002886:	4d06      	ldr	r5, [pc, #24]	; (80028a0 <_isatty_r+0x1c>)
 8002888:	2300      	movs	r3, #0
 800288a:	4604      	mov	r4, r0
 800288c:	4608      	mov	r0, r1
 800288e:	602b      	str	r3, [r5, #0]
 8002890:	f7ff f846 	bl	8001920 <_isatty>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_isatty_r+0x1a>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_isatty_r+0x1a>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	200001cc 	.word	0x200001cc

080028a4 <_init>:
 80028a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028a6:	bf00      	nop
 80028a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028aa:	bc08      	pop	{r3}
 80028ac:	469e      	mov	lr, r3
 80028ae:	4770      	bx	lr

080028b0 <_fini>:
 80028b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b2:	bf00      	nop
 80028b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028b6:	bc08      	pop	{r3}
 80028b8:	469e      	mov	lr, r3
 80028ba:	4770      	bx	lr
